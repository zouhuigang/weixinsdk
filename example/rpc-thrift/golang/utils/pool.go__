package utils

//https://github.com/DrWrong/tantan_demo/blob/ec2e860223cc3823e5513e955d465c5ebab5e33a/src/github.com/DrWrong/monica/thriftext/thrift_client_pool.go
//https://blog.csdn.net/u011142688/article/details/79506351
//https://github.com/adolphlxm/atc/blob/master/pool/pool.go
//https://blog.csdn.net/liuxinmingcode/article/details/78293146
//https://www.codercto.com/a/26585.html
import (
    "github.com/jolestar/go-commons-pool"
    "fmt"
    "time"
)


var pCommonPool *pool.ObjectPool

type PoolTest struct{}

func (this *PoolTest) Test() string {
    return "PoolTest"
}

func init() {
    // 初始化连接池配置项
    PoolConfig := pool.NewDefaultPoolConfig()
    // 连接池最大容量设置
    PoolConfig.MaxTotal = 1000
    WithAbandonedConfig := pool.NewDefaultAbandonedConfig()
    // 注册连接池初始化链接方式
    pCommonPool = pool.NewObjectPoolWithAbandonedConfig(pool.NewPooledObjectFactorySimple(
        func() (interface{}, error) {
            return Link()
        }), PoolConfig, WithAbandonedConfig)
}

// 初始化链接类
func Link() (*PoolTest, error) {
    fmt.Println("初始化PoolTest类!!!")
    return &PoolTest{}, nil
}

func main() {

    //----------------------------------第一次使用将会调用初始化方法---------------------------------
    fmt.Println("第一次使用将会调用初始化方法")
    Test()

    //----------------------------------第二次使用将会复用初始化好的对象---------------------------------
    fmt.Println("第二次使用将会复用初始化好的实例")
    Test()

    //----------------------------------连续多次并发调用当连接池不够用的会扩充连接池---------------------------
    fmt.Println("连续多次并发调用当连接池不够用的会扩充连接池")
    go Test()
    go Test()
    go Test()
    go Test()
    go Test()

    time.Sleep(1 * time.Second)
}

func Test() {
    var client *PoolTest
    // 从连接池中获取一个实例
    obj, _ := pCommonPool.BorrowObject()
    // 转换为对应实体
    if obj != nil {
        client = obj.(*PoolTest)
    }
    // 调用需要的方法
    fmt.Println(client.Test())
    // 交还连接池
    pCommonPool.ReturnObject(client)
}

//====

transportFactory := thrift.NewTFramedTransportFactory(thrift.NewTTransportFactory())
	protocolFactory := thrift.NewTBinaryProtocolFactoryDefault()

	transport, err := thrift.NewTSocket(net.JoinHostPort(HOST, PORT))
	if err != nil {
		fmt.Fprintln(os.Stderr, "error resolving address:", err)
		os.Exit(1)
	}

	useTransport := transportFactory.GetTransport(transport)
	client := z_weixin_service.NewWxServiceThriftClientFactory(useTransport, protocolFactory)
	if err := transport.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to "+HOST+":"+PORT, " ", err)
		os.Exit(1)
	}
	defer transport.Close()
	r1, _ := client.CallBack(time.Now().Unix(), "go client", paramMap)

    ---


    package main

import (
    "batu/demo"
    "fmt"
    "git.apache.org/thrift.git/lib/go/thrift"
    "net"
    "os"
    "strconv"
    "time"
)

const (
    HOST = "127.0.0.1"
    PORT = "9090"
)

func main() {
    startTime := currentTimeMillis()

    transportFactory := thrift.NewTFramedTransportFactory(thrift.NewTTransportFactory())
    protocolFactory := thrift.NewTBinaryProtocolFactoryDefault()

    transport, err := thrift.NewTSocket(net.JoinHostPort(HOST, PORT))
    if err != nil {
        fmt.Fprintln(os.Stderr, "error resolving address:", err)
        os.Exit(1)
    }

    useTransport := transportFactory.GetTransport(transport)
    client := demo.NewBatuThriftClientFactory(useTransport, protocolFactory)
    if err := transport.Open(); err != nil {
        fmt.Fprintln(os.Stderr, "Error opening socket to "+HOST+":"+PORT, " ", err)
        os.Exit(1)
    }
    defer transport.Close()

    for i := 0; i < 10; i++ {
        paramMap := make(map[string]string)
        paramMap["a"] = "batu.demo"
        paramMap["b"] = "test" + strconv.Itoa(i+1)
        r1, _ := client.CallBack(time.Now().Unix(), "go client", paramMap)
        fmt.Println("GOClient Call->", r1)
    }

    model := demo.Article{1, "Go第一篇文章", "我在这里", "liuxinming"}
    client.Put(&model)
    endTime := currentTimeMillis()
    fmt.Printf("本次调用用时:%d-%d=%d毫秒\n", endTime, startTime, (endTime - startTime))

}

func currentTimeMillis() int64 {
    return time.Now().UnixNano() / 1000000
}