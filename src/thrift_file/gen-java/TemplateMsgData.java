/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class TemplateMsgData implements org.apache.thrift.TBase<TemplateMsgData, TemplateMsgData._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateMsgData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateMsgData");

  private static final org.apache.thrift.protocol.TField TOUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("touser", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("template_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FORM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("FormID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MINIPROGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("miniprogram", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TemplateMsgDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TemplateMsgDataTupleSchemeFactory();

  public java.lang.String touser; // required
  public java.lang.String template_id; // required
  public java.lang.String FormID; // required
  public java.lang.String url; // required
  public MiniprogramData miniprogram; // required
  public TemplateData data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOUSER((short)1, "touser"),
    TEMPLATE_ID((short)2, "template_id"),
    FORM_ID((short)3, "FormID"),
    URL((short)4, "url"),
    MINIPROGRAM((short)5, "miniprogram"),
    DATA((short)6, "data");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOUSER
          return TOUSER;
        case 2: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 3: // FORM_ID
          return FORM_ID;
        case 4: // URL
          return URL;
        case 5: // MINIPROGRAM
          return MINIPROGRAM;
        case 6: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOUSER, new org.apache.thrift.meta_data.FieldMetaData("touser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("template_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORM_ID, new org.apache.thrift.meta_data.FieldMetaData("FormID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINIPROGRAM, new org.apache.thrift.meta_data.FieldMetaData("miniprogram", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MiniprogramData")));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateData.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateMsgData.class, metaDataMap);
  }

  public TemplateMsgData() {
  }

  public TemplateMsgData(
    java.lang.String touser,
    java.lang.String template_id,
    java.lang.String FormID,
    java.lang.String url,
    MiniprogramData miniprogram,
    TemplateData data)
  {
    this();
    this.touser = touser;
    this.template_id = template_id;
    this.FormID = FormID;
    this.url = url;
    this.miniprogram = miniprogram;
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateMsgData(TemplateMsgData other) {
    if (other.isSetTouser()) {
      this.touser = other.touser;
    }
    if (other.isSetTemplate_id()) {
      this.template_id = other.template_id;
    }
    if (other.isSetFormID()) {
      this.FormID = other.FormID;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetMiniprogram()) {
      this.miniprogram = new MiniprogramData(other.miniprogram);
    }
    if (other.isSetData()) {
      this.data = new TemplateData(other.data);
    }
  }

  public TemplateMsgData deepCopy() {
    return new TemplateMsgData(this);
  }

  @Override
  public void clear() {
    this.touser = null;
    this.template_id = null;
    this.FormID = null;
    this.url = null;
    this.miniprogram = null;
    this.data = null;
  }

  public java.lang.String getTouser() {
    return this.touser;
  }

  public TemplateMsgData setTouser(java.lang.String touser) {
    this.touser = touser;
    return this;
  }

  public void unsetTouser() {
    this.touser = null;
  }

  /** Returns true if field touser is set (has been assigned a value) and false otherwise */
  public boolean isSetTouser() {
    return this.touser != null;
  }

  public void setTouserIsSet(boolean value) {
    if (!value) {
      this.touser = null;
    }
  }

  public java.lang.String getTemplate_id() {
    return this.template_id;
  }

  public TemplateMsgData setTemplate_id(java.lang.String template_id) {
    this.template_id = template_id;
    return this;
  }

  public void unsetTemplate_id() {
    this.template_id = null;
  }

  /** Returns true if field template_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplate_id() {
    return this.template_id != null;
  }

  public void setTemplate_idIsSet(boolean value) {
    if (!value) {
      this.template_id = null;
    }
  }

  public java.lang.String getFormID() {
    return this.FormID;
  }

  public TemplateMsgData setFormID(java.lang.String FormID) {
    this.FormID = FormID;
    return this;
  }

  public void unsetFormID() {
    this.FormID = null;
  }

  /** Returns true if field FormID is set (has been assigned a value) and false otherwise */
  public boolean isSetFormID() {
    return this.FormID != null;
  }

  public void setFormIDIsSet(boolean value) {
    if (!value) {
      this.FormID = null;
    }
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public TemplateMsgData setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public MiniprogramData getMiniprogram() {
    return this.miniprogram;
  }

  public TemplateMsgData setMiniprogram(MiniprogramData miniprogram) {
    this.miniprogram = miniprogram;
    return this;
  }

  public void unsetMiniprogram() {
    this.miniprogram = null;
  }

  /** Returns true if field miniprogram is set (has been assigned a value) and false otherwise */
  public boolean isSetMiniprogram() {
    return this.miniprogram != null;
  }

  public void setMiniprogramIsSet(boolean value) {
    if (!value) {
      this.miniprogram = null;
    }
  }

  public TemplateData getData() {
    return this.data;
  }

  public TemplateMsgData setData(TemplateData data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOUSER:
      if (value == null) {
        unsetTouser();
      } else {
        setTouser((java.lang.String)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplate_id();
      } else {
        setTemplate_id((java.lang.String)value);
      }
      break;

    case FORM_ID:
      if (value == null) {
        unsetFormID();
      } else {
        setFormID((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case MINIPROGRAM:
      if (value == null) {
        unsetMiniprogram();
      } else {
        setMiniprogram((MiniprogramData)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((TemplateData)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOUSER:
      return getTouser();

    case TEMPLATE_ID:
      return getTemplate_id();

    case FORM_ID:
      return getFormID();

    case URL:
      return getUrl();

    case MINIPROGRAM:
      return getMiniprogram();

    case DATA:
      return getData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOUSER:
      return isSetTouser();
    case TEMPLATE_ID:
      return isSetTemplate_id();
    case FORM_ID:
      return isSetFormID();
    case URL:
      return isSetUrl();
    case MINIPROGRAM:
      return isSetMiniprogram();
    case DATA:
      return isSetData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateMsgData)
      return this.equals((TemplateMsgData)that);
    return false;
  }

  public boolean equals(TemplateMsgData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_touser = true && this.isSetTouser();
    boolean that_present_touser = true && that.isSetTouser();
    if (this_present_touser || that_present_touser) {
      if (!(this_present_touser && that_present_touser))
        return false;
      if (!this.touser.equals(that.touser))
        return false;
    }

    boolean this_present_template_id = true && this.isSetTemplate_id();
    boolean that_present_template_id = true && that.isSetTemplate_id();
    if (this_present_template_id || that_present_template_id) {
      if (!(this_present_template_id && that_present_template_id))
        return false;
      if (!this.template_id.equals(that.template_id))
        return false;
    }

    boolean this_present_FormID = true && this.isSetFormID();
    boolean that_present_FormID = true && that.isSetFormID();
    if (this_present_FormID || that_present_FormID) {
      if (!(this_present_FormID && that_present_FormID))
        return false;
      if (!this.FormID.equals(that.FormID))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_miniprogram = true && this.isSetMiniprogram();
    boolean that_present_miniprogram = true && that.isSetMiniprogram();
    if (this_present_miniprogram || that_present_miniprogram) {
      if (!(this_present_miniprogram && that_present_miniprogram))
        return false;
      if (!this.miniprogram.equals(that.miniprogram))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTouser()) ? 131071 : 524287);
    if (isSetTouser())
      hashCode = hashCode * 8191 + touser.hashCode();

    hashCode = hashCode * 8191 + ((isSetTemplate_id()) ? 131071 : 524287);
    if (isSetTemplate_id())
      hashCode = hashCode * 8191 + template_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetFormID()) ? 131071 : 524287);
    if (isSetFormID())
      hashCode = hashCode * 8191 + FormID.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetMiniprogram()) ? 131071 : 524287);
    if (isSetMiniprogram())
      hashCode = hashCode * 8191 + miniprogram.hashCode();

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TemplateMsgData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTouser()).compareTo(other.isSetTouser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTouser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.touser, other.touser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemplate_id()).compareTo(other.isSetTemplate_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplate_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.template_id, other.template_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFormID()).compareTo(other.isSetFormID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FormID, other.FormID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMiniprogram()).compareTo(other.isSetMiniprogram());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiniprogram()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.miniprogram, other.miniprogram);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TemplateMsgData(");
    boolean first = true;

    sb.append("touser:");
    if (this.touser == null) {
      sb.append("null");
    } else {
      sb.append(this.touser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("template_id:");
    if (this.template_id == null) {
      sb.append("null");
    } else {
      sb.append(this.template_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FormID:");
    if (this.FormID == null) {
      sb.append("null");
    } else {
      sb.append(this.FormID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("miniprogram:");
    if (this.miniprogram == null) {
      sb.append("null");
    } else {
      sb.append(this.miniprogram);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (data != null) {
      data.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateMsgDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TemplateMsgDataStandardScheme getScheme() {
      return new TemplateMsgDataStandardScheme();
    }
  }

  private static class TemplateMsgDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TemplateMsgData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateMsgData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.touser = iprot.readString();
              struct.setTouserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.template_id = iprot.readString();
              struct.setTemplate_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FORM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FormID = iprot.readString();
              struct.setFormIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MINIPROGRAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.miniprogram = new MiniprogramData();
              struct.miniprogram.read(iprot);
              struct.setMiniprogramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data = new TemplateData();
              struct.data.read(iprot);
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateMsgData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.touser != null) {
        oprot.writeFieldBegin(TOUSER_FIELD_DESC);
        oprot.writeString(struct.touser);
        oprot.writeFieldEnd();
      }
      if (struct.template_id != null) {
        oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
        oprot.writeString(struct.template_id);
        oprot.writeFieldEnd();
      }
      if (struct.FormID != null) {
        oprot.writeFieldBegin(FORM_ID_FIELD_DESC);
        oprot.writeString(struct.FormID);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.miniprogram != null) {
        oprot.writeFieldBegin(MINIPROGRAM_FIELD_DESC);
        struct.miniprogram.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        struct.data.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TemplateMsgDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TemplateMsgDataTupleScheme getScheme() {
      return new TemplateMsgDataTupleScheme();
    }
  }

  private static class TemplateMsgDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TemplateMsgData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TemplateMsgData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTouser()) {
        optionals.set(0);
      }
      if (struct.isSetTemplate_id()) {
        optionals.set(1);
      }
      if (struct.isSetFormID()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetMiniprogram()) {
        optionals.set(4);
      }
      if (struct.isSetData()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTouser()) {
        oprot.writeString(struct.touser);
      }
      if (struct.isSetTemplate_id()) {
        oprot.writeString(struct.template_id);
      }
      if (struct.isSetFormID()) {
        oprot.writeString(struct.FormID);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetMiniprogram()) {
        struct.miniprogram.write(oprot);
      }
      if (struct.isSetData()) {
        struct.data.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TemplateMsgData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.touser = iprot.readString();
        struct.setTouserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.template_id = iprot.readString();
        struct.setTemplate_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.FormID = iprot.readString();
        struct.setFormIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.miniprogram = new MiniprogramData();
        struct.miniprogram.read(iprot);
        struct.setMiniprogramIsSet(true);
      }
      if (incoming.get(5)) {
        struct.data = new TemplateData();
        struct.data.read(iprot);
        struct.setDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

