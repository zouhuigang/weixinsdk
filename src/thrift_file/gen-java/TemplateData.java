/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class TemplateData implements org.apache.thrift.TBase<TemplateData, TemplateData._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateData");

  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField KEYWORD1_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword1", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField KEYWORD2_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword2", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField KEYWORD3_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword3", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField KEYWORD4_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword4", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField KEYWORD5_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword5", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TemplateDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TemplateDataTupleSchemeFactory();

  public KeyWordData first; // required
  public KeyWordData keyword1; // required
  public KeyWordData keyword2; // required
  public KeyWordData keyword3; // required
  public KeyWordData keyword4; // required
  public KeyWordData keyword5; // required
  public KeyWordData remark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST((short)1, "first"),
    KEYWORD1((short)2, "keyword1"),
    KEYWORD2((short)3, "keyword2"),
    KEYWORD3((short)4, "keyword3"),
    KEYWORD4((short)5, "keyword4"),
    KEYWORD5((short)6, "keyword5"),
    REMARK((short)7, "remark");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST
          return FIRST;
        case 2: // KEYWORD1
          return KEYWORD1;
        case 3: // KEYWORD2
          return KEYWORD2;
        case 4: // KEYWORD3
          return KEYWORD3;
        case 5: // KEYWORD4
          return KEYWORD4;
        case 6: // KEYWORD5
          return KEYWORD5;
        case 7: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyWordData.class)));
    tmpMap.put(_Fields.KEYWORD1, new org.apache.thrift.meta_data.FieldMetaData("keyword1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyWordData.class)));
    tmpMap.put(_Fields.KEYWORD2, new org.apache.thrift.meta_data.FieldMetaData("keyword2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyWordData.class)));
    tmpMap.put(_Fields.KEYWORD3, new org.apache.thrift.meta_data.FieldMetaData("keyword3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyWordData.class)));
    tmpMap.put(_Fields.KEYWORD4, new org.apache.thrift.meta_data.FieldMetaData("keyword4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyWordData.class)));
    tmpMap.put(_Fields.KEYWORD5, new org.apache.thrift.meta_data.FieldMetaData("keyword5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyWordData.class)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyWordData.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateData.class, metaDataMap);
  }

  public TemplateData() {
  }

  public TemplateData(
    KeyWordData first,
    KeyWordData keyword1,
    KeyWordData keyword2,
    KeyWordData keyword3,
    KeyWordData keyword4,
    KeyWordData keyword5,
    KeyWordData remark)
  {
    this();
    this.first = first;
    this.keyword1 = keyword1;
    this.keyword2 = keyword2;
    this.keyword3 = keyword3;
    this.keyword4 = keyword4;
    this.keyword5 = keyword5;
    this.remark = remark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateData(TemplateData other) {
    if (other.isSetFirst()) {
      this.first = new KeyWordData(other.first);
    }
    if (other.isSetKeyword1()) {
      this.keyword1 = new KeyWordData(other.keyword1);
    }
    if (other.isSetKeyword2()) {
      this.keyword2 = new KeyWordData(other.keyword2);
    }
    if (other.isSetKeyword3()) {
      this.keyword3 = new KeyWordData(other.keyword3);
    }
    if (other.isSetKeyword4()) {
      this.keyword4 = new KeyWordData(other.keyword4);
    }
    if (other.isSetKeyword5()) {
      this.keyword5 = new KeyWordData(other.keyword5);
    }
    if (other.isSetRemark()) {
      this.remark = new KeyWordData(other.remark);
    }
  }

  public TemplateData deepCopy() {
    return new TemplateData(this);
  }

  @Override
  public void clear() {
    this.first = null;
    this.keyword1 = null;
    this.keyword2 = null;
    this.keyword3 = null;
    this.keyword4 = null;
    this.keyword5 = null;
    this.remark = null;
  }

  public KeyWordData getFirst() {
    return this.first;
  }

  public TemplateData setFirst(KeyWordData first) {
    this.first = first;
    return this;
  }

  public void unsetFirst() {
    this.first = null;
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return this.first != null;
  }

  public void setFirstIsSet(boolean value) {
    if (!value) {
      this.first = null;
    }
  }

  public KeyWordData getKeyword1() {
    return this.keyword1;
  }

  public TemplateData setKeyword1(KeyWordData keyword1) {
    this.keyword1 = keyword1;
    return this;
  }

  public void unsetKeyword1() {
    this.keyword1 = null;
  }

  /** Returns true if field keyword1 is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword1() {
    return this.keyword1 != null;
  }

  public void setKeyword1IsSet(boolean value) {
    if (!value) {
      this.keyword1 = null;
    }
  }

  public KeyWordData getKeyword2() {
    return this.keyword2;
  }

  public TemplateData setKeyword2(KeyWordData keyword2) {
    this.keyword2 = keyword2;
    return this;
  }

  public void unsetKeyword2() {
    this.keyword2 = null;
  }

  /** Returns true if field keyword2 is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword2() {
    return this.keyword2 != null;
  }

  public void setKeyword2IsSet(boolean value) {
    if (!value) {
      this.keyword2 = null;
    }
  }

  public KeyWordData getKeyword3() {
    return this.keyword3;
  }

  public TemplateData setKeyword3(KeyWordData keyword3) {
    this.keyword3 = keyword3;
    return this;
  }

  public void unsetKeyword3() {
    this.keyword3 = null;
  }

  /** Returns true if field keyword3 is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword3() {
    return this.keyword3 != null;
  }

  public void setKeyword3IsSet(boolean value) {
    if (!value) {
      this.keyword3 = null;
    }
  }

  public KeyWordData getKeyword4() {
    return this.keyword4;
  }

  public TemplateData setKeyword4(KeyWordData keyword4) {
    this.keyword4 = keyword4;
    return this;
  }

  public void unsetKeyword4() {
    this.keyword4 = null;
  }

  /** Returns true if field keyword4 is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword4() {
    return this.keyword4 != null;
  }

  public void setKeyword4IsSet(boolean value) {
    if (!value) {
      this.keyword4 = null;
    }
  }

  public KeyWordData getKeyword5() {
    return this.keyword5;
  }

  public TemplateData setKeyword5(KeyWordData keyword5) {
    this.keyword5 = keyword5;
    return this;
  }

  public void unsetKeyword5() {
    this.keyword5 = null;
  }

  /** Returns true if field keyword5 is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword5() {
    return this.keyword5 != null;
  }

  public void setKeyword5IsSet(boolean value) {
    if (!value) {
      this.keyword5 = null;
    }
  }

  public KeyWordData getRemark() {
    return this.remark;
  }

  public TemplateData setRemark(KeyWordData remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((KeyWordData)value);
      }
      break;

    case KEYWORD1:
      if (value == null) {
        unsetKeyword1();
      } else {
        setKeyword1((KeyWordData)value);
      }
      break;

    case KEYWORD2:
      if (value == null) {
        unsetKeyword2();
      } else {
        setKeyword2((KeyWordData)value);
      }
      break;

    case KEYWORD3:
      if (value == null) {
        unsetKeyword3();
      } else {
        setKeyword3((KeyWordData)value);
      }
      break;

    case KEYWORD4:
      if (value == null) {
        unsetKeyword4();
      } else {
        setKeyword4((KeyWordData)value);
      }
      break;

    case KEYWORD5:
      if (value == null) {
        unsetKeyword5();
      } else {
        setKeyword5((KeyWordData)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((KeyWordData)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST:
      return getFirst();

    case KEYWORD1:
      return getKeyword1();

    case KEYWORD2:
      return getKeyword2();

    case KEYWORD3:
      return getKeyword3();

    case KEYWORD4:
      return getKeyword4();

    case KEYWORD5:
      return getKeyword5();

    case REMARK:
      return getRemark();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIRST:
      return isSetFirst();
    case KEYWORD1:
      return isSetKeyword1();
    case KEYWORD2:
      return isSetKeyword2();
    case KEYWORD3:
      return isSetKeyword3();
    case KEYWORD4:
      return isSetKeyword4();
    case KEYWORD5:
      return isSetKeyword5();
    case REMARK:
      return isSetRemark();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateData)
      return this.equals((TemplateData)that);
    return false;
  }

  public boolean equals(TemplateData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_first = true && this.isSetFirst();
    boolean that_present_first = true && that.isSetFirst();
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (!this.first.equals(that.first))
        return false;
    }

    boolean this_present_keyword1 = true && this.isSetKeyword1();
    boolean that_present_keyword1 = true && that.isSetKeyword1();
    if (this_present_keyword1 || that_present_keyword1) {
      if (!(this_present_keyword1 && that_present_keyword1))
        return false;
      if (!this.keyword1.equals(that.keyword1))
        return false;
    }

    boolean this_present_keyword2 = true && this.isSetKeyword2();
    boolean that_present_keyword2 = true && that.isSetKeyword2();
    if (this_present_keyword2 || that_present_keyword2) {
      if (!(this_present_keyword2 && that_present_keyword2))
        return false;
      if (!this.keyword2.equals(that.keyword2))
        return false;
    }

    boolean this_present_keyword3 = true && this.isSetKeyword3();
    boolean that_present_keyword3 = true && that.isSetKeyword3();
    if (this_present_keyword3 || that_present_keyword3) {
      if (!(this_present_keyword3 && that_present_keyword3))
        return false;
      if (!this.keyword3.equals(that.keyword3))
        return false;
    }

    boolean this_present_keyword4 = true && this.isSetKeyword4();
    boolean that_present_keyword4 = true && that.isSetKeyword4();
    if (this_present_keyword4 || that_present_keyword4) {
      if (!(this_present_keyword4 && that_present_keyword4))
        return false;
      if (!this.keyword4.equals(that.keyword4))
        return false;
    }

    boolean this_present_keyword5 = true && this.isSetKeyword5();
    boolean that_present_keyword5 = true && that.isSetKeyword5();
    if (this_present_keyword5 || that_present_keyword5) {
      if (!(this_present_keyword5 && that_present_keyword5))
        return false;
      if (!this.keyword5.equals(that.keyword5))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFirst()) ? 131071 : 524287);
    if (isSetFirst())
      hashCode = hashCode * 8191 + first.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyword1()) ? 131071 : 524287);
    if (isSetKeyword1())
      hashCode = hashCode * 8191 + keyword1.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyword2()) ? 131071 : 524287);
    if (isSetKeyword2())
      hashCode = hashCode * 8191 + keyword2.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyword3()) ? 131071 : 524287);
    if (isSetKeyword3())
      hashCode = hashCode * 8191 + keyword3.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyword4()) ? 131071 : 524287);
    if (isSetKeyword4())
      hashCode = hashCode * 8191 + keyword4.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyword5()) ? 131071 : 524287);
    if (isSetKeyword5())
      hashCode = hashCode * 8191 + keyword5.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TemplateData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyword1()).compareTo(other.isSetKeyword1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword1, other.keyword1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyword2()).compareTo(other.isSetKeyword2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword2, other.keyword2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyword3()).compareTo(other.isSetKeyword3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword3, other.keyword3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyword4()).compareTo(other.isSetKeyword4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword4, other.keyword4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyword5()).compareTo(other.isSetKeyword5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword5, other.keyword5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TemplateData(");
    boolean first = true;

    sb.append("first:");
    if (this.first == null) {
      sb.append("null");
    } else {
      sb.append(this.first);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyword1:");
    if (this.keyword1 == null) {
      sb.append("null");
    } else {
      sb.append(this.keyword1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyword2:");
    if (this.keyword2 == null) {
      sb.append("null");
    } else {
      sb.append(this.keyword2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyword3:");
    if (this.keyword3 == null) {
      sb.append("null");
    } else {
      sb.append(this.keyword3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyword4:");
    if (this.keyword4 == null) {
      sb.append("null");
    } else {
      sb.append(this.keyword4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyword5:");
    if (this.keyword5 == null) {
      sb.append("null");
    } else {
      sb.append(this.keyword5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (first != null) {
      first.validate();
    }
    if (keyword1 != null) {
      keyword1.validate();
    }
    if (keyword2 != null) {
      keyword2.validate();
    }
    if (keyword3 != null) {
      keyword3.validate();
    }
    if (keyword4 != null) {
      keyword4.validate();
    }
    if (keyword5 != null) {
      keyword5.validate();
    }
    if (remark != null) {
      remark.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TemplateDataStandardScheme getScheme() {
      return new TemplateDataStandardScheme();
    }
  }

  private static class TemplateDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TemplateData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.first = new KeyWordData();
              struct.first.read(iprot);
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEYWORD1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.keyword1 = new KeyWordData();
              struct.keyword1.read(iprot);
              struct.setKeyword1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYWORD2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.keyword2 = new KeyWordData();
              struct.keyword2.read(iprot);
              struct.setKeyword2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEYWORD3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.keyword3 = new KeyWordData();
              struct.keyword3.read(iprot);
              struct.setKeyword3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KEYWORD4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.keyword4 = new KeyWordData();
              struct.keyword4.read(iprot);
              struct.setKeyword4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEYWORD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.keyword5 = new KeyWordData();
              struct.keyword5.read(iprot);
              struct.setKeyword5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remark = new KeyWordData();
              struct.remark.read(iprot);
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.first != null) {
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        struct.first.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.keyword1 != null) {
        oprot.writeFieldBegin(KEYWORD1_FIELD_DESC);
        struct.keyword1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.keyword2 != null) {
        oprot.writeFieldBegin(KEYWORD2_FIELD_DESC);
        struct.keyword2.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.keyword3 != null) {
        oprot.writeFieldBegin(KEYWORD3_FIELD_DESC);
        struct.keyword3.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.keyword4 != null) {
        oprot.writeFieldBegin(KEYWORD4_FIELD_DESC);
        struct.keyword4.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.keyword5 != null) {
        oprot.writeFieldBegin(KEYWORD5_FIELD_DESC);
        struct.keyword5.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        struct.remark.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TemplateDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TemplateDataTupleScheme getScheme() {
      return new TemplateDataTupleScheme();
    }
  }

  private static class TemplateDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TemplateData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TemplateData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFirst()) {
        optionals.set(0);
      }
      if (struct.isSetKeyword1()) {
        optionals.set(1);
      }
      if (struct.isSetKeyword2()) {
        optionals.set(2);
      }
      if (struct.isSetKeyword3()) {
        optionals.set(3);
      }
      if (struct.isSetKeyword4()) {
        optionals.set(4);
      }
      if (struct.isSetKeyword5()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFirst()) {
        struct.first.write(oprot);
      }
      if (struct.isSetKeyword1()) {
        struct.keyword1.write(oprot);
      }
      if (struct.isSetKeyword2()) {
        struct.keyword2.write(oprot);
      }
      if (struct.isSetKeyword3()) {
        struct.keyword3.write(oprot);
      }
      if (struct.isSetKeyword4()) {
        struct.keyword4.write(oprot);
      }
      if (struct.isSetKeyword5()) {
        struct.keyword5.write(oprot);
      }
      if (struct.isSetRemark()) {
        struct.remark.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TemplateData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.first = new KeyWordData();
        struct.first.read(iprot);
        struct.setFirstIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keyword1 = new KeyWordData();
        struct.keyword1.read(iprot);
        struct.setKeyword1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.keyword2 = new KeyWordData();
        struct.keyword2.read(iprot);
        struct.setKeyword2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.keyword3 = new KeyWordData();
        struct.keyword3.read(iprot);
        struct.setKeyword3IsSet(true);
      }
      if (incoming.get(4)) {
        struct.keyword4 = new KeyWordData();
        struct.keyword4.read(iprot);
        struct.setKeyword4IsSet(true);
      }
      if (incoming.get(5)) {
        struct.keyword5 = new KeyWordData();
        struct.keyword5.read(iprot);
        struct.setKeyword5IsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = new KeyWordData();
        struct.remark.read(iprot);
        struct.setRemarkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

