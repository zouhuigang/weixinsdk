/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class JsapiSignData implements org.apache.thrift.TBase<JsapiSignData, JsapiSignData._Fields>, java.io.Serializable, Cloneable, Comparable<JsapiSignData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JsapiSignData");

  private static final org.apache.thrift.protocol.TField JSAPI_TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("jsapi_ticket", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NONCESTR_FIELD_DESC = new org.apache.thrift.protocol.TField("noncestr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("sign", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JsapiSignDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JsapiSignDataTupleSchemeFactory();

  public java.lang.String jsapi_ticket; // required
  public java.lang.String noncestr; // required
  public long timestamp; // required
  public java.lang.String url; // required
  public java.lang.String sign; // required
  public java.lang.String appid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JSAPI_TICKET((short)1, "jsapi_ticket"),
    NONCESTR((short)2, "noncestr"),
    TIMESTAMP((short)3, "timestamp"),
    URL((short)4, "url"),
    SIGN((short)5, "sign"),
    APPID((short)6, "appid");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JSAPI_TICKET
          return JSAPI_TICKET;
        case 2: // NONCESTR
          return NONCESTR;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // URL
          return URL;
        case 5: // SIGN
          return SIGN;
        case 6: // APPID
          return APPID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JSAPI_TICKET, new org.apache.thrift.meta_data.FieldMetaData("jsapi_ticket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NONCESTR, new org.apache.thrift.meta_data.FieldMetaData("noncestr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JsapiSignData.class, metaDataMap);
  }

  public JsapiSignData() {
  }

  public JsapiSignData(
    java.lang.String jsapi_ticket,
    java.lang.String noncestr,
    long timestamp,
    java.lang.String url,
    java.lang.String sign,
    java.lang.String appid)
  {
    this();
    this.jsapi_ticket = jsapi_ticket;
    this.noncestr = noncestr;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.url = url;
    this.sign = sign;
    this.appid = appid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JsapiSignData(JsapiSignData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJsapi_ticket()) {
      this.jsapi_ticket = other.jsapi_ticket;
    }
    if (other.isSetNoncestr()) {
      this.noncestr = other.noncestr;
    }
    this.timestamp = other.timestamp;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetSign()) {
      this.sign = other.sign;
    }
    if (other.isSetAppid()) {
      this.appid = other.appid;
    }
  }

  public JsapiSignData deepCopy() {
    return new JsapiSignData(this);
  }

  @Override
  public void clear() {
    this.jsapi_ticket = null;
    this.noncestr = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.url = null;
    this.sign = null;
    this.appid = null;
  }

  public java.lang.String getJsapi_ticket() {
    return this.jsapi_ticket;
  }

  public JsapiSignData setJsapi_ticket(java.lang.String jsapi_ticket) {
    this.jsapi_ticket = jsapi_ticket;
    return this;
  }

  public void unsetJsapi_ticket() {
    this.jsapi_ticket = null;
  }

  /** Returns true if field jsapi_ticket is set (has been assigned a value) and false otherwise */
  public boolean isSetJsapi_ticket() {
    return this.jsapi_ticket != null;
  }

  public void setJsapi_ticketIsSet(boolean value) {
    if (!value) {
      this.jsapi_ticket = null;
    }
  }

  public java.lang.String getNoncestr() {
    return this.noncestr;
  }

  public JsapiSignData setNoncestr(java.lang.String noncestr) {
    this.noncestr = noncestr;
    return this;
  }

  public void unsetNoncestr() {
    this.noncestr = null;
  }

  /** Returns true if field noncestr is set (has been assigned a value) and false otherwise */
  public boolean isSetNoncestr() {
    return this.noncestr != null;
  }

  public void setNoncestrIsSet(boolean value) {
    if (!value) {
      this.noncestr = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public JsapiSignData setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public JsapiSignData setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public java.lang.String getSign() {
    return this.sign;
  }

  public JsapiSignData setSign(java.lang.String sign) {
    this.sign = sign;
    return this;
  }

  public void unsetSign() {
    this.sign = null;
  }

  /** Returns true if field sign is set (has been assigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.sign = null;
    }
  }

  public java.lang.String getAppid() {
    return this.appid;
  }

  public JsapiSignData setAppid(java.lang.String appid) {
    this.appid = appid;
    return this;
  }

  public void unsetAppid() {
    this.appid = null;
  }

  /** Returns true if field appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return this.appid != null;
  }

  public void setAppidIsSet(boolean value) {
    if (!value) {
      this.appid = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case JSAPI_TICKET:
      if (value == null) {
        unsetJsapi_ticket();
      } else {
        setJsapi_ticket((java.lang.String)value);
      }
      break;

    case NONCESTR:
      if (value == null) {
        unsetNoncestr();
      } else {
        setNoncestr((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((java.lang.String)value);
      }
      break;

    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JSAPI_TICKET:
      return getJsapi_ticket();

    case NONCESTR:
      return getNoncestr();

    case TIMESTAMP:
      return getTimestamp();

    case URL:
      return getUrl();

    case SIGN:
      return getSign();

    case APPID:
      return getAppid();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JSAPI_TICKET:
      return isSetJsapi_ticket();
    case NONCESTR:
      return isSetNoncestr();
    case TIMESTAMP:
      return isSetTimestamp();
    case URL:
      return isSetUrl();
    case SIGN:
      return isSetSign();
    case APPID:
      return isSetAppid();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JsapiSignData)
      return this.equals((JsapiSignData)that);
    return false;
  }

  public boolean equals(JsapiSignData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_jsapi_ticket = true && this.isSetJsapi_ticket();
    boolean that_present_jsapi_ticket = true && that.isSetJsapi_ticket();
    if (this_present_jsapi_ticket || that_present_jsapi_ticket) {
      if (!(this_present_jsapi_ticket && that_present_jsapi_ticket))
        return false;
      if (!this.jsapi_ticket.equals(that.jsapi_ticket))
        return false;
    }

    boolean this_present_noncestr = true && this.isSetNoncestr();
    boolean that_present_noncestr = true && that.isSetNoncestr();
    if (this_present_noncestr || that_present_noncestr) {
      if (!(this_present_noncestr && that_present_noncestr))
        return false;
      if (!this.noncestr.equals(that.noncestr))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_sign = true && this.isSetSign();
    boolean that_present_sign = true && that.isSetSign();
    if (this_present_sign || that_present_sign) {
      if (!(this_present_sign && that_present_sign))
        return false;
      if (!this.sign.equals(that.sign))
        return false;
    }

    boolean this_present_appid = true && this.isSetAppid();
    boolean that_present_appid = true && that.isSetAppid();
    if (this_present_appid || that_present_appid) {
      if (!(this_present_appid && that_present_appid))
        return false;
      if (!this.appid.equals(that.appid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJsapi_ticket()) ? 131071 : 524287);
    if (isSetJsapi_ticket())
      hashCode = hashCode * 8191 + jsapi_ticket.hashCode();

    hashCode = hashCode * 8191 + ((isSetNoncestr()) ? 131071 : 524287);
    if (isSetNoncestr())
      hashCode = hashCode * 8191 + noncestr.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetSign()) ? 131071 : 524287);
    if (isSetSign())
      hashCode = hashCode * 8191 + sign.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppid()) ? 131071 : 524287);
    if (isSetAppid())
      hashCode = hashCode * 8191 + appid.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JsapiSignData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJsapi_ticket()).compareTo(other.isSetJsapi_ticket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsapi_ticket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsapi_ticket, other.jsapi_ticket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNoncestr()).compareTo(other.isSetNoncestr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoncestr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noncestr, other.noncestr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSign()).compareTo(other.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign, other.sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JsapiSignData(");
    boolean first = true;

    sb.append("jsapi_ticket:");
    if (this.jsapi_ticket == null) {
      sb.append("null");
    } else {
      sb.append(this.jsapi_ticket);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noncestr:");
    if (this.noncestr == null) {
      sb.append("null");
    } else {
      sb.append(this.noncestr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sign:");
    if (this.sign == null) {
      sb.append("null");
    } else {
      sb.append(this.sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appid:");
    if (this.appid == null) {
      sb.append("null");
    } else {
      sb.append(this.appid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JsapiSignDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JsapiSignDataStandardScheme getScheme() {
      return new JsapiSignDataStandardScheme();
    }
  }

  private static class JsapiSignDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<JsapiSignData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JsapiSignData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JSAPI_TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsapi_ticket = iprot.readString();
              struct.setJsapi_ticketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NONCESTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noncestr = iprot.readString();
              struct.setNoncestrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sign = iprot.readString();
              struct.setSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appid = iprot.readString();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JsapiSignData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jsapi_ticket != null) {
        oprot.writeFieldBegin(JSAPI_TICKET_FIELD_DESC);
        oprot.writeString(struct.jsapi_ticket);
        oprot.writeFieldEnd();
      }
      if (struct.noncestr != null) {
        oprot.writeFieldBegin(NONCESTR_FIELD_DESC);
        oprot.writeString(struct.noncestr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.sign != null) {
        oprot.writeFieldBegin(SIGN_FIELD_DESC);
        oprot.writeString(struct.sign);
        oprot.writeFieldEnd();
      }
      if (struct.appid != null) {
        oprot.writeFieldBegin(APPID_FIELD_DESC);
        oprot.writeString(struct.appid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JsapiSignDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JsapiSignDataTupleScheme getScheme() {
      return new JsapiSignDataTupleScheme();
    }
  }

  private static class JsapiSignDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<JsapiSignData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JsapiSignData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJsapi_ticket()) {
        optionals.set(0);
      }
      if (struct.isSetNoncestr()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetSign()) {
        optionals.set(4);
      }
      if (struct.isSetAppid()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetJsapi_ticket()) {
        oprot.writeString(struct.jsapi_ticket);
      }
      if (struct.isSetNoncestr()) {
        oprot.writeString(struct.noncestr);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetSign()) {
        oprot.writeString(struct.sign);
      }
      if (struct.isSetAppid()) {
        oprot.writeString(struct.appid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JsapiSignData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.jsapi_ticket = iprot.readString();
        struct.setJsapi_ticketIsSet(true);
      }
      if (incoming.get(1)) {
        struct.noncestr = iprot.readString();
        struct.setNoncestrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sign = iprot.readString();
        struct.setSignIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appid = iprot.readString();
        struct.setAppidIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

