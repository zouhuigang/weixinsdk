/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class JsApiParameters implements org.apache.thrift.TBase<JsApiParameters, JsApiParameters._Fields>, java.io.Serializable, Cloneable, Comparable<JsApiParameters> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JsApiParameters");

  private static final org.apache.thrift.protocol.TField PREPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prepayId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NONCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("nonceStr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("sign", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAY_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("paySign", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JsApiParametersStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JsApiParametersTupleSchemeFactory();

  public java.lang.String prepayId; // required
  public java.lang.String nonceStr; // required
  public long timeStamp; // required
  public java.lang.String sign; // required
  public java.lang.String appId; // required
  public java.lang.String paySign; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PREPAY_ID((short)1, "prepayId"),
    NONCE_STR((short)2, "nonceStr"),
    TIME_STAMP((short)3, "timeStamp"),
    SIGN((short)4, "sign"),
    APP_ID((short)5, "appId"),
    PAY_SIGN((short)6, "paySign");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PREPAY_ID
          return PREPAY_ID;
        case 2: // NONCE_STR
          return NONCE_STR;
        case 3: // TIME_STAMP
          return TIME_STAMP;
        case 4: // SIGN
          return SIGN;
        case 5: // APP_ID
          return APP_ID;
        case 6: // PAY_SIGN
          return PAY_SIGN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PREPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("prepayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NONCE_STR, new org.apache.thrift.meta_data.FieldMetaData("nonceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_SIGN, new org.apache.thrift.meta_data.FieldMetaData("paySign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JsApiParameters.class, metaDataMap);
  }

  public JsApiParameters() {
  }

  public JsApiParameters(
    java.lang.String prepayId,
    java.lang.String nonceStr,
    long timeStamp,
    java.lang.String sign,
    java.lang.String appId,
    java.lang.String paySign)
  {
    this();
    this.prepayId = prepayId;
    this.nonceStr = nonceStr;
    this.timeStamp = timeStamp;
    setTimeStampIsSet(true);
    this.sign = sign;
    this.appId = appId;
    this.paySign = paySign;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JsApiParameters(JsApiParameters other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPrepayId()) {
      this.prepayId = other.prepayId;
    }
    if (other.isSetNonceStr()) {
      this.nonceStr = other.nonceStr;
    }
    this.timeStamp = other.timeStamp;
    if (other.isSetSign()) {
      this.sign = other.sign;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetPaySign()) {
      this.paySign = other.paySign;
    }
  }

  public JsApiParameters deepCopy() {
    return new JsApiParameters(this);
  }

  @Override
  public void clear() {
    this.prepayId = null;
    this.nonceStr = null;
    setTimeStampIsSet(false);
    this.timeStamp = 0;
    this.sign = null;
    this.appId = null;
    this.paySign = null;
  }

  public java.lang.String getPrepayId() {
    return this.prepayId;
  }

  public JsApiParameters setPrepayId(java.lang.String prepayId) {
    this.prepayId = prepayId;
    return this;
  }

  public void unsetPrepayId() {
    this.prepayId = null;
  }

  /** Returns true if field prepayId is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepayId() {
    return this.prepayId != null;
  }

  public void setPrepayIdIsSet(boolean value) {
    if (!value) {
      this.prepayId = null;
    }
  }

  public java.lang.String getNonceStr() {
    return this.nonceStr;
  }

  public JsApiParameters setNonceStr(java.lang.String nonceStr) {
    this.nonceStr = nonceStr;
    return this;
  }

  public void unsetNonceStr() {
    this.nonceStr = null;
  }

  /** Returns true if field nonceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetNonceStr() {
    return this.nonceStr != null;
  }

  public void setNonceStrIsSet(boolean value) {
    if (!value) {
      this.nonceStr = null;
    }
  }

  public long getTimeStamp() {
    return this.timeStamp;
  }

  public JsApiParameters setTimeStamp(long timeStamp) {
    this.timeStamp = timeStamp;
    setTimeStampIsSet(true);
    return this;
  }

  public void unsetTimeStamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimeStampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public java.lang.String getSign() {
    return this.sign;
  }

  public JsApiParameters setSign(java.lang.String sign) {
    this.sign = sign;
    return this;
  }

  public void unsetSign() {
    this.sign = null;
  }

  /** Returns true if field sign is set (has been assigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.sign = null;
    }
  }

  public java.lang.String getAppId() {
    return this.appId;
  }

  public JsApiParameters setAppId(java.lang.String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public java.lang.String getPaySign() {
    return this.paySign;
  }

  public JsApiParameters setPaySign(java.lang.String paySign) {
    this.paySign = paySign;
    return this;
  }

  public void unsetPaySign() {
    this.paySign = null;
  }

  /** Returns true if field paySign is set (has been assigned a value) and false otherwise */
  public boolean isSetPaySign() {
    return this.paySign != null;
  }

  public void setPaySignIsSet(boolean value) {
    if (!value) {
      this.paySign = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PREPAY_ID:
      if (value == null) {
        unsetPrepayId();
      } else {
        setPrepayId((java.lang.String)value);
      }
      break;

    case NONCE_STR:
      if (value == null) {
        unsetNonceStr();
      } else {
        setNonceStr((java.lang.String)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTimeStamp();
      } else {
        setTimeStamp((java.lang.Long)value);
      }
      break;

    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((java.lang.String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((java.lang.String)value);
      }
      break;

    case PAY_SIGN:
      if (value == null) {
        unsetPaySign();
      } else {
        setPaySign((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PREPAY_ID:
      return getPrepayId();

    case NONCE_STR:
      return getNonceStr();

    case TIME_STAMP:
      return getTimeStamp();

    case SIGN:
      return getSign();

    case APP_ID:
      return getAppId();

    case PAY_SIGN:
      return getPaySign();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PREPAY_ID:
      return isSetPrepayId();
    case NONCE_STR:
      return isSetNonceStr();
    case TIME_STAMP:
      return isSetTimeStamp();
    case SIGN:
      return isSetSign();
    case APP_ID:
      return isSetAppId();
    case PAY_SIGN:
      return isSetPaySign();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JsApiParameters)
      return this.equals((JsApiParameters)that);
    return false;
  }

  public boolean equals(JsApiParameters that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_prepayId = true && this.isSetPrepayId();
    boolean that_present_prepayId = true && that.isSetPrepayId();
    if (this_present_prepayId || that_present_prepayId) {
      if (!(this_present_prepayId && that_present_prepayId))
        return false;
      if (!this.prepayId.equals(that.prepayId))
        return false;
    }

    boolean this_present_nonceStr = true && this.isSetNonceStr();
    boolean that_present_nonceStr = true && that.isSetNonceStr();
    if (this_present_nonceStr || that_present_nonceStr) {
      if (!(this_present_nonceStr && that_present_nonceStr))
        return false;
      if (!this.nonceStr.equals(that.nonceStr))
        return false;
    }

    boolean this_present_timeStamp = true;
    boolean that_present_timeStamp = true;
    if (this_present_timeStamp || that_present_timeStamp) {
      if (!(this_present_timeStamp && that_present_timeStamp))
        return false;
      if (this.timeStamp != that.timeStamp)
        return false;
    }

    boolean this_present_sign = true && this.isSetSign();
    boolean that_present_sign = true && that.isSetSign();
    if (this_present_sign || that_present_sign) {
      if (!(this_present_sign && that_present_sign))
        return false;
      if (!this.sign.equals(that.sign))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_paySign = true && this.isSetPaySign();
    boolean that_present_paySign = true && that.isSetPaySign();
    if (this_present_paySign || that_present_paySign) {
      if (!(this_present_paySign && that_present_paySign))
        return false;
      if (!this.paySign.equals(that.paySign))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPrepayId()) ? 131071 : 524287);
    if (isSetPrepayId())
      hashCode = hashCode * 8191 + prepayId.hashCode();

    hashCode = hashCode * 8191 + ((isSetNonceStr()) ? 131071 : 524287);
    if (isSetNonceStr())
      hashCode = hashCode * 8191 + nonceStr.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeStamp);

    hashCode = hashCode * 8191 + ((isSetSign()) ? 131071 : 524287);
    if (isSetSign())
      hashCode = hashCode * 8191 + sign.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaySign()) ? 131071 : 524287);
    if (isSetPaySign())
      hashCode = hashCode * 8191 + paySign.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JsApiParameters other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPrepayId()).compareTo(other.isSetPrepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepayId, other.prepayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNonceStr()).compareTo(other.isSetNonceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonceStr, other.nonceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSign()).compareTo(other.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign, other.sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaySign()).compareTo(other.isSetPaySign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaySign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paySign, other.paySign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JsApiParameters(");
    boolean first = true;

    sb.append("prepayId:");
    if (this.prepayId == null) {
      sb.append("null");
    } else {
      sb.append(this.prepayId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonceStr:");
    if (this.nonceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.nonceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeStamp:");
    sb.append(this.timeStamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sign:");
    if (this.sign == null) {
      sb.append("null");
    } else {
      sb.append(this.sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paySign:");
    if (this.paySign == null) {
      sb.append("null");
    } else {
      sb.append(this.paySign);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JsApiParametersStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JsApiParametersStandardScheme getScheme() {
      return new JsApiParametersStandardScheme();
    }
  }

  private static class JsApiParametersStandardScheme extends org.apache.thrift.scheme.StandardScheme<JsApiParameters> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JsApiParameters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PREPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prepayId = iprot.readString();
              struct.setPrepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NONCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nonceStr = iprot.readString();
              struct.setNonceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeStamp = iprot.readI64();
              struct.setTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sign = iprot.readString();
              struct.setSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAY_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paySign = iprot.readString();
              struct.setPaySignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JsApiParameters struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.prepayId != null) {
        oprot.writeFieldBegin(PREPAY_ID_FIELD_DESC);
        oprot.writeString(struct.prepayId);
        oprot.writeFieldEnd();
      }
      if (struct.nonceStr != null) {
        oprot.writeFieldBegin(NONCE_STR_FIELD_DESC);
        oprot.writeString(struct.nonceStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
      oprot.writeI64(struct.timeStamp);
      oprot.writeFieldEnd();
      if (struct.sign != null) {
        oprot.writeFieldBegin(SIGN_FIELD_DESC);
        oprot.writeString(struct.sign);
        oprot.writeFieldEnd();
      }
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.paySign != null) {
        oprot.writeFieldBegin(PAY_SIGN_FIELD_DESC);
        oprot.writeString(struct.paySign);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JsApiParametersTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JsApiParametersTupleScheme getScheme() {
      return new JsApiParametersTupleScheme();
    }
  }

  private static class JsApiParametersTupleScheme extends org.apache.thrift.scheme.TupleScheme<JsApiParameters> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JsApiParameters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPrepayId()) {
        optionals.set(0);
      }
      if (struct.isSetNonceStr()) {
        optionals.set(1);
      }
      if (struct.isSetTimeStamp()) {
        optionals.set(2);
      }
      if (struct.isSetSign()) {
        optionals.set(3);
      }
      if (struct.isSetAppId()) {
        optionals.set(4);
      }
      if (struct.isSetPaySign()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPrepayId()) {
        oprot.writeString(struct.prepayId);
      }
      if (struct.isSetNonceStr()) {
        oprot.writeString(struct.nonceStr);
      }
      if (struct.isSetTimeStamp()) {
        oprot.writeI64(struct.timeStamp);
      }
      if (struct.isSetSign()) {
        oprot.writeString(struct.sign);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetPaySign()) {
        oprot.writeString(struct.paySign);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JsApiParameters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.prepayId = iprot.readString();
        struct.setPrepayIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nonceStr = iprot.readString();
        struct.setNonceStrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeStamp = iprot.readI64();
        struct.setTimeStampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sign = iprot.readString();
        struct.setSignIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.paySign = iprot.readString();
        struct.setPaySignIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

