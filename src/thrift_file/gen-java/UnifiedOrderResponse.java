/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class UnifiedOrderResponse implements org.apache.thrift.TBase<UnifiedOrderResponse, UnifiedOrderResponse._Fields>, java.io.Serializable, Cloneable, Comparable<UnifiedOrderResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnifiedOrderResponse");

  private static final org.apache.thrift.protocol.TField RETURN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ReturnCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RETURN_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("ReturnMsg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("Appid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MchId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("DeviceInfo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NONCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("NonceStr", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("Sign", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ResultCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ErrCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ERR_CODE_DES_FIELD_DESC = new org.apache.thrift.protocol.TField("ErrCodeDes", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TRADE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("TradeType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PREPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("PrepayId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CODE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("CodeUrl", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UnifiedOrderResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UnifiedOrderResponseTupleSchemeFactory();

  public java.lang.String ReturnCode; // required
  public java.lang.String ReturnMsg; // required
  public java.lang.String Appid; // required
  public java.lang.String MchId; // required
  public java.lang.String DeviceInfo; // required
  public java.lang.String NonceStr; // required
  public java.lang.String Sign; // required
  public java.lang.String ResultCode; // required
  public java.lang.String ErrCode; // required
  public java.lang.String ErrCodeDes; // required
  public java.lang.String TradeType; // required
  public java.lang.String PrepayId; // required
  public java.lang.String CodeUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RETURN_CODE((short)1, "ReturnCode"),
    RETURN_MSG((short)2, "ReturnMsg"),
    APPID((short)3, "Appid"),
    MCH_ID((short)4, "MchId"),
    DEVICE_INFO((short)5, "DeviceInfo"),
    NONCE_STR((short)6, "NonceStr"),
    SIGN((short)7, "Sign"),
    RESULT_CODE((short)8, "ResultCode"),
    ERR_CODE((short)9, "ErrCode"),
    ERR_CODE_DES((short)10, "ErrCodeDes"),
    TRADE_TYPE((short)11, "TradeType"),
    PREPAY_ID((short)12, "PrepayId"),
    CODE_URL((short)13, "CodeUrl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETURN_CODE
          return RETURN_CODE;
        case 2: // RETURN_MSG
          return RETURN_MSG;
        case 3: // APPID
          return APPID;
        case 4: // MCH_ID
          return MCH_ID;
        case 5: // DEVICE_INFO
          return DEVICE_INFO;
        case 6: // NONCE_STR
          return NONCE_STR;
        case 7: // SIGN
          return SIGN;
        case 8: // RESULT_CODE
          return RESULT_CODE;
        case 9: // ERR_CODE
          return ERR_CODE;
        case 10: // ERR_CODE_DES
          return ERR_CODE_DES;
        case 11: // TRADE_TYPE
          return TRADE_TYPE;
        case 12: // PREPAY_ID
          return PREPAY_ID;
        case 13: // CODE_URL
          return CODE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETURN_CODE, new org.apache.thrift.meta_data.FieldMetaData("ReturnCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_MSG, new org.apache.thrift.meta_data.FieldMetaData("ReturnMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("Appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MCH_ID, new org.apache.thrift.meta_data.FieldMetaData("MchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("DeviceInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NONCE_STR, new org.apache.thrift.meta_data.FieldMetaData("NonceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("Sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("ResultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("ErrCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERR_CODE_DES, new org.apache.thrift.meta_data.FieldMetaData("ErrCodeDes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("TradeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("PrepayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE_URL, new org.apache.thrift.meta_data.FieldMetaData("CodeUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnifiedOrderResponse.class, metaDataMap);
  }

  public UnifiedOrderResponse() {
  }

  public UnifiedOrderResponse(
    java.lang.String ReturnCode,
    java.lang.String ReturnMsg,
    java.lang.String Appid,
    java.lang.String MchId,
    java.lang.String DeviceInfo,
    java.lang.String NonceStr,
    java.lang.String Sign,
    java.lang.String ResultCode,
    java.lang.String ErrCode,
    java.lang.String ErrCodeDes,
    java.lang.String TradeType,
    java.lang.String PrepayId,
    java.lang.String CodeUrl)
  {
    this();
    this.ReturnCode = ReturnCode;
    this.ReturnMsg = ReturnMsg;
    this.Appid = Appid;
    this.MchId = MchId;
    this.DeviceInfo = DeviceInfo;
    this.NonceStr = NonceStr;
    this.Sign = Sign;
    this.ResultCode = ResultCode;
    this.ErrCode = ErrCode;
    this.ErrCodeDes = ErrCodeDes;
    this.TradeType = TradeType;
    this.PrepayId = PrepayId;
    this.CodeUrl = CodeUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UnifiedOrderResponse(UnifiedOrderResponse other) {
    if (other.isSetReturnCode()) {
      this.ReturnCode = other.ReturnCode;
    }
    if (other.isSetReturnMsg()) {
      this.ReturnMsg = other.ReturnMsg;
    }
    if (other.isSetAppid()) {
      this.Appid = other.Appid;
    }
    if (other.isSetMchId()) {
      this.MchId = other.MchId;
    }
    if (other.isSetDeviceInfo()) {
      this.DeviceInfo = other.DeviceInfo;
    }
    if (other.isSetNonceStr()) {
      this.NonceStr = other.NonceStr;
    }
    if (other.isSetSign()) {
      this.Sign = other.Sign;
    }
    if (other.isSetResultCode()) {
      this.ResultCode = other.ResultCode;
    }
    if (other.isSetErrCode()) {
      this.ErrCode = other.ErrCode;
    }
    if (other.isSetErrCodeDes()) {
      this.ErrCodeDes = other.ErrCodeDes;
    }
    if (other.isSetTradeType()) {
      this.TradeType = other.TradeType;
    }
    if (other.isSetPrepayId()) {
      this.PrepayId = other.PrepayId;
    }
    if (other.isSetCodeUrl()) {
      this.CodeUrl = other.CodeUrl;
    }
  }

  public UnifiedOrderResponse deepCopy() {
    return new UnifiedOrderResponse(this);
  }

  @Override
  public void clear() {
    this.ReturnCode = null;
    this.ReturnMsg = null;
    this.Appid = null;
    this.MchId = null;
    this.DeviceInfo = null;
    this.NonceStr = null;
    this.Sign = null;
    this.ResultCode = null;
    this.ErrCode = null;
    this.ErrCodeDes = null;
    this.TradeType = null;
    this.PrepayId = null;
    this.CodeUrl = null;
  }

  public java.lang.String getReturnCode() {
    return this.ReturnCode;
  }

  public UnifiedOrderResponse setReturnCode(java.lang.String ReturnCode) {
    this.ReturnCode = ReturnCode;
    return this;
  }

  public void unsetReturnCode() {
    this.ReturnCode = null;
  }

  /** Returns true if field ReturnCode is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnCode() {
    return this.ReturnCode != null;
  }

  public void setReturnCodeIsSet(boolean value) {
    if (!value) {
      this.ReturnCode = null;
    }
  }

  public java.lang.String getReturnMsg() {
    return this.ReturnMsg;
  }

  public UnifiedOrderResponse setReturnMsg(java.lang.String ReturnMsg) {
    this.ReturnMsg = ReturnMsg;
    return this;
  }

  public void unsetReturnMsg() {
    this.ReturnMsg = null;
  }

  /** Returns true if field ReturnMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnMsg() {
    return this.ReturnMsg != null;
  }

  public void setReturnMsgIsSet(boolean value) {
    if (!value) {
      this.ReturnMsg = null;
    }
  }

  public java.lang.String getAppid() {
    return this.Appid;
  }

  public UnifiedOrderResponse setAppid(java.lang.String Appid) {
    this.Appid = Appid;
    return this;
  }

  public void unsetAppid() {
    this.Appid = null;
  }

  /** Returns true if field Appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return this.Appid != null;
  }

  public void setAppidIsSet(boolean value) {
    if (!value) {
      this.Appid = null;
    }
  }

  public java.lang.String getMchId() {
    return this.MchId;
  }

  public UnifiedOrderResponse setMchId(java.lang.String MchId) {
    this.MchId = MchId;
    return this;
  }

  public void unsetMchId() {
    this.MchId = null;
  }

  /** Returns true if field MchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMchId() {
    return this.MchId != null;
  }

  public void setMchIdIsSet(boolean value) {
    if (!value) {
      this.MchId = null;
    }
  }

  public java.lang.String getDeviceInfo() {
    return this.DeviceInfo;
  }

  public UnifiedOrderResponse setDeviceInfo(java.lang.String DeviceInfo) {
    this.DeviceInfo = DeviceInfo;
    return this;
  }

  public void unsetDeviceInfo() {
    this.DeviceInfo = null;
  }

  /** Returns true if field DeviceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceInfo() {
    return this.DeviceInfo != null;
  }

  public void setDeviceInfoIsSet(boolean value) {
    if (!value) {
      this.DeviceInfo = null;
    }
  }

  public java.lang.String getNonceStr() {
    return this.NonceStr;
  }

  public UnifiedOrderResponse setNonceStr(java.lang.String NonceStr) {
    this.NonceStr = NonceStr;
    return this;
  }

  public void unsetNonceStr() {
    this.NonceStr = null;
  }

  /** Returns true if field NonceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetNonceStr() {
    return this.NonceStr != null;
  }

  public void setNonceStrIsSet(boolean value) {
    if (!value) {
      this.NonceStr = null;
    }
  }

  public java.lang.String getSign() {
    return this.Sign;
  }

  public UnifiedOrderResponse setSign(java.lang.String Sign) {
    this.Sign = Sign;
    return this;
  }

  public void unsetSign() {
    this.Sign = null;
  }

  /** Returns true if field Sign is set (has been assigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.Sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.Sign = null;
    }
  }

  public java.lang.String getResultCode() {
    return this.ResultCode;
  }

  public UnifiedOrderResponse setResultCode(java.lang.String ResultCode) {
    this.ResultCode = ResultCode;
    return this;
  }

  public void unsetResultCode() {
    this.ResultCode = null;
  }

  /** Returns true if field ResultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return this.ResultCode != null;
  }

  public void setResultCodeIsSet(boolean value) {
    if (!value) {
      this.ResultCode = null;
    }
  }

  public java.lang.String getErrCode() {
    return this.ErrCode;
  }

  public UnifiedOrderResponse setErrCode(java.lang.String ErrCode) {
    this.ErrCode = ErrCode;
    return this;
  }

  public void unsetErrCode() {
    this.ErrCode = null;
  }

  /** Returns true if field ErrCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return this.ErrCode != null;
  }

  public void setErrCodeIsSet(boolean value) {
    if (!value) {
      this.ErrCode = null;
    }
  }

  public java.lang.String getErrCodeDes() {
    return this.ErrCodeDes;
  }

  public UnifiedOrderResponse setErrCodeDes(java.lang.String ErrCodeDes) {
    this.ErrCodeDes = ErrCodeDes;
    return this;
  }

  public void unsetErrCodeDes() {
    this.ErrCodeDes = null;
  }

  /** Returns true if field ErrCodeDes is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCodeDes() {
    return this.ErrCodeDes != null;
  }

  public void setErrCodeDesIsSet(boolean value) {
    if (!value) {
      this.ErrCodeDes = null;
    }
  }

  public java.lang.String getTradeType() {
    return this.TradeType;
  }

  public UnifiedOrderResponse setTradeType(java.lang.String TradeType) {
    this.TradeType = TradeType;
    return this;
  }

  public void unsetTradeType() {
    this.TradeType = null;
  }

  /** Returns true if field TradeType is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeType() {
    return this.TradeType != null;
  }

  public void setTradeTypeIsSet(boolean value) {
    if (!value) {
      this.TradeType = null;
    }
  }

  public java.lang.String getPrepayId() {
    return this.PrepayId;
  }

  public UnifiedOrderResponse setPrepayId(java.lang.String PrepayId) {
    this.PrepayId = PrepayId;
    return this;
  }

  public void unsetPrepayId() {
    this.PrepayId = null;
  }

  /** Returns true if field PrepayId is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepayId() {
    return this.PrepayId != null;
  }

  public void setPrepayIdIsSet(boolean value) {
    if (!value) {
      this.PrepayId = null;
    }
  }

  public java.lang.String getCodeUrl() {
    return this.CodeUrl;
  }

  public UnifiedOrderResponse setCodeUrl(java.lang.String CodeUrl) {
    this.CodeUrl = CodeUrl;
    return this;
  }

  public void unsetCodeUrl() {
    this.CodeUrl = null;
  }

  /** Returns true if field CodeUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCodeUrl() {
    return this.CodeUrl != null;
  }

  public void setCodeUrlIsSet(boolean value) {
    if (!value) {
      this.CodeUrl = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RETURN_CODE:
      if (value == null) {
        unsetReturnCode();
      } else {
        setReturnCode((java.lang.String)value);
      }
      break;

    case RETURN_MSG:
      if (value == null) {
        unsetReturnMsg();
      } else {
        setReturnMsg((java.lang.String)value);
      }
      break;

    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((java.lang.String)value);
      }
      break;

    case MCH_ID:
      if (value == null) {
        unsetMchId();
      } else {
        setMchId((java.lang.String)value);
      }
      break;

    case DEVICE_INFO:
      if (value == null) {
        unsetDeviceInfo();
      } else {
        setDeviceInfo((java.lang.String)value);
      }
      break;

    case NONCE_STR:
      if (value == null) {
        unsetNonceStr();
      } else {
        setNonceStr((java.lang.String)value);
      }
      break;

    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((java.lang.String)value);
      }
      break;

    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((java.lang.String)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((java.lang.String)value);
      }
      break;

    case ERR_CODE_DES:
      if (value == null) {
        unsetErrCodeDes();
      } else {
        setErrCodeDes((java.lang.String)value);
      }
      break;

    case TRADE_TYPE:
      if (value == null) {
        unsetTradeType();
      } else {
        setTradeType((java.lang.String)value);
      }
      break;

    case PREPAY_ID:
      if (value == null) {
        unsetPrepayId();
      } else {
        setPrepayId((java.lang.String)value);
      }
      break;

    case CODE_URL:
      if (value == null) {
        unsetCodeUrl();
      } else {
        setCodeUrl((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RETURN_CODE:
      return getReturnCode();

    case RETURN_MSG:
      return getReturnMsg();

    case APPID:
      return getAppid();

    case MCH_ID:
      return getMchId();

    case DEVICE_INFO:
      return getDeviceInfo();

    case NONCE_STR:
      return getNonceStr();

    case SIGN:
      return getSign();

    case RESULT_CODE:
      return getResultCode();

    case ERR_CODE:
      return getErrCode();

    case ERR_CODE_DES:
      return getErrCodeDes();

    case TRADE_TYPE:
      return getTradeType();

    case PREPAY_ID:
      return getPrepayId();

    case CODE_URL:
      return getCodeUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RETURN_CODE:
      return isSetReturnCode();
    case RETURN_MSG:
      return isSetReturnMsg();
    case APPID:
      return isSetAppid();
    case MCH_ID:
      return isSetMchId();
    case DEVICE_INFO:
      return isSetDeviceInfo();
    case NONCE_STR:
      return isSetNonceStr();
    case SIGN:
      return isSetSign();
    case RESULT_CODE:
      return isSetResultCode();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_CODE_DES:
      return isSetErrCodeDes();
    case TRADE_TYPE:
      return isSetTradeType();
    case PREPAY_ID:
      return isSetPrepayId();
    case CODE_URL:
      return isSetCodeUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UnifiedOrderResponse)
      return this.equals((UnifiedOrderResponse)that);
    return false;
  }

  public boolean equals(UnifiedOrderResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ReturnCode = true && this.isSetReturnCode();
    boolean that_present_ReturnCode = true && that.isSetReturnCode();
    if (this_present_ReturnCode || that_present_ReturnCode) {
      if (!(this_present_ReturnCode && that_present_ReturnCode))
        return false;
      if (!this.ReturnCode.equals(that.ReturnCode))
        return false;
    }

    boolean this_present_ReturnMsg = true && this.isSetReturnMsg();
    boolean that_present_ReturnMsg = true && that.isSetReturnMsg();
    if (this_present_ReturnMsg || that_present_ReturnMsg) {
      if (!(this_present_ReturnMsg && that_present_ReturnMsg))
        return false;
      if (!this.ReturnMsg.equals(that.ReturnMsg))
        return false;
    }

    boolean this_present_Appid = true && this.isSetAppid();
    boolean that_present_Appid = true && that.isSetAppid();
    if (this_present_Appid || that_present_Appid) {
      if (!(this_present_Appid && that_present_Appid))
        return false;
      if (!this.Appid.equals(that.Appid))
        return false;
    }

    boolean this_present_MchId = true && this.isSetMchId();
    boolean that_present_MchId = true && that.isSetMchId();
    if (this_present_MchId || that_present_MchId) {
      if (!(this_present_MchId && that_present_MchId))
        return false;
      if (!this.MchId.equals(that.MchId))
        return false;
    }

    boolean this_present_DeviceInfo = true && this.isSetDeviceInfo();
    boolean that_present_DeviceInfo = true && that.isSetDeviceInfo();
    if (this_present_DeviceInfo || that_present_DeviceInfo) {
      if (!(this_present_DeviceInfo && that_present_DeviceInfo))
        return false;
      if (!this.DeviceInfo.equals(that.DeviceInfo))
        return false;
    }

    boolean this_present_NonceStr = true && this.isSetNonceStr();
    boolean that_present_NonceStr = true && that.isSetNonceStr();
    if (this_present_NonceStr || that_present_NonceStr) {
      if (!(this_present_NonceStr && that_present_NonceStr))
        return false;
      if (!this.NonceStr.equals(that.NonceStr))
        return false;
    }

    boolean this_present_Sign = true && this.isSetSign();
    boolean that_present_Sign = true && that.isSetSign();
    if (this_present_Sign || that_present_Sign) {
      if (!(this_present_Sign && that_present_Sign))
        return false;
      if (!this.Sign.equals(that.Sign))
        return false;
    }

    boolean this_present_ResultCode = true && this.isSetResultCode();
    boolean that_present_ResultCode = true && that.isSetResultCode();
    if (this_present_ResultCode || that_present_ResultCode) {
      if (!(this_present_ResultCode && that_present_ResultCode))
        return false;
      if (!this.ResultCode.equals(that.ResultCode))
        return false;
    }

    boolean this_present_ErrCode = true && this.isSetErrCode();
    boolean that_present_ErrCode = true && that.isSetErrCode();
    if (this_present_ErrCode || that_present_ErrCode) {
      if (!(this_present_ErrCode && that_present_ErrCode))
        return false;
      if (!this.ErrCode.equals(that.ErrCode))
        return false;
    }

    boolean this_present_ErrCodeDes = true && this.isSetErrCodeDes();
    boolean that_present_ErrCodeDes = true && that.isSetErrCodeDes();
    if (this_present_ErrCodeDes || that_present_ErrCodeDes) {
      if (!(this_present_ErrCodeDes && that_present_ErrCodeDes))
        return false;
      if (!this.ErrCodeDes.equals(that.ErrCodeDes))
        return false;
    }

    boolean this_present_TradeType = true && this.isSetTradeType();
    boolean that_present_TradeType = true && that.isSetTradeType();
    if (this_present_TradeType || that_present_TradeType) {
      if (!(this_present_TradeType && that_present_TradeType))
        return false;
      if (!this.TradeType.equals(that.TradeType))
        return false;
    }

    boolean this_present_PrepayId = true && this.isSetPrepayId();
    boolean that_present_PrepayId = true && that.isSetPrepayId();
    if (this_present_PrepayId || that_present_PrepayId) {
      if (!(this_present_PrepayId && that_present_PrepayId))
        return false;
      if (!this.PrepayId.equals(that.PrepayId))
        return false;
    }

    boolean this_present_CodeUrl = true && this.isSetCodeUrl();
    boolean that_present_CodeUrl = true && that.isSetCodeUrl();
    if (this_present_CodeUrl || that_present_CodeUrl) {
      if (!(this_present_CodeUrl && that_present_CodeUrl))
        return false;
      if (!this.CodeUrl.equals(that.CodeUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReturnCode()) ? 131071 : 524287);
    if (isSetReturnCode())
      hashCode = hashCode * 8191 + ReturnCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetReturnMsg()) ? 131071 : 524287);
    if (isSetReturnMsg())
      hashCode = hashCode * 8191 + ReturnMsg.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppid()) ? 131071 : 524287);
    if (isSetAppid())
      hashCode = hashCode * 8191 + Appid.hashCode();

    hashCode = hashCode * 8191 + ((isSetMchId()) ? 131071 : 524287);
    if (isSetMchId())
      hashCode = hashCode * 8191 + MchId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceInfo()) ? 131071 : 524287);
    if (isSetDeviceInfo())
      hashCode = hashCode * 8191 + DeviceInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetNonceStr()) ? 131071 : 524287);
    if (isSetNonceStr())
      hashCode = hashCode * 8191 + NonceStr.hashCode();

    hashCode = hashCode * 8191 + ((isSetSign()) ? 131071 : 524287);
    if (isSetSign())
      hashCode = hashCode * 8191 + Sign.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultCode()) ? 131071 : 524287);
    if (isSetResultCode())
      hashCode = hashCode * 8191 + ResultCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrCode()) ? 131071 : 524287);
    if (isSetErrCode())
      hashCode = hashCode * 8191 + ErrCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrCodeDes()) ? 131071 : 524287);
    if (isSetErrCodeDes())
      hashCode = hashCode * 8191 + ErrCodeDes.hashCode();

    hashCode = hashCode * 8191 + ((isSetTradeType()) ? 131071 : 524287);
    if (isSetTradeType())
      hashCode = hashCode * 8191 + TradeType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrepayId()) ? 131071 : 524287);
    if (isSetPrepayId())
      hashCode = hashCode * 8191 + PrepayId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCodeUrl()) ? 131071 : 524287);
    if (isSetCodeUrl())
      hashCode = hashCode * 8191 + CodeUrl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UnifiedOrderResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetReturnCode()).compareTo(other.isSetReturnCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReturnCode, other.ReturnCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReturnMsg()).compareTo(other.isSetReturnMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReturnMsg, other.ReturnMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Appid, other.Appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMchId()).compareTo(other.isSetMchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MchId, other.MchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceInfo()).compareTo(other.isSetDeviceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DeviceInfo, other.DeviceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNonceStr()).compareTo(other.isSetNonceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NonceStr, other.NonceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSign()).compareTo(other.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Sign, other.Sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ResultCode, other.ResultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ErrCode, other.ErrCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrCodeDes()).compareTo(other.isSetErrCodeDes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCodeDes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ErrCodeDes, other.ErrCodeDes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTradeType()).compareTo(other.isSetTradeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TradeType, other.TradeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrepayId()).compareTo(other.isSetPrepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PrepayId, other.PrepayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCodeUrl()).compareTo(other.isSetCodeUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodeUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CodeUrl, other.CodeUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UnifiedOrderResponse(");
    boolean first = true;

    sb.append("ReturnCode:");
    if (this.ReturnCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ReturnCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ReturnMsg:");
    if (this.ReturnMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.ReturnMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Appid:");
    if (this.Appid == null) {
      sb.append("null");
    } else {
      sb.append(this.Appid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MchId:");
    if (this.MchId == null) {
      sb.append("null");
    } else {
      sb.append(this.MchId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DeviceInfo:");
    if (this.DeviceInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.DeviceInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NonceStr:");
    if (this.NonceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.NonceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Sign:");
    if (this.Sign == null) {
      sb.append("null");
    } else {
      sb.append(this.Sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ResultCode:");
    if (this.ResultCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ResultCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ErrCode:");
    if (this.ErrCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ErrCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ErrCodeDes:");
    if (this.ErrCodeDes == null) {
      sb.append("null");
    } else {
      sb.append(this.ErrCodeDes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TradeType:");
    if (this.TradeType == null) {
      sb.append("null");
    } else {
      sb.append(this.TradeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PrepayId:");
    if (this.PrepayId == null) {
      sb.append("null");
    } else {
      sb.append(this.PrepayId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CodeUrl:");
    if (this.CodeUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.CodeUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UnifiedOrderResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UnifiedOrderResponseStandardScheme getScheme() {
      return new UnifiedOrderResponseStandardScheme();
    }
  }

  private static class UnifiedOrderResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<UnifiedOrderResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UnifiedOrderResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETURN_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ReturnCode = iprot.readString();
              struct.setReturnCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RETURN_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ReturnMsg = iprot.readString();
              struct.setReturnMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Appid = iprot.readString();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MchId = iprot.readString();
              struct.setMchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEVICE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DeviceInfo = iprot.readString();
              struct.setDeviceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NONCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NonceStr = iprot.readString();
              struct.setNonceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Sign = iprot.readString();
              struct.setSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ResultCode = iprot.readString();
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ErrCode = iprot.readString();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ERR_CODE_DES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ErrCodeDes = iprot.readString();
              struct.setErrCodeDesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRADE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TradeType = iprot.readString();
              struct.setTradeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PREPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PrepayId = iprot.readString();
              struct.setPrepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CODE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CodeUrl = iprot.readString();
              struct.setCodeUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UnifiedOrderResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ReturnCode != null) {
        oprot.writeFieldBegin(RETURN_CODE_FIELD_DESC);
        oprot.writeString(struct.ReturnCode);
        oprot.writeFieldEnd();
      }
      if (struct.ReturnMsg != null) {
        oprot.writeFieldBegin(RETURN_MSG_FIELD_DESC);
        oprot.writeString(struct.ReturnMsg);
        oprot.writeFieldEnd();
      }
      if (struct.Appid != null) {
        oprot.writeFieldBegin(APPID_FIELD_DESC);
        oprot.writeString(struct.Appid);
        oprot.writeFieldEnd();
      }
      if (struct.MchId != null) {
        oprot.writeFieldBegin(MCH_ID_FIELD_DESC);
        oprot.writeString(struct.MchId);
        oprot.writeFieldEnd();
      }
      if (struct.DeviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        oprot.writeString(struct.DeviceInfo);
        oprot.writeFieldEnd();
      }
      if (struct.NonceStr != null) {
        oprot.writeFieldBegin(NONCE_STR_FIELD_DESC);
        oprot.writeString(struct.NonceStr);
        oprot.writeFieldEnd();
      }
      if (struct.Sign != null) {
        oprot.writeFieldBegin(SIGN_FIELD_DESC);
        oprot.writeString(struct.Sign);
        oprot.writeFieldEnd();
      }
      if (struct.ResultCode != null) {
        oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
        oprot.writeString(struct.ResultCode);
        oprot.writeFieldEnd();
      }
      if (struct.ErrCode != null) {
        oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
        oprot.writeString(struct.ErrCode);
        oprot.writeFieldEnd();
      }
      if (struct.ErrCodeDes != null) {
        oprot.writeFieldBegin(ERR_CODE_DES_FIELD_DESC);
        oprot.writeString(struct.ErrCodeDes);
        oprot.writeFieldEnd();
      }
      if (struct.TradeType != null) {
        oprot.writeFieldBegin(TRADE_TYPE_FIELD_DESC);
        oprot.writeString(struct.TradeType);
        oprot.writeFieldEnd();
      }
      if (struct.PrepayId != null) {
        oprot.writeFieldBegin(PREPAY_ID_FIELD_DESC);
        oprot.writeString(struct.PrepayId);
        oprot.writeFieldEnd();
      }
      if (struct.CodeUrl != null) {
        oprot.writeFieldBegin(CODE_URL_FIELD_DESC);
        oprot.writeString(struct.CodeUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UnifiedOrderResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UnifiedOrderResponseTupleScheme getScheme() {
      return new UnifiedOrderResponseTupleScheme();
    }
  }

  private static class UnifiedOrderResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<UnifiedOrderResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UnifiedOrderResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReturnCode()) {
        optionals.set(0);
      }
      if (struct.isSetReturnMsg()) {
        optionals.set(1);
      }
      if (struct.isSetAppid()) {
        optionals.set(2);
      }
      if (struct.isSetMchId()) {
        optionals.set(3);
      }
      if (struct.isSetDeviceInfo()) {
        optionals.set(4);
      }
      if (struct.isSetNonceStr()) {
        optionals.set(5);
      }
      if (struct.isSetSign()) {
        optionals.set(6);
      }
      if (struct.isSetResultCode()) {
        optionals.set(7);
      }
      if (struct.isSetErrCode()) {
        optionals.set(8);
      }
      if (struct.isSetErrCodeDes()) {
        optionals.set(9);
      }
      if (struct.isSetTradeType()) {
        optionals.set(10);
      }
      if (struct.isSetPrepayId()) {
        optionals.set(11);
      }
      if (struct.isSetCodeUrl()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetReturnCode()) {
        oprot.writeString(struct.ReturnCode);
      }
      if (struct.isSetReturnMsg()) {
        oprot.writeString(struct.ReturnMsg);
      }
      if (struct.isSetAppid()) {
        oprot.writeString(struct.Appid);
      }
      if (struct.isSetMchId()) {
        oprot.writeString(struct.MchId);
      }
      if (struct.isSetDeviceInfo()) {
        oprot.writeString(struct.DeviceInfo);
      }
      if (struct.isSetNonceStr()) {
        oprot.writeString(struct.NonceStr);
      }
      if (struct.isSetSign()) {
        oprot.writeString(struct.Sign);
      }
      if (struct.isSetResultCode()) {
        oprot.writeString(struct.ResultCode);
      }
      if (struct.isSetErrCode()) {
        oprot.writeString(struct.ErrCode);
      }
      if (struct.isSetErrCodeDes()) {
        oprot.writeString(struct.ErrCodeDes);
      }
      if (struct.isSetTradeType()) {
        oprot.writeString(struct.TradeType);
      }
      if (struct.isSetPrepayId()) {
        oprot.writeString(struct.PrepayId);
      }
      if (struct.isSetCodeUrl()) {
        oprot.writeString(struct.CodeUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UnifiedOrderResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.ReturnCode = iprot.readString();
        struct.setReturnCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ReturnMsg = iprot.readString();
        struct.setReturnMsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Appid = iprot.readString();
        struct.setAppidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.MchId = iprot.readString();
        struct.setMchIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.DeviceInfo = iprot.readString();
        struct.setDeviceInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.NonceStr = iprot.readString();
        struct.setNonceStrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Sign = iprot.readString();
        struct.setSignIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ResultCode = iprot.readString();
        struct.setResultCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ErrCode = iprot.readString();
        struct.setErrCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ErrCodeDes = iprot.readString();
        struct.setErrCodeDesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.TradeType = iprot.readString();
        struct.setTradeTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.PrepayId = iprot.readString();
        struct.setPrepayIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.CodeUrl = iprot.readString();
        struct.setCodeUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

