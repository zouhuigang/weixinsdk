/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class MixedMessage implements org.apache.thrift.TBase<MixedMessage, MixedMessage._Fields>, java.io.Serializable, Cloneable, Comparable<MixedMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MixedMessage");

  private static final org.apache.thrift.protocol.TField TO_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ToUserName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("FromUserName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("CreateTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("MsgType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MsgId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("AgentId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("Content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("PicURL", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MediaId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("Format", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField THUMB_MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ThumbMediaId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOCATION__X_FIELD_DESC = new org.apache.thrift.protocol.TField("Location_X", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField LOCATION__Y_FIELD_DESC = new org.apache.thrift.protocol.TField("Location_Y", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("Scale", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("Label", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("Title", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("Url", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("Event", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField EVENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("EventKey", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MixedMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MixedMessageTupleSchemeFactory();

  public java.lang.String ToUserName; // required
  public java.lang.String FromUserName; // required
  public long CreateTime; // required
  public java.lang.String MsgType; // required
  public long MsgId; // required
  public long AgentId; // required
  public java.lang.String Content; // optional
  public java.lang.String PicURL; // optional
  public java.lang.String MediaId; // optional
  public java.lang.String Format; // optional
  public java.lang.String ThumbMediaId; // optional
  public double Location_X; // required
  public double Location_Y; // required
  public int Scale; // required
  public java.lang.String Label; // required
  public java.lang.String Title; // required
  public java.lang.String Description; // required
  public java.lang.String Url; // required
  public java.lang.String Event; // required
  public java.lang.String EventKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TO_USER_NAME((short)1, "ToUserName"),
    FROM_USER_NAME((short)2, "FromUserName"),
    CREATE_TIME((short)3, "CreateTime"),
    MSG_TYPE((short)4, "MsgType"),
    MSG_ID((short)5, "MsgId"),
    AGENT_ID((short)6, "AgentId"),
    CONTENT((short)7, "Content"),
    PIC_URL((short)8, "PicURL"),
    MEDIA_ID((short)9, "MediaId"),
    FORMAT((short)10, "Format"),
    THUMB_MEDIA_ID((short)11, "ThumbMediaId"),
    LOCATION__X((short)12, "Location_X"),
    LOCATION__Y((short)13, "Location_Y"),
    SCALE((short)14, "Scale"),
    LABEL((short)15, "Label"),
    TITLE((short)16, "Title"),
    DESCRIPTION((short)17, "Description"),
    URL((short)18, "Url"),
    EVENT((short)19, "Event"),
    EVENT_KEY((short)20, "EventKey");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TO_USER_NAME
          return TO_USER_NAME;
        case 2: // FROM_USER_NAME
          return FROM_USER_NAME;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // MSG_TYPE
          return MSG_TYPE;
        case 5: // MSG_ID
          return MSG_ID;
        case 6: // AGENT_ID
          return AGENT_ID;
        case 7: // CONTENT
          return CONTENT;
        case 8: // PIC_URL
          return PIC_URL;
        case 9: // MEDIA_ID
          return MEDIA_ID;
        case 10: // FORMAT
          return FORMAT;
        case 11: // THUMB_MEDIA_ID
          return THUMB_MEDIA_ID;
        case 12: // LOCATION__X
          return LOCATION__X;
        case 13: // LOCATION__Y
          return LOCATION__Y;
        case 14: // SCALE
          return SCALE;
        case 15: // LABEL
          return LABEL;
        case 16: // TITLE
          return TITLE;
        case 17: // DESCRIPTION
          return DESCRIPTION;
        case 18: // URL
          return URL;
        case 19: // EVENT
          return EVENT;
        case 20: // EVENT_KEY
          return EVENT_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __MSGID_ISSET_ID = 1;
  private static final int __AGENTID_ISSET_ID = 2;
  private static final int __LOCATION_X_ISSET_ID = 3;
  private static final int __LOCATION_Y_ISSET_ID = 4;
  private static final int __SCALE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONTENT,_Fields.PIC_URL,_Fields.MEDIA_ID,_Fields.FORMAT,_Fields.THUMB_MEDIA_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TO_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("ToUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("FromUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("CreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("MsgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("MsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("AgentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("Content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("PicURL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("MediaId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("Format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMB_MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("ThumbMediaId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION__X, new org.apache.thrift.meta_data.FieldMetaData("Location_X", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCATION__Y, new org.apache.thrift.meta_data.FieldMetaData("Location_Y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("Scale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("Label", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("Title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("Url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("Event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("EventKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MixedMessage.class, metaDataMap);
  }

  public MixedMessage() {
  }

  public MixedMessage(
    java.lang.String ToUserName,
    java.lang.String FromUserName,
    long CreateTime,
    java.lang.String MsgType,
    long MsgId,
    long AgentId,
    double Location_X,
    double Location_Y,
    int Scale,
    java.lang.String Label,
    java.lang.String Title,
    java.lang.String Description,
    java.lang.String Url,
    java.lang.String Event,
    java.lang.String EventKey)
  {
    this();
    this.ToUserName = ToUserName;
    this.FromUserName = FromUserName;
    this.CreateTime = CreateTime;
    setCreateTimeIsSet(true);
    this.MsgType = MsgType;
    this.MsgId = MsgId;
    setMsgIdIsSet(true);
    this.AgentId = AgentId;
    setAgentIdIsSet(true);
    this.Location_X = Location_X;
    setLocation_XIsSet(true);
    this.Location_Y = Location_Y;
    setLocation_YIsSet(true);
    this.Scale = Scale;
    setScaleIsSet(true);
    this.Label = Label;
    this.Title = Title;
    this.Description = Description;
    this.Url = Url;
    this.Event = Event;
    this.EventKey = EventKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MixedMessage(MixedMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetToUserName()) {
      this.ToUserName = other.ToUserName;
    }
    if (other.isSetFromUserName()) {
      this.FromUserName = other.FromUserName;
    }
    this.CreateTime = other.CreateTime;
    if (other.isSetMsgType()) {
      this.MsgType = other.MsgType;
    }
    this.MsgId = other.MsgId;
    this.AgentId = other.AgentId;
    if (other.isSetContent()) {
      this.Content = other.Content;
    }
    if (other.isSetPicURL()) {
      this.PicURL = other.PicURL;
    }
    if (other.isSetMediaId()) {
      this.MediaId = other.MediaId;
    }
    if (other.isSetFormat()) {
      this.Format = other.Format;
    }
    if (other.isSetThumbMediaId()) {
      this.ThumbMediaId = other.ThumbMediaId;
    }
    this.Location_X = other.Location_X;
    this.Location_Y = other.Location_Y;
    this.Scale = other.Scale;
    if (other.isSetLabel()) {
      this.Label = other.Label;
    }
    if (other.isSetTitle()) {
      this.Title = other.Title;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetUrl()) {
      this.Url = other.Url;
    }
    if (other.isSetEvent()) {
      this.Event = other.Event;
    }
    if (other.isSetEventKey()) {
      this.EventKey = other.EventKey;
    }
  }

  public MixedMessage deepCopy() {
    return new MixedMessage(this);
  }

  @Override
  public void clear() {
    this.ToUserName = null;
    this.FromUserName = null;
    setCreateTimeIsSet(false);
    this.CreateTime = 0;
    this.MsgType = null;
    setMsgIdIsSet(false);
    this.MsgId = 0;
    setAgentIdIsSet(false);
    this.AgentId = 0;
    this.Content = null;
    this.PicURL = null;
    this.MediaId = null;
    this.Format = null;
    this.ThumbMediaId = null;
    setLocation_XIsSet(false);
    this.Location_X = 0.0;
    setLocation_YIsSet(false);
    this.Location_Y = 0.0;
    setScaleIsSet(false);
    this.Scale = 0;
    this.Label = null;
    this.Title = null;
    this.Description = null;
    this.Url = null;
    this.Event = null;
    this.EventKey = null;
  }

  public java.lang.String getToUserName() {
    return this.ToUserName;
  }

  public MixedMessage setToUserName(java.lang.String ToUserName) {
    this.ToUserName = ToUserName;
    return this;
  }

  public void unsetToUserName() {
    this.ToUserName = null;
  }

  /** Returns true if field ToUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetToUserName() {
    return this.ToUserName != null;
  }

  public void setToUserNameIsSet(boolean value) {
    if (!value) {
      this.ToUserName = null;
    }
  }

  public java.lang.String getFromUserName() {
    return this.FromUserName;
  }

  public MixedMessage setFromUserName(java.lang.String FromUserName) {
    this.FromUserName = FromUserName;
    return this;
  }

  public void unsetFromUserName() {
    this.FromUserName = null;
  }

  /** Returns true if field FromUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUserName() {
    return this.FromUserName != null;
  }

  public void setFromUserNameIsSet(boolean value) {
    if (!value) {
      this.FromUserName = null;
    }
  }

  public long getCreateTime() {
    return this.CreateTime;
  }

  public MixedMessage setCreateTime(long CreateTime) {
    this.CreateTime = CreateTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field CreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public java.lang.String getMsgType() {
    return this.MsgType;
  }

  public MixedMessage setMsgType(java.lang.String MsgType) {
    this.MsgType = MsgType;
    return this;
  }

  public void unsetMsgType() {
    this.MsgType = null;
  }

  /** Returns true if field MsgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return this.MsgType != null;
  }

  public void setMsgTypeIsSet(boolean value) {
    if (!value) {
      this.MsgType = null;
    }
  }

  public long getMsgId() {
    return this.MsgId;
  }

  public MixedMessage setMsgId(long MsgId) {
    this.MsgId = MsgId;
    setMsgIdIsSet(true);
    return this;
  }

  public void unsetMsgId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field MsgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public long getAgentId() {
    return this.AgentId;
  }

  public MixedMessage setAgentId(long AgentId) {
    this.AgentId = AgentId;
    setAgentIdIsSet(true);
    return this;
  }

  public void unsetAgentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGENTID_ISSET_ID);
  }

  /** Returns true if field AgentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGENTID_ISSET_ID);
  }

  public void setAgentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGENTID_ISSET_ID, value);
  }

  public java.lang.String getContent() {
    return this.Content;
  }

  public MixedMessage setContent(java.lang.String Content) {
    this.Content = Content;
    return this;
  }

  public void unsetContent() {
    this.Content = null;
  }

  /** Returns true if field Content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.Content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.Content = null;
    }
  }

  public java.lang.String getPicURL() {
    return this.PicURL;
  }

  public MixedMessage setPicURL(java.lang.String PicURL) {
    this.PicURL = PicURL;
    return this;
  }

  public void unsetPicURL() {
    this.PicURL = null;
  }

  /** Returns true if field PicURL is set (has been assigned a value) and false otherwise */
  public boolean isSetPicURL() {
    return this.PicURL != null;
  }

  public void setPicURLIsSet(boolean value) {
    if (!value) {
      this.PicURL = null;
    }
  }

  public java.lang.String getMediaId() {
    return this.MediaId;
  }

  public MixedMessage setMediaId(java.lang.String MediaId) {
    this.MediaId = MediaId;
    return this;
  }

  public void unsetMediaId() {
    this.MediaId = null;
  }

  /** Returns true if field MediaId is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaId() {
    return this.MediaId != null;
  }

  public void setMediaIdIsSet(boolean value) {
    if (!value) {
      this.MediaId = null;
    }
  }

  public java.lang.String getFormat() {
    return this.Format;
  }

  public MixedMessage setFormat(java.lang.String Format) {
    this.Format = Format;
    return this;
  }

  public void unsetFormat() {
    this.Format = null;
  }

  /** Returns true if field Format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.Format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.Format = null;
    }
  }

  public java.lang.String getThumbMediaId() {
    return this.ThumbMediaId;
  }

  public MixedMessage setThumbMediaId(java.lang.String ThumbMediaId) {
    this.ThumbMediaId = ThumbMediaId;
    return this;
  }

  public void unsetThumbMediaId() {
    this.ThumbMediaId = null;
  }

  /** Returns true if field ThumbMediaId is set (has been assigned a value) and false otherwise */
  public boolean isSetThumbMediaId() {
    return this.ThumbMediaId != null;
  }

  public void setThumbMediaIdIsSet(boolean value) {
    if (!value) {
      this.ThumbMediaId = null;
    }
  }

  public double getLocation_X() {
    return this.Location_X;
  }

  public MixedMessage setLocation_X(double Location_X) {
    this.Location_X = Location_X;
    setLocation_XIsSet(true);
    return this;
  }

  public void unsetLocation_X() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCATION_X_ISSET_ID);
  }

  /** Returns true if field Location_X is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation_X() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCATION_X_ISSET_ID);
  }

  public void setLocation_XIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCATION_X_ISSET_ID, value);
  }

  public double getLocation_Y() {
    return this.Location_Y;
  }

  public MixedMessage setLocation_Y(double Location_Y) {
    this.Location_Y = Location_Y;
    setLocation_YIsSet(true);
    return this;
  }

  public void unsetLocation_Y() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCATION_Y_ISSET_ID);
  }

  /** Returns true if field Location_Y is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation_Y() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCATION_Y_ISSET_ID);
  }

  public void setLocation_YIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCATION_Y_ISSET_ID, value);
  }

  public int getScale() {
    return this.Scale;
  }

  public MixedMessage setScale(int Scale) {
    this.Scale = Scale;
    setScaleIsSet(true);
    return this;
  }

  public void unsetScale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  /** Returns true if field Scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  public void setScaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
  }

  public java.lang.String getLabel() {
    return this.Label;
  }

  public MixedMessage setLabel(java.lang.String Label) {
    this.Label = Label;
    return this;
  }

  public void unsetLabel() {
    this.Label = null;
  }

  /** Returns true if field Label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.Label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.Label = null;
    }
  }

  public java.lang.String getTitle() {
    return this.Title;
  }

  public MixedMessage setTitle(java.lang.String Title) {
    this.Title = Title;
    return this;
  }

  public void unsetTitle() {
    this.Title = null;
  }

  /** Returns true if field Title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.Title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.Title = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public MixedMessage setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public java.lang.String getUrl() {
    return this.Url;
  }

  public MixedMessage setUrl(java.lang.String Url) {
    this.Url = Url;
    return this;
  }

  public void unsetUrl() {
    this.Url = null;
  }

  /** Returns true if field Url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.Url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.Url = null;
    }
  }

  public java.lang.String getEvent() {
    return this.Event;
  }

  public MixedMessage setEvent(java.lang.String Event) {
    this.Event = Event;
    return this;
  }

  public void unsetEvent() {
    this.Event = null;
  }

  /** Returns true if field Event is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent() {
    return this.Event != null;
  }

  public void setEventIsSet(boolean value) {
    if (!value) {
      this.Event = null;
    }
  }

  public java.lang.String getEventKey() {
    return this.EventKey;
  }

  public MixedMessage setEventKey(java.lang.String EventKey) {
    this.EventKey = EventKey;
    return this;
  }

  public void unsetEventKey() {
    this.EventKey = null;
  }

  /** Returns true if field EventKey is set (has been assigned a value) and false otherwise */
  public boolean isSetEventKey() {
    return this.EventKey != null;
  }

  public void setEventKeyIsSet(boolean value) {
    if (!value) {
      this.EventKey = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TO_USER_NAME:
      if (value == null) {
        unsetToUserName();
      } else {
        setToUserName((java.lang.String)value);
      }
      break;

    case FROM_USER_NAME:
      if (value == null) {
        unsetFromUserName();
      } else {
        setFromUserName((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.Long)value);
      }
      break;

    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((java.lang.String)value);
      }
      break;

    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((java.lang.Long)value);
      }
      break;

    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((java.lang.Long)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.String)value);
      }
      break;

    case PIC_URL:
      if (value == null) {
        unsetPicURL();
      } else {
        setPicURL((java.lang.String)value);
      }
      break;

    case MEDIA_ID:
      if (value == null) {
        unsetMediaId();
      } else {
        setMediaId((java.lang.String)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((java.lang.String)value);
      }
      break;

    case THUMB_MEDIA_ID:
      if (value == null) {
        unsetThumbMediaId();
      } else {
        setThumbMediaId((java.lang.String)value);
      }
      break;

    case LOCATION__X:
      if (value == null) {
        unsetLocation_X();
      } else {
        setLocation_X((java.lang.Double)value);
      }
      break;

    case LOCATION__Y:
      if (value == null) {
        unsetLocation_Y();
      } else {
        setLocation_Y((java.lang.Double)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((java.lang.Integer)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case EVENT:
      if (value == null) {
        unsetEvent();
      } else {
        setEvent((java.lang.String)value);
      }
      break;

    case EVENT_KEY:
      if (value == null) {
        unsetEventKey();
      } else {
        setEventKey((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TO_USER_NAME:
      return getToUserName();

    case FROM_USER_NAME:
      return getFromUserName();

    case CREATE_TIME:
      return getCreateTime();

    case MSG_TYPE:
      return getMsgType();

    case MSG_ID:
      return getMsgId();

    case AGENT_ID:
      return getAgentId();

    case CONTENT:
      return getContent();

    case PIC_URL:
      return getPicURL();

    case MEDIA_ID:
      return getMediaId();

    case FORMAT:
      return getFormat();

    case THUMB_MEDIA_ID:
      return getThumbMediaId();

    case LOCATION__X:
      return getLocation_X();

    case LOCATION__Y:
      return getLocation_Y();

    case SCALE:
      return getScale();

    case LABEL:
      return getLabel();

    case TITLE:
      return getTitle();

    case DESCRIPTION:
      return getDescription();

    case URL:
      return getUrl();

    case EVENT:
      return getEvent();

    case EVENT_KEY:
      return getEventKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TO_USER_NAME:
      return isSetToUserName();
    case FROM_USER_NAME:
      return isSetFromUserName();
    case CREATE_TIME:
      return isSetCreateTime();
    case MSG_TYPE:
      return isSetMsgType();
    case MSG_ID:
      return isSetMsgId();
    case AGENT_ID:
      return isSetAgentId();
    case CONTENT:
      return isSetContent();
    case PIC_URL:
      return isSetPicURL();
    case MEDIA_ID:
      return isSetMediaId();
    case FORMAT:
      return isSetFormat();
    case THUMB_MEDIA_ID:
      return isSetThumbMediaId();
    case LOCATION__X:
      return isSetLocation_X();
    case LOCATION__Y:
      return isSetLocation_Y();
    case SCALE:
      return isSetScale();
    case LABEL:
      return isSetLabel();
    case TITLE:
      return isSetTitle();
    case DESCRIPTION:
      return isSetDescription();
    case URL:
      return isSetUrl();
    case EVENT:
      return isSetEvent();
    case EVENT_KEY:
      return isSetEventKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MixedMessage)
      return this.equals((MixedMessage)that);
    return false;
  }

  public boolean equals(MixedMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ToUserName = true && this.isSetToUserName();
    boolean that_present_ToUserName = true && that.isSetToUserName();
    if (this_present_ToUserName || that_present_ToUserName) {
      if (!(this_present_ToUserName && that_present_ToUserName))
        return false;
      if (!this.ToUserName.equals(that.ToUserName))
        return false;
    }

    boolean this_present_FromUserName = true && this.isSetFromUserName();
    boolean that_present_FromUserName = true && that.isSetFromUserName();
    if (this_present_FromUserName || that_present_FromUserName) {
      if (!(this_present_FromUserName && that_present_FromUserName))
        return false;
      if (!this.FromUserName.equals(that.FromUserName))
        return false;
    }

    boolean this_present_CreateTime = true;
    boolean that_present_CreateTime = true;
    if (this_present_CreateTime || that_present_CreateTime) {
      if (!(this_present_CreateTime && that_present_CreateTime))
        return false;
      if (this.CreateTime != that.CreateTime)
        return false;
    }

    boolean this_present_MsgType = true && this.isSetMsgType();
    boolean that_present_MsgType = true && that.isSetMsgType();
    if (this_present_MsgType || that_present_MsgType) {
      if (!(this_present_MsgType && that_present_MsgType))
        return false;
      if (!this.MsgType.equals(that.MsgType))
        return false;
    }

    boolean this_present_MsgId = true;
    boolean that_present_MsgId = true;
    if (this_present_MsgId || that_present_MsgId) {
      if (!(this_present_MsgId && that_present_MsgId))
        return false;
      if (this.MsgId != that.MsgId)
        return false;
    }

    boolean this_present_AgentId = true;
    boolean that_present_AgentId = true;
    if (this_present_AgentId || that_present_AgentId) {
      if (!(this_present_AgentId && that_present_AgentId))
        return false;
      if (this.AgentId != that.AgentId)
        return false;
    }

    boolean this_present_Content = true && this.isSetContent();
    boolean that_present_Content = true && that.isSetContent();
    if (this_present_Content || that_present_Content) {
      if (!(this_present_Content && that_present_Content))
        return false;
      if (!this.Content.equals(that.Content))
        return false;
    }

    boolean this_present_PicURL = true && this.isSetPicURL();
    boolean that_present_PicURL = true && that.isSetPicURL();
    if (this_present_PicURL || that_present_PicURL) {
      if (!(this_present_PicURL && that_present_PicURL))
        return false;
      if (!this.PicURL.equals(that.PicURL))
        return false;
    }

    boolean this_present_MediaId = true && this.isSetMediaId();
    boolean that_present_MediaId = true && that.isSetMediaId();
    if (this_present_MediaId || that_present_MediaId) {
      if (!(this_present_MediaId && that_present_MediaId))
        return false;
      if (!this.MediaId.equals(that.MediaId))
        return false;
    }

    boolean this_present_Format = true && this.isSetFormat();
    boolean that_present_Format = true && that.isSetFormat();
    if (this_present_Format || that_present_Format) {
      if (!(this_present_Format && that_present_Format))
        return false;
      if (!this.Format.equals(that.Format))
        return false;
    }

    boolean this_present_ThumbMediaId = true && this.isSetThumbMediaId();
    boolean that_present_ThumbMediaId = true && that.isSetThumbMediaId();
    if (this_present_ThumbMediaId || that_present_ThumbMediaId) {
      if (!(this_present_ThumbMediaId && that_present_ThumbMediaId))
        return false;
      if (!this.ThumbMediaId.equals(that.ThumbMediaId))
        return false;
    }

    boolean this_present_Location_X = true;
    boolean that_present_Location_X = true;
    if (this_present_Location_X || that_present_Location_X) {
      if (!(this_present_Location_X && that_present_Location_X))
        return false;
      if (this.Location_X != that.Location_X)
        return false;
    }

    boolean this_present_Location_Y = true;
    boolean that_present_Location_Y = true;
    if (this_present_Location_Y || that_present_Location_Y) {
      if (!(this_present_Location_Y && that_present_Location_Y))
        return false;
      if (this.Location_Y != that.Location_Y)
        return false;
    }

    boolean this_present_Scale = true;
    boolean that_present_Scale = true;
    if (this_present_Scale || that_present_Scale) {
      if (!(this_present_Scale && that_present_Scale))
        return false;
      if (this.Scale != that.Scale)
        return false;
    }

    boolean this_present_Label = true && this.isSetLabel();
    boolean that_present_Label = true && that.isSetLabel();
    if (this_present_Label || that_present_Label) {
      if (!(this_present_Label && that_present_Label))
        return false;
      if (!this.Label.equals(that.Label))
        return false;
    }

    boolean this_present_Title = true && this.isSetTitle();
    boolean that_present_Title = true && that.isSetTitle();
    if (this_present_Title || that_present_Title) {
      if (!(this_present_Title && that_present_Title))
        return false;
      if (!this.Title.equals(that.Title))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_Url = true && this.isSetUrl();
    boolean that_present_Url = true && that.isSetUrl();
    if (this_present_Url || that_present_Url) {
      if (!(this_present_Url && that_present_Url))
        return false;
      if (!this.Url.equals(that.Url))
        return false;
    }

    boolean this_present_Event = true && this.isSetEvent();
    boolean that_present_Event = true && that.isSetEvent();
    if (this_present_Event || that_present_Event) {
      if (!(this_present_Event && that_present_Event))
        return false;
      if (!this.Event.equals(that.Event))
        return false;
    }

    boolean this_present_EventKey = true && this.isSetEventKey();
    boolean that_present_EventKey = true && that.isSetEventKey();
    if (this_present_EventKey || that_present_EventKey) {
      if (!(this_present_EventKey && that_present_EventKey))
        return false;
      if (!this.EventKey.equals(that.EventKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetToUserName()) ? 131071 : 524287);
    if (isSetToUserName())
      hashCode = hashCode * 8191 + ToUserName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromUserName()) ? 131071 : 524287);
    if (isSetFromUserName())
      hashCode = hashCode * 8191 + FromUserName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(CreateTime);

    hashCode = hashCode * 8191 + ((isSetMsgType()) ? 131071 : 524287);
    if (isSetMsgType())
      hashCode = hashCode * 8191 + MsgType.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(MsgId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(AgentId);

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + Content.hashCode();

    hashCode = hashCode * 8191 + ((isSetPicURL()) ? 131071 : 524287);
    if (isSetPicURL())
      hashCode = hashCode * 8191 + PicURL.hashCode();

    hashCode = hashCode * 8191 + ((isSetMediaId()) ? 131071 : 524287);
    if (isSetMediaId())
      hashCode = hashCode * 8191 + MediaId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFormat()) ? 131071 : 524287);
    if (isSetFormat())
      hashCode = hashCode * 8191 + Format.hashCode();

    hashCode = hashCode * 8191 + ((isSetThumbMediaId()) ? 131071 : 524287);
    if (isSetThumbMediaId())
      hashCode = hashCode * 8191 + ThumbMediaId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Location_X);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Location_Y);

    hashCode = hashCode * 8191 + Scale;

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + Label.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + Title.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + Url.hashCode();

    hashCode = hashCode * 8191 + ((isSetEvent()) ? 131071 : 524287);
    if (isSetEvent())
      hashCode = hashCode * 8191 + Event.hashCode();

    hashCode = hashCode * 8191 + ((isSetEventKey()) ? 131071 : 524287);
    if (isSetEventKey())
      hashCode = hashCode * 8191 + EventKey.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MixedMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetToUserName()).compareTo(other.isSetToUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ToUserName, other.ToUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromUserName()).compareTo(other.isSetFromUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FromUserName, other.FromUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CreateTime, other.CreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MsgType, other.MsgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MsgId, other.MsgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AgentId, other.AgentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Content, other.Content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPicURL()).compareTo(other.isSetPicURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PicURL, other.PicURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMediaId()).compareTo(other.isSetMediaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MediaId, other.MediaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFormat()).compareTo(other.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Format, other.Format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThumbMediaId()).compareTo(other.isSetThumbMediaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumbMediaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ThumbMediaId, other.ThumbMediaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocation_X()).compareTo(other.isSetLocation_X());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation_X()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Location_X, other.Location_X);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocation_Y()).compareTo(other.isSetLocation_Y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation_Y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Location_Y, other.Location_Y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Scale, other.Scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Label, other.Label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Title, other.Title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Url, other.Url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Event, other.Event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEventKey()).compareTo(other.isSetEventKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EventKey, other.EventKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MixedMessage(");
    boolean first = true;

    sb.append("ToUserName:");
    if (this.ToUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.ToUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FromUserName:");
    if (this.FromUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.FromUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CreateTime:");
    sb.append(this.CreateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MsgType:");
    if (this.MsgType == null) {
      sb.append("null");
    } else {
      sb.append(this.MsgType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MsgId:");
    sb.append(this.MsgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("AgentId:");
    sb.append(this.AgentId);
    first = false;
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("Content:");
      if (this.Content == null) {
        sb.append("null");
      } else {
        sb.append(this.Content);
      }
      first = false;
    }
    if (isSetPicURL()) {
      if (!first) sb.append(", ");
      sb.append("PicURL:");
      if (this.PicURL == null) {
        sb.append("null");
      } else {
        sb.append(this.PicURL);
      }
      first = false;
    }
    if (isSetMediaId()) {
      if (!first) sb.append(", ");
      sb.append("MediaId:");
      if (this.MediaId == null) {
        sb.append("null");
      } else {
        sb.append(this.MediaId);
      }
      first = false;
    }
    if (isSetFormat()) {
      if (!first) sb.append(", ");
      sb.append("Format:");
      if (this.Format == null) {
        sb.append("null");
      } else {
        sb.append(this.Format);
      }
      first = false;
    }
    if (isSetThumbMediaId()) {
      if (!first) sb.append(", ");
      sb.append("ThumbMediaId:");
      if (this.ThumbMediaId == null) {
        sb.append("null");
      } else {
        sb.append(this.ThumbMediaId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("Location_X:");
    sb.append(this.Location_X);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Location_Y:");
    sb.append(this.Location_Y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Scale:");
    sb.append(this.Scale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Label:");
    if (this.Label == null) {
      sb.append("null");
    } else {
      sb.append(this.Label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Title:");
    if (this.Title == null) {
      sb.append("null");
    } else {
      sb.append(this.Title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Url:");
    if (this.Url == null) {
      sb.append("null");
    } else {
      sb.append(this.Url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Event:");
    if (this.Event == null) {
      sb.append("null");
    } else {
      sb.append(this.Event);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EventKey:");
    if (this.EventKey == null) {
      sb.append("null");
    } else {
      sb.append(this.EventKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MixedMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MixedMessageStandardScheme getScheme() {
      return new MixedMessageStandardScheme();
    }
  }

  private static class MixedMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<MixedMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MixedMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TO_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ToUserName = iprot.readString();
              struct.setToUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FromUserName = iprot.readString();
              struct.setFromUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.CreateTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MsgType = iprot.readString();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.MsgId = iprot.readI64();
              struct.setMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.AgentId = iprot.readI64();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PicURL = iprot.readString();
              struct.setPicURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MediaId = iprot.readString();
              struct.setMediaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Format = iprot.readString();
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // THUMB_MEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ThumbMediaId = iprot.readString();
              struct.setThumbMediaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOCATION__X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Location_X = iprot.readDouble();
              struct.setLocation_XIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOCATION__Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Location_Y = iprot.readDouble();
              struct.setLocation_YIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Scale = iprot.readI32();
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Event = iprot.readString();
              struct.setEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EVENT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EventKey = iprot.readString();
              struct.setEventKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MixedMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ToUserName != null) {
        oprot.writeFieldBegin(TO_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.ToUserName);
        oprot.writeFieldEnd();
      }
      if (struct.FromUserName != null) {
        oprot.writeFieldBegin(FROM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.FromUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.CreateTime);
      oprot.writeFieldEnd();
      if (struct.MsgType != null) {
        oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
        oprot.writeString(struct.MsgType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.MsgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
      oprot.writeI64(struct.AgentId);
      oprot.writeFieldEnd();
      if (struct.Content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.Content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PicURL != null) {
        if (struct.isSetPicURL()) {
          oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
          oprot.writeString(struct.PicURL);
          oprot.writeFieldEnd();
        }
      }
      if (struct.MediaId != null) {
        if (struct.isSetMediaId()) {
          oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
          oprot.writeString(struct.MediaId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Format != null) {
        if (struct.isSetFormat()) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeString(struct.Format);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ThumbMediaId != null) {
        if (struct.isSetThumbMediaId()) {
          oprot.writeFieldBegin(THUMB_MEDIA_ID_FIELD_DESC);
          oprot.writeString(struct.ThumbMediaId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(LOCATION__X_FIELD_DESC);
      oprot.writeDouble(struct.Location_X);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION__Y_FIELD_DESC);
      oprot.writeDouble(struct.Location_Y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCALE_FIELD_DESC);
      oprot.writeI32(struct.Scale);
      oprot.writeFieldEnd();
      if (struct.Label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.Label);
        oprot.writeFieldEnd();
      }
      if (struct.Title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.Title);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.Url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.Url);
        oprot.writeFieldEnd();
      }
      if (struct.Event != null) {
        oprot.writeFieldBegin(EVENT_FIELD_DESC);
        oprot.writeString(struct.Event);
        oprot.writeFieldEnd();
      }
      if (struct.EventKey != null) {
        oprot.writeFieldBegin(EVENT_KEY_FIELD_DESC);
        oprot.writeString(struct.EventKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MixedMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MixedMessageTupleScheme getScheme() {
      return new MixedMessageTupleScheme();
    }
  }

  private static class MixedMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<MixedMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MixedMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetToUserName()) {
        optionals.set(0);
      }
      if (struct.isSetFromUserName()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetMsgType()) {
        optionals.set(3);
      }
      if (struct.isSetMsgId()) {
        optionals.set(4);
      }
      if (struct.isSetAgentId()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetPicURL()) {
        optionals.set(7);
      }
      if (struct.isSetMediaId()) {
        optionals.set(8);
      }
      if (struct.isSetFormat()) {
        optionals.set(9);
      }
      if (struct.isSetThumbMediaId()) {
        optionals.set(10);
      }
      if (struct.isSetLocation_X()) {
        optionals.set(11);
      }
      if (struct.isSetLocation_Y()) {
        optionals.set(12);
      }
      if (struct.isSetScale()) {
        optionals.set(13);
      }
      if (struct.isSetLabel()) {
        optionals.set(14);
      }
      if (struct.isSetTitle()) {
        optionals.set(15);
      }
      if (struct.isSetDescription()) {
        optionals.set(16);
      }
      if (struct.isSetUrl()) {
        optionals.set(17);
      }
      if (struct.isSetEvent()) {
        optionals.set(18);
      }
      if (struct.isSetEventKey()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetToUserName()) {
        oprot.writeString(struct.ToUserName);
      }
      if (struct.isSetFromUserName()) {
        oprot.writeString(struct.FromUserName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.CreateTime);
      }
      if (struct.isSetMsgType()) {
        oprot.writeString(struct.MsgType);
      }
      if (struct.isSetMsgId()) {
        oprot.writeI64(struct.MsgId);
      }
      if (struct.isSetAgentId()) {
        oprot.writeI64(struct.AgentId);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.Content);
      }
      if (struct.isSetPicURL()) {
        oprot.writeString(struct.PicURL);
      }
      if (struct.isSetMediaId()) {
        oprot.writeString(struct.MediaId);
      }
      if (struct.isSetFormat()) {
        oprot.writeString(struct.Format);
      }
      if (struct.isSetThumbMediaId()) {
        oprot.writeString(struct.ThumbMediaId);
      }
      if (struct.isSetLocation_X()) {
        oprot.writeDouble(struct.Location_X);
      }
      if (struct.isSetLocation_Y()) {
        oprot.writeDouble(struct.Location_Y);
      }
      if (struct.isSetScale()) {
        oprot.writeI32(struct.Scale);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.Label);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.Title);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.Url);
      }
      if (struct.isSetEvent()) {
        oprot.writeString(struct.Event);
      }
      if (struct.isSetEventKey()) {
        oprot.writeString(struct.EventKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MixedMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.ToUserName = iprot.readString();
        struct.setToUserNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.FromUserName = iprot.readString();
        struct.setFromUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.CreateTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.MsgType = iprot.readString();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.MsgId = iprot.readI64();
        struct.setMsgIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.AgentId = iprot.readI64();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.PicURL = iprot.readString();
        struct.setPicURLIsSet(true);
      }
      if (incoming.get(8)) {
        struct.MediaId = iprot.readString();
        struct.setMediaIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.Format = iprot.readString();
        struct.setFormatIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ThumbMediaId = iprot.readString();
        struct.setThumbMediaIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.Location_X = iprot.readDouble();
        struct.setLocation_XIsSet(true);
      }
      if (incoming.get(12)) {
        struct.Location_Y = iprot.readDouble();
        struct.setLocation_YIsSet(true);
      }
      if (incoming.get(13)) {
        struct.Scale = iprot.readI32();
        struct.setScaleIsSet(true);
      }
      if (incoming.get(14)) {
        struct.Label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(15)) {
        struct.Title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(16)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.Url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(18)) {
        struct.Event = iprot.readString();
        struct.setEventIsSet(true);
      }
      if (incoming.get(19)) {
        struct.EventKey = iprot.readString();
        struct.setEventKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

