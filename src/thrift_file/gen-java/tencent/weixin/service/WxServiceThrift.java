/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tencent.weixin.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class WxServiceThrift {

  public interface Iface {

    public java.util.List<java.lang.String> CallBack(long callTime, java.lang.String name, java.util.Map<java.lang.String,java.lang.String> paramMap) throws org.apache.thrift.TException;

    public void put(Article newArticle) throws org.apache.thrift.TException;

    public java.lang.String GetAccessToken() throws org.apache.thrift.TException;

    public java.lang.String GetJsapiTicket() throws org.apache.thrift.TException;

    public JsapiSignData JsapiSign(java.lang.String url) throws org.apache.thrift.TException;

    public IsWeixinServerData IsWeixinServer(java.lang.String token, java.lang.String echostr, java.lang.String signature, java.lang.String timestamp, java.lang.String nonce) throws org.apache.thrift.TException;

    public ParseTemplateToMixedMessagesData ParseTemplateToMixedMessages(java.lang.String body) throws org.apache.thrift.TException;

    public SendTemplateResponseData SendTmplateMessage(TemplateMsgData tpl) throws org.apache.thrift.TException;

    public java.lang.String GetTextXml(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String content) throws org.apache.thrift.TException;

    public java.lang.String TransferCustomerService(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String kfAccount) throws org.apache.thrift.TException;

    public AuthCodeURLData AuthCodeURL(java.lang.String redirectURL, java.lang.String scope) throws org.apache.thrift.TException;

    public UserInfo GetUserInfoBySnsapiBase(java.lang.String code) throws org.apache.thrift.TException;

    public UserInfo GetUserInfoBySnsapiUserinfo(java.lang.String code) throws org.apache.thrift.TException;

    public UserInfo GetUserInfoByOpenid(java.lang.String openid) throws org.apache.thrift.TException;

    public WxResponse CreateMenu(menu menu) throws org.apache.thrift.TException;

    public WxResponse CreateMenuByJson(java.nio.ByteBuffer menuJsonBytes) throws org.apache.thrift.TException;

    public UnifiedOrderResponse UnifiedOrder(UnifiedOrderParam orderParam) throws org.apache.thrift.TException;

    public JsApiParameters GetJsApiParameters(UnifiedOrderResponse unifiedOrderResult) throws org.apache.thrift.TException;

    public WXPayNotify WxpayParseAndVerifySign(java.nio.ByteBuffer xmlBytes) throws org.apache.thrift.TException;

    public java.lang.String QrcodeShow(java.nio.ByteBuffer qrJsonBytes) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CallBack(long callTime, java.lang.String name, java.util.Map<java.lang.String,java.lang.String> paramMap, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void put(Article newArticle, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void GetAccessToken(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void GetJsapiTicket(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void JsapiSign(java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<JsapiSignData> resultHandler) throws org.apache.thrift.TException;

    public void IsWeixinServer(java.lang.String token, java.lang.String echostr, java.lang.String signature, java.lang.String timestamp, java.lang.String nonce, org.apache.thrift.async.AsyncMethodCallback<IsWeixinServerData> resultHandler) throws org.apache.thrift.TException;

    public void ParseTemplateToMixedMessages(java.lang.String body, org.apache.thrift.async.AsyncMethodCallback<ParseTemplateToMixedMessagesData> resultHandler) throws org.apache.thrift.TException;

    public void SendTmplateMessage(TemplateMsgData tpl, org.apache.thrift.async.AsyncMethodCallback<SendTemplateResponseData> resultHandler) throws org.apache.thrift.TException;

    public void GetTextXml(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void TransferCustomerService(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String kfAccount, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void AuthCodeURL(java.lang.String redirectURL, java.lang.String scope, org.apache.thrift.async.AsyncMethodCallback<AuthCodeURLData> resultHandler) throws org.apache.thrift.TException;

    public void GetUserInfoBySnsapiBase(java.lang.String code, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException;

    public void GetUserInfoBySnsapiUserinfo(java.lang.String code, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException;

    public void GetUserInfoByOpenid(java.lang.String openid, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException;

    public void CreateMenu(menu menu, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler) throws org.apache.thrift.TException;

    public void CreateMenuByJson(java.nio.ByteBuffer menuJsonBytes, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler) throws org.apache.thrift.TException;

    public void UnifiedOrder(UnifiedOrderParam orderParam, org.apache.thrift.async.AsyncMethodCallback<UnifiedOrderResponse> resultHandler) throws org.apache.thrift.TException;

    public void GetJsApiParameters(UnifiedOrderResponse unifiedOrderResult, org.apache.thrift.async.AsyncMethodCallback<JsApiParameters> resultHandler) throws org.apache.thrift.TException;

    public void WxpayParseAndVerifySign(java.nio.ByteBuffer xmlBytes, org.apache.thrift.async.AsyncMethodCallback<WXPayNotify> resultHandler) throws org.apache.thrift.TException;

    public void QrcodeShow(java.nio.ByteBuffer qrJsonBytes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<java.lang.String> CallBack(long callTime, java.lang.String name, java.util.Map<java.lang.String,java.lang.String> paramMap) throws org.apache.thrift.TException
    {
      send_CallBack(callTime, name, paramMap);
      return recv_CallBack();
    }

    public void send_CallBack(long callTime, java.lang.String name, java.util.Map<java.lang.String,java.lang.String> paramMap) throws org.apache.thrift.TException
    {
      CallBack_args args = new CallBack_args();
      args.setCallTime(callTime);
      args.setName(name);
      args.setParamMap(paramMap);
      sendBase("CallBack", args);
    }

    public java.util.List<java.lang.String> recv_CallBack() throws org.apache.thrift.TException
    {
      CallBack_result result = new CallBack_result();
      receiveBase(result, "CallBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CallBack failed: unknown result");
    }

    public void put(Article newArticle) throws org.apache.thrift.TException
    {
      send_put(newArticle);
      recv_put();
    }

    public void send_put(Article newArticle) throws org.apache.thrift.TException
    {
      put_args args = new put_args();
      args.setNewArticle(newArticle);
      sendBase("put", args);
    }

    public void recv_put() throws org.apache.thrift.TException
    {
      put_result result = new put_result();
      receiveBase(result, "put");
      return;
    }

    public java.lang.String GetAccessToken() throws org.apache.thrift.TException
    {
      send_GetAccessToken();
      return recv_GetAccessToken();
    }

    public void send_GetAccessToken() throws org.apache.thrift.TException
    {
      GetAccessToken_args args = new GetAccessToken_args();
      sendBase("GetAccessToken", args);
    }

    public java.lang.String recv_GetAccessToken() throws org.apache.thrift.TException
    {
      GetAccessToken_result result = new GetAccessToken_result();
      receiveBase(result, "GetAccessToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAccessToken failed: unknown result");
    }

    public java.lang.String GetJsapiTicket() throws org.apache.thrift.TException
    {
      send_GetJsapiTicket();
      return recv_GetJsapiTicket();
    }

    public void send_GetJsapiTicket() throws org.apache.thrift.TException
    {
      GetJsapiTicket_args args = new GetJsapiTicket_args();
      sendBase("GetJsapiTicket", args);
    }

    public java.lang.String recv_GetJsapiTicket() throws org.apache.thrift.TException
    {
      GetJsapiTicket_result result = new GetJsapiTicket_result();
      receiveBase(result, "GetJsapiTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetJsapiTicket failed: unknown result");
    }

    public JsapiSignData JsapiSign(java.lang.String url) throws org.apache.thrift.TException
    {
      send_JsapiSign(url);
      return recv_JsapiSign();
    }

    public void send_JsapiSign(java.lang.String url) throws org.apache.thrift.TException
    {
      JsapiSign_args args = new JsapiSign_args();
      args.setUrl(url);
      sendBase("JsapiSign", args);
    }

    public JsapiSignData recv_JsapiSign() throws org.apache.thrift.TException
    {
      JsapiSign_result result = new JsapiSign_result();
      receiveBase(result, "JsapiSign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "JsapiSign failed: unknown result");
    }

    public IsWeixinServerData IsWeixinServer(java.lang.String token, java.lang.String echostr, java.lang.String signature, java.lang.String timestamp, java.lang.String nonce) throws org.apache.thrift.TException
    {
      send_IsWeixinServer(token, echostr, signature, timestamp, nonce);
      return recv_IsWeixinServer();
    }

    public void send_IsWeixinServer(java.lang.String token, java.lang.String echostr, java.lang.String signature, java.lang.String timestamp, java.lang.String nonce) throws org.apache.thrift.TException
    {
      IsWeixinServer_args args = new IsWeixinServer_args();
      args.setToken(token);
      args.setEchostr(echostr);
      args.setSignature(signature);
      args.setTimestamp(timestamp);
      args.setNonce(nonce);
      sendBase("IsWeixinServer", args);
    }

    public IsWeixinServerData recv_IsWeixinServer() throws org.apache.thrift.TException
    {
      IsWeixinServer_result result = new IsWeixinServer_result();
      receiveBase(result, "IsWeixinServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsWeixinServer failed: unknown result");
    }

    public ParseTemplateToMixedMessagesData ParseTemplateToMixedMessages(java.lang.String body) throws org.apache.thrift.TException
    {
      send_ParseTemplateToMixedMessages(body);
      return recv_ParseTemplateToMixedMessages();
    }

    public void send_ParseTemplateToMixedMessages(java.lang.String body) throws org.apache.thrift.TException
    {
      ParseTemplateToMixedMessages_args args = new ParseTemplateToMixedMessages_args();
      args.setBody(body);
      sendBase("ParseTemplateToMixedMessages", args);
    }

    public ParseTemplateToMixedMessagesData recv_ParseTemplateToMixedMessages() throws org.apache.thrift.TException
    {
      ParseTemplateToMixedMessages_result result = new ParseTemplateToMixedMessages_result();
      receiveBase(result, "ParseTemplateToMixedMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ParseTemplateToMixedMessages failed: unknown result");
    }

    public SendTemplateResponseData SendTmplateMessage(TemplateMsgData tpl) throws org.apache.thrift.TException
    {
      send_SendTmplateMessage(tpl);
      return recv_SendTmplateMessage();
    }

    public void send_SendTmplateMessage(TemplateMsgData tpl) throws org.apache.thrift.TException
    {
      SendTmplateMessage_args args = new SendTmplateMessage_args();
      args.setTpl(tpl);
      sendBase("SendTmplateMessage", args);
    }

    public SendTemplateResponseData recv_SendTmplateMessage() throws org.apache.thrift.TException
    {
      SendTmplateMessage_result result = new SendTmplateMessage_result();
      receiveBase(result, "SendTmplateMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SendTmplateMessage failed: unknown result");
    }

    public java.lang.String GetTextXml(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String content) throws org.apache.thrift.TException
    {
      send_GetTextXml(fromUserName, toUserName, content);
      return recv_GetTextXml();
    }

    public void send_GetTextXml(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String content) throws org.apache.thrift.TException
    {
      GetTextXml_args args = new GetTextXml_args();
      args.setFromUserName(fromUserName);
      args.setToUserName(toUserName);
      args.setContent(content);
      sendBase("GetTextXml", args);
    }

    public java.lang.String recv_GetTextXml() throws org.apache.thrift.TException
    {
      GetTextXml_result result = new GetTextXml_result();
      receiveBase(result, "GetTextXml");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetTextXml failed: unknown result");
    }

    public java.lang.String TransferCustomerService(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String kfAccount) throws org.apache.thrift.TException
    {
      send_TransferCustomerService(fromUserName, toUserName, kfAccount);
      return recv_TransferCustomerService();
    }

    public void send_TransferCustomerService(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String kfAccount) throws org.apache.thrift.TException
    {
      TransferCustomerService_args args = new TransferCustomerService_args();
      args.setFromUserName(fromUserName);
      args.setToUserName(toUserName);
      args.setKfAccount(kfAccount);
      sendBase("TransferCustomerService", args);
    }

    public java.lang.String recv_TransferCustomerService() throws org.apache.thrift.TException
    {
      TransferCustomerService_result result = new TransferCustomerService_result();
      receiveBase(result, "TransferCustomerService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "TransferCustomerService failed: unknown result");
    }

    public AuthCodeURLData AuthCodeURL(java.lang.String redirectURL, java.lang.String scope) throws org.apache.thrift.TException
    {
      send_AuthCodeURL(redirectURL, scope);
      return recv_AuthCodeURL();
    }

    public void send_AuthCodeURL(java.lang.String redirectURL, java.lang.String scope) throws org.apache.thrift.TException
    {
      AuthCodeURL_args args = new AuthCodeURL_args();
      args.setRedirectURL(redirectURL);
      args.setScope(scope);
      sendBase("AuthCodeURL", args);
    }

    public AuthCodeURLData recv_AuthCodeURL() throws org.apache.thrift.TException
    {
      AuthCodeURL_result result = new AuthCodeURL_result();
      receiveBase(result, "AuthCodeURL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AuthCodeURL failed: unknown result");
    }

    public UserInfo GetUserInfoBySnsapiBase(java.lang.String code) throws org.apache.thrift.TException
    {
      send_GetUserInfoBySnsapiBase(code);
      return recv_GetUserInfoBySnsapiBase();
    }

    public void send_GetUserInfoBySnsapiBase(java.lang.String code) throws org.apache.thrift.TException
    {
      GetUserInfoBySnsapiBase_args args = new GetUserInfoBySnsapiBase_args();
      args.setCode(code);
      sendBase("GetUserInfoBySnsapiBase", args);
    }

    public UserInfo recv_GetUserInfoBySnsapiBase() throws org.apache.thrift.TException
    {
      GetUserInfoBySnsapiBase_result result = new GetUserInfoBySnsapiBase_result();
      receiveBase(result, "GetUserInfoBySnsapiBase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetUserInfoBySnsapiBase failed: unknown result");
    }

    public UserInfo GetUserInfoBySnsapiUserinfo(java.lang.String code) throws org.apache.thrift.TException
    {
      send_GetUserInfoBySnsapiUserinfo(code);
      return recv_GetUserInfoBySnsapiUserinfo();
    }

    public void send_GetUserInfoBySnsapiUserinfo(java.lang.String code) throws org.apache.thrift.TException
    {
      GetUserInfoBySnsapiUserinfo_args args = new GetUserInfoBySnsapiUserinfo_args();
      args.setCode(code);
      sendBase("GetUserInfoBySnsapiUserinfo", args);
    }

    public UserInfo recv_GetUserInfoBySnsapiUserinfo() throws org.apache.thrift.TException
    {
      GetUserInfoBySnsapiUserinfo_result result = new GetUserInfoBySnsapiUserinfo_result();
      receiveBase(result, "GetUserInfoBySnsapiUserinfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetUserInfoBySnsapiUserinfo failed: unknown result");
    }

    public UserInfo GetUserInfoByOpenid(java.lang.String openid) throws org.apache.thrift.TException
    {
      send_GetUserInfoByOpenid(openid);
      return recv_GetUserInfoByOpenid();
    }

    public void send_GetUserInfoByOpenid(java.lang.String openid) throws org.apache.thrift.TException
    {
      GetUserInfoByOpenid_args args = new GetUserInfoByOpenid_args();
      args.setOpenid(openid);
      sendBase("GetUserInfoByOpenid", args);
    }

    public UserInfo recv_GetUserInfoByOpenid() throws org.apache.thrift.TException
    {
      GetUserInfoByOpenid_result result = new GetUserInfoByOpenid_result();
      receiveBase(result, "GetUserInfoByOpenid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetUserInfoByOpenid failed: unknown result");
    }

    public WxResponse CreateMenu(menu menu) throws org.apache.thrift.TException
    {
      send_CreateMenu(menu);
      return recv_CreateMenu();
    }

    public void send_CreateMenu(menu menu) throws org.apache.thrift.TException
    {
      CreateMenu_args args = new CreateMenu_args();
      args.setMenu(menu);
      sendBase("CreateMenu", args);
    }

    public WxResponse recv_CreateMenu() throws org.apache.thrift.TException
    {
      CreateMenu_result result = new CreateMenu_result();
      receiveBase(result, "CreateMenu");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateMenu failed: unknown result");
    }

    public WxResponse CreateMenuByJson(java.nio.ByteBuffer menuJsonBytes) throws org.apache.thrift.TException
    {
      send_CreateMenuByJson(menuJsonBytes);
      return recv_CreateMenuByJson();
    }

    public void send_CreateMenuByJson(java.nio.ByteBuffer menuJsonBytes) throws org.apache.thrift.TException
    {
      CreateMenuByJson_args args = new CreateMenuByJson_args();
      args.setMenuJsonBytes(menuJsonBytes);
      sendBase("CreateMenuByJson", args);
    }

    public WxResponse recv_CreateMenuByJson() throws org.apache.thrift.TException
    {
      CreateMenuByJson_result result = new CreateMenuByJson_result();
      receiveBase(result, "CreateMenuByJson");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateMenuByJson failed: unknown result");
    }

    public UnifiedOrderResponse UnifiedOrder(UnifiedOrderParam orderParam) throws org.apache.thrift.TException
    {
      send_UnifiedOrder(orderParam);
      return recv_UnifiedOrder();
    }

    public void send_UnifiedOrder(UnifiedOrderParam orderParam) throws org.apache.thrift.TException
    {
      UnifiedOrder_args args = new UnifiedOrder_args();
      args.setOrderParam(orderParam);
      sendBase("UnifiedOrder", args);
    }

    public UnifiedOrderResponse recv_UnifiedOrder() throws org.apache.thrift.TException
    {
      UnifiedOrder_result result = new UnifiedOrder_result();
      receiveBase(result, "UnifiedOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UnifiedOrder failed: unknown result");
    }

    public JsApiParameters GetJsApiParameters(UnifiedOrderResponse unifiedOrderResult) throws org.apache.thrift.TException
    {
      send_GetJsApiParameters(unifiedOrderResult);
      return recv_GetJsApiParameters();
    }

    public void send_GetJsApiParameters(UnifiedOrderResponse unifiedOrderResult) throws org.apache.thrift.TException
    {
      GetJsApiParameters_args args = new GetJsApiParameters_args();
      args.setUnifiedOrderResult(unifiedOrderResult);
      sendBase("GetJsApiParameters", args);
    }

    public JsApiParameters recv_GetJsApiParameters() throws org.apache.thrift.TException
    {
      GetJsApiParameters_result result = new GetJsApiParameters_result();
      receiveBase(result, "GetJsApiParameters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetJsApiParameters failed: unknown result");
    }

    public WXPayNotify WxpayParseAndVerifySign(java.nio.ByteBuffer xmlBytes) throws org.apache.thrift.TException
    {
      send_WxpayParseAndVerifySign(xmlBytes);
      return recv_WxpayParseAndVerifySign();
    }

    public void send_WxpayParseAndVerifySign(java.nio.ByteBuffer xmlBytes) throws org.apache.thrift.TException
    {
      WxpayParseAndVerifySign_args args = new WxpayParseAndVerifySign_args();
      args.setXmlBytes(xmlBytes);
      sendBase("WxpayParseAndVerifySign", args);
    }

    public WXPayNotify recv_WxpayParseAndVerifySign() throws org.apache.thrift.TException
    {
      WxpayParseAndVerifySign_result result = new WxpayParseAndVerifySign_result();
      receiveBase(result, "WxpayParseAndVerifySign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "WxpayParseAndVerifySign failed: unknown result");
    }

    public java.lang.String QrcodeShow(java.nio.ByteBuffer qrJsonBytes) throws org.apache.thrift.TException
    {
      send_QrcodeShow(qrJsonBytes);
      return recv_QrcodeShow();
    }

    public void send_QrcodeShow(java.nio.ByteBuffer qrJsonBytes) throws org.apache.thrift.TException
    {
      QrcodeShow_args args = new QrcodeShow_args();
      args.setQrJsonBytes(qrJsonBytes);
      sendBase("QrcodeShow", args);
    }

    public java.lang.String recv_QrcodeShow() throws org.apache.thrift.TException
    {
      QrcodeShow_result result = new QrcodeShow_result();
      receiveBase(result, "QrcodeShow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QrcodeShow failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CallBack(long callTime, java.lang.String name, java.util.Map<java.lang.String,java.lang.String> paramMap, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CallBack_call method_call = new CallBack_call(callTime, name, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CallBack_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private long callTime;
      private java.lang.String name;
      private java.util.Map<java.lang.String,java.lang.String> paramMap;
      public CallBack_call(long callTime, java.lang.String name, java.util.Map<java.lang.String,java.lang.String> paramMap, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.callTime = callTime;
        this.name = name;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CallBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CallBack_args args = new CallBack_args();
        args.setCallTime(callTime);
        args.setName(name);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CallBack();
      }
    }

    public void put(Article newArticle, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      put_call method_call = new put_call(newArticle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Article newArticle;
      public put_call(Article newArticle, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newArticle = newArticle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put", org.apache.thrift.protocol.TMessageType.CALL, 0));
        put_args args = new put_args();
        args.setNewArticle(newArticle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void GetAccessToken(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAccessToken_call method_call = new GetAccessToken_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAccessToken_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public GetAccessToken_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAccessToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAccessToken_args args = new GetAccessToken_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAccessToken();
      }
    }

    public void GetJsapiTicket(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetJsapiTicket_call method_call = new GetJsapiTicket_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetJsapiTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public GetJsapiTicket_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetJsapiTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetJsapiTicket_args args = new GetJsapiTicket_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetJsapiTicket();
      }
    }

    public void JsapiSign(java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<JsapiSignData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      JsapiSign_call method_call = new JsapiSign_call(url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class JsapiSign_call extends org.apache.thrift.async.TAsyncMethodCall<JsapiSignData> {
      private java.lang.String url;
      public JsapiSign_call(java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<JsapiSignData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.url = url;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("JsapiSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        JsapiSign_args args = new JsapiSign_args();
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JsapiSignData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_JsapiSign();
      }
    }

    public void IsWeixinServer(java.lang.String token, java.lang.String echostr, java.lang.String signature, java.lang.String timestamp, java.lang.String nonce, org.apache.thrift.async.AsyncMethodCallback<IsWeixinServerData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsWeixinServer_call method_call = new IsWeixinServer_call(token, echostr, signature, timestamp, nonce, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsWeixinServer_call extends org.apache.thrift.async.TAsyncMethodCall<IsWeixinServerData> {
      private java.lang.String token;
      private java.lang.String echostr;
      private java.lang.String signature;
      private java.lang.String timestamp;
      private java.lang.String nonce;
      public IsWeixinServer_call(java.lang.String token, java.lang.String echostr, java.lang.String signature, java.lang.String timestamp, java.lang.String nonce, org.apache.thrift.async.AsyncMethodCallback<IsWeixinServerData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.echostr = echostr;
        this.signature = signature;
        this.timestamp = timestamp;
        this.nonce = nonce;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsWeixinServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsWeixinServer_args args = new IsWeixinServer_args();
        args.setToken(token);
        args.setEchostr(echostr);
        args.setSignature(signature);
        args.setTimestamp(timestamp);
        args.setNonce(nonce);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsWeixinServerData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsWeixinServer();
      }
    }

    public void ParseTemplateToMixedMessages(java.lang.String body, org.apache.thrift.async.AsyncMethodCallback<ParseTemplateToMixedMessagesData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ParseTemplateToMixedMessages_call method_call = new ParseTemplateToMixedMessages_call(body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ParseTemplateToMixedMessages_call extends org.apache.thrift.async.TAsyncMethodCall<ParseTemplateToMixedMessagesData> {
      private java.lang.String body;
      public ParseTemplateToMixedMessages_call(java.lang.String body, org.apache.thrift.async.AsyncMethodCallback<ParseTemplateToMixedMessagesData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ParseTemplateToMixedMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ParseTemplateToMixedMessages_args args = new ParseTemplateToMixedMessages_args();
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParseTemplateToMixedMessagesData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ParseTemplateToMixedMessages();
      }
    }

    public void SendTmplateMessage(TemplateMsgData tpl, org.apache.thrift.async.AsyncMethodCallback<SendTemplateResponseData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SendTmplateMessage_call method_call = new SendTmplateMessage_call(tpl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SendTmplateMessage_call extends org.apache.thrift.async.TAsyncMethodCall<SendTemplateResponseData> {
      private TemplateMsgData tpl;
      public SendTmplateMessage_call(TemplateMsgData tpl, org.apache.thrift.async.AsyncMethodCallback<SendTemplateResponseData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tpl = tpl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendTmplateMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SendTmplateMessage_args args = new SendTmplateMessage_args();
        args.setTpl(tpl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SendTemplateResponseData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SendTmplateMessage();
      }
    }

    public void GetTextXml(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetTextXml_call method_call = new GetTextXml_call(fromUserName, toUserName, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetTextXml_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fromUserName;
      private java.lang.String toUserName;
      private java.lang.String content;
      public GetTextXml_call(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromUserName = fromUserName;
        this.toUserName = toUserName;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTextXml", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetTextXml_args args = new GetTextXml_args();
        args.setFromUserName(fromUserName);
        args.setToUserName(toUserName);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetTextXml();
      }
    }

    public void TransferCustomerService(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String kfAccount, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TransferCustomerService_call method_call = new TransferCustomerService_call(fromUserName, toUserName, kfAccount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TransferCustomerService_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fromUserName;
      private java.lang.String toUserName;
      private java.lang.String kfAccount;
      public TransferCustomerService_call(java.lang.String fromUserName, java.lang.String toUserName, java.lang.String kfAccount, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromUserName = fromUserName;
        this.toUserName = toUserName;
        this.kfAccount = kfAccount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TransferCustomerService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TransferCustomerService_args args = new TransferCustomerService_args();
        args.setFromUserName(fromUserName);
        args.setToUserName(toUserName);
        args.setKfAccount(kfAccount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TransferCustomerService();
      }
    }

    public void AuthCodeURL(java.lang.String redirectURL, java.lang.String scope, org.apache.thrift.async.AsyncMethodCallback<AuthCodeURLData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AuthCodeURL_call method_call = new AuthCodeURL_call(redirectURL, scope, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AuthCodeURL_call extends org.apache.thrift.async.TAsyncMethodCall<AuthCodeURLData> {
      private java.lang.String redirectURL;
      private java.lang.String scope;
      public AuthCodeURL_call(java.lang.String redirectURL, java.lang.String scope, org.apache.thrift.async.AsyncMethodCallback<AuthCodeURLData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.redirectURL = redirectURL;
        this.scope = scope;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AuthCodeURL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AuthCodeURL_args args = new AuthCodeURL_args();
        args.setRedirectURL(redirectURL);
        args.setScope(scope);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AuthCodeURLData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AuthCodeURL();
      }
    }

    public void GetUserInfoBySnsapiBase(java.lang.String code, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetUserInfoBySnsapiBase_call method_call = new GetUserInfoBySnsapiBase_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetUserInfoBySnsapiBase_call extends org.apache.thrift.async.TAsyncMethodCall<UserInfo> {
      private java.lang.String code;
      public GetUserInfoBySnsapiBase_call(java.lang.String code, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetUserInfoBySnsapiBase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetUserInfoBySnsapiBase_args args = new GetUserInfoBySnsapiBase_args();
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetUserInfoBySnsapiBase();
      }
    }

    public void GetUserInfoBySnsapiUserinfo(java.lang.String code, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetUserInfoBySnsapiUserinfo_call method_call = new GetUserInfoBySnsapiUserinfo_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetUserInfoBySnsapiUserinfo_call extends org.apache.thrift.async.TAsyncMethodCall<UserInfo> {
      private java.lang.String code;
      public GetUserInfoBySnsapiUserinfo_call(java.lang.String code, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetUserInfoBySnsapiUserinfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetUserInfoBySnsapiUserinfo_args args = new GetUserInfoBySnsapiUserinfo_args();
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetUserInfoBySnsapiUserinfo();
      }
    }

    public void GetUserInfoByOpenid(java.lang.String openid, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetUserInfoByOpenid_call method_call = new GetUserInfoByOpenid_call(openid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetUserInfoByOpenid_call extends org.apache.thrift.async.TAsyncMethodCall<UserInfo> {
      private java.lang.String openid;
      public GetUserInfoByOpenid_call(java.lang.String openid, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.openid = openid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetUserInfoByOpenid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetUserInfoByOpenid_args args = new GetUserInfoByOpenid_args();
        args.setOpenid(openid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetUserInfoByOpenid();
      }
    }

    public void CreateMenu(menu menu, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateMenu_call method_call = new CreateMenu_call(menu, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateMenu_call extends org.apache.thrift.async.TAsyncMethodCall<WxResponse> {
      private menu menu;
      public CreateMenu_call(menu menu, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.menu = menu;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateMenu", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateMenu_args args = new CreateMenu_args();
        args.setMenu(menu);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WxResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateMenu();
      }
    }

    public void CreateMenuByJson(java.nio.ByteBuffer menuJsonBytes, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateMenuByJson_call method_call = new CreateMenuByJson_call(menuJsonBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateMenuByJson_call extends org.apache.thrift.async.TAsyncMethodCall<WxResponse> {
      private java.nio.ByteBuffer menuJsonBytes;
      public CreateMenuByJson_call(java.nio.ByteBuffer menuJsonBytes, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.menuJsonBytes = menuJsonBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateMenuByJson", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateMenuByJson_args args = new CreateMenuByJson_args();
        args.setMenuJsonBytes(menuJsonBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WxResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateMenuByJson();
      }
    }

    public void UnifiedOrder(UnifiedOrderParam orderParam, org.apache.thrift.async.AsyncMethodCallback<UnifiedOrderResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UnifiedOrder_call method_call = new UnifiedOrder_call(orderParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UnifiedOrder_call extends org.apache.thrift.async.TAsyncMethodCall<UnifiedOrderResponse> {
      private UnifiedOrderParam orderParam;
      public UnifiedOrder_call(UnifiedOrderParam orderParam, org.apache.thrift.async.AsyncMethodCallback<UnifiedOrderResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderParam = orderParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UnifiedOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UnifiedOrder_args args = new UnifiedOrder_args();
        args.setOrderParam(orderParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UnifiedOrderResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UnifiedOrder();
      }
    }

    public void GetJsApiParameters(UnifiedOrderResponse unifiedOrderResult, org.apache.thrift.async.AsyncMethodCallback<JsApiParameters> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetJsApiParameters_call method_call = new GetJsApiParameters_call(unifiedOrderResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetJsApiParameters_call extends org.apache.thrift.async.TAsyncMethodCall<JsApiParameters> {
      private UnifiedOrderResponse unifiedOrderResult;
      public GetJsApiParameters_call(UnifiedOrderResponse unifiedOrderResult, org.apache.thrift.async.AsyncMethodCallback<JsApiParameters> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unifiedOrderResult = unifiedOrderResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetJsApiParameters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetJsApiParameters_args args = new GetJsApiParameters_args();
        args.setUnifiedOrderResult(unifiedOrderResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JsApiParameters getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetJsApiParameters();
      }
    }

    public void WxpayParseAndVerifySign(java.nio.ByteBuffer xmlBytes, org.apache.thrift.async.AsyncMethodCallback<WXPayNotify> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      WxpayParseAndVerifySign_call method_call = new WxpayParseAndVerifySign_call(xmlBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class WxpayParseAndVerifySign_call extends org.apache.thrift.async.TAsyncMethodCall<WXPayNotify> {
      private java.nio.ByteBuffer xmlBytes;
      public WxpayParseAndVerifySign_call(java.nio.ByteBuffer xmlBytes, org.apache.thrift.async.AsyncMethodCallback<WXPayNotify> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlBytes = xmlBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("WxpayParseAndVerifySign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WxpayParseAndVerifySign_args args = new WxpayParseAndVerifySign_args();
        args.setXmlBytes(xmlBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WXPayNotify getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_WxpayParseAndVerifySign();
      }
    }

    public void QrcodeShow(java.nio.ByteBuffer qrJsonBytes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QrcodeShow_call method_call = new QrcodeShow_call(qrJsonBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QrcodeShow_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.nio.ByteBuffer qrJsonBytes;
      public QrcodeShow_call(java.nio.ByteBuffer qrJsonBytes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.qrJsonBytes = qrJsonBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QrcodeShow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QrcodeShow_args args = new QrcodeShow_args();
        args.setQrJsonBytes(qrJsonBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QrcodeShow();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CallBack", new CallBack());
      processMap.put("put", new put());
      processMap.put("GetAccessToken", new GetAccessToken());
      processMap.put("GetJsapiTicket", new GetJsapiTicket());
      processMap.put("JsapiSign", new JsapiSign());
      processMap.put("IsWeixinServer", new IsWeixinServer());
      processMap.put("ParseTemplateToMixedMessages", new ParseTemplateToMixedMessages());
      processMap.put("SendTmplateMessage", new SendTmplateMessage());
      processMap.put("GetTextXml", new GetTextXml());
      processMap.put("TransferCustomerService", new TransferCustomerService());
      processMap.put("AuthCodeURL", new AuthCodeURL());
      processMap.put("GetUserInfoBySnsapiBase", new GetUserInfoBySnsapiBase());
      processMap.put("GetUserInfoBySnsapiUserinfo", new GetUserInfoBySnsapiUserinfo());
      processMap.put("GetUserInfoByOpenid", new GetUserInfoByOpenid());
      processMap.put("CreateMenu", new CreateMenu());
      processMap.put("CreateMenuByJson", new CreateMenuByJson());
      processMap.put("UnifiedOrder", new UnifiedOrder());
      processMap.put("GetJsApiParameters", new GetJsApiParameters());
      processMap.put("WxpayParseAndVerifySign", new WxpayParseAndVerifySign());
      processMap.put("QrcodeShow", new QrcodeShow());
      return processMap;
    }

    public static class CallBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CallBack_args> {
      public CallBack() {
        super("CallBack");
      }

      public CallBack_args getEmptyArgsInstance() {
        return new CallBack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CallBack_result getResult(I iface, CallBack_args args) throws org.apache.thrift.TException {
        CallBack_result result = new CallBack_result();
        result.success = iface.CallBack(args.callTime, args.name, args.paramMap);
        return result;
      }
    }

    public static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
        put_result result = new put_result();
        iface.put(args.newArticle);
        return result;
      }
    }

    public static class GetAccessToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAccessToken_args> {
      public GetAccessToken() {
        super("GetAccessToken");
      }

      public GetAccessToken_args getEmptyArgsInstance() {
        return new GetAccessToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAccessToken_result getResult(I iface, GetAccessToken_args args) throws org.apache.thrift.TException {
        GetAccessToken_result result = new GetAccessToken_result();
        result.success = iface.GetAccessToken();
        return result;
      }
    }

    public static class GetJsapiTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetJsapiTicket_args> {
      public GetJsapiTicket() {
        super("GetJsapiTicket");
      }

      public GetJsapiTicket_args getEmptyArgsInstance() {
        return new GetJsapiTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetJsapiTicket_result getResult(I iface, GetJsapiTicket_args args) throws org.apache.thrift.TException {
        GetJsapiTicket_result result = new GetJsapiTicket_result();
        result.success = iface.GetJsapiTicket();
        return result;
      }
    }

    public static class JsapiSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, JsapiSign_args> {
      public JsapiSign() {
        super("JsapiSign");
      }

      public JsapiSign_args getEmptyArgsInstance() {
        return new JsapiSign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public JsapiSign_result getResult(I iface, JsapiSign_args args) throws org.apache.thrift.TException {
        JsapiSign_result result = new JsapiSign_result();
        result.success = iface.JsapiSign(args.url);
        return result;
      }
    }

    public static class IsWeixinServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsWeixinServer_args> {
      public IsWeixinServer() {
        super("IsWeixinServer");
      }

      public IsWeixinServer_args getEmptyArgsInstance() {
        return new IsWeixinServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public IsWeixinServer_result getResult(I iface, IsWeixinServer_args args) throws org.apache.thrift.TException {
        IsWeixinServer_result result = new IsWeixinServer_result();
        result.success = iface.IsWeixinServer(args.token, args.echostr, args.signature, args.timestamp, args.nonce);
        return result;
      }
    }

    public static class ParseTemplateToMixedMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ParseTemplateToMixedMessages_args> {
      public ParseTemplateToMixedMessages() {
        super("ParseTemplateToMixedMessages");
      }

      public ParseTemplateToMixedMessages_args getEmptyArgsInstance() {
        return new ParseTemplateToMixedMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ParseTemplateToMixedMessages_result getResult(I iface, ParseTemplateToMixedMessages_args args) throws org.apache.thrift.TException {
        ParseTemplateToMixedMessages_result result = new ParseTemplateToMixedMessages_result();
        result.success = iface.ParseTemplateToMixedMessages(args.body);
        return result;
      }
    }

    public static class SendTmplateMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendTmplateMessage_args> {
      public SendTmplateMessage() {
        super("SendTmplateMessage");
      }

      public SendTmplateMessage_args getEmptyArgsInstance() {
        return new SendTmplateMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SendTmplateMessage_result getResult(I iface, SendTmplateMessage_args args) throws org.apache.thrift.TException {
        SendTmplateMessage_result result = new SendTmplateMessage_result();
        result.success = iface.SendTmplateMessage(args.tpl);
        return result;
      }
    }

    public static class GetTextXml<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetTextXml_args> {
      public GetTextXml() {
        super("GetTextXml");
      }

      public GetTextXml_args getEmptyArgsInstance() {
        return new GetTextXml_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetTextXml_result getResult(I iface, GetTextXml_args args) throws org.apache.thrift.TException {
        GetTextXml_result result = new GetTextXml_result();
        result.success = iface.GetTextXml(args.fromUserName, args.toUserName, args.content);
        return result;
      }
    }

    public static class TransferCustomerService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TransferCustomerService_args> {
      public TransferCustomerService() {
        super("TransferCustomerService");
      }

      public TransferCustomerService_args getEmptyArgsInstance() {
        return new TransferCustomerService_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public TransferCustomerService_result getResult(I iface, TransferCustomerService_args args) throws org.apache.thrift.TException {
        TransferCustomerService_result result = new TransferCustomerService_result();
        result.success = iface.TransferCustomerService(args.fromUserName, args.toUserName, args.kfAccount);
        return result;
      }
    }

    public static class AuthCodeURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AuthCodeURL_args> {
      public AuthCodeURL() {
        super("AuthCodeURL");
      }

      public AuthCodeURL_args getEmptyArgsInstance() {
        return new AuthCodeURL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AuthCodeURL_result getResult(I iface, AuthCodeURL_args args) throws org.apache.thrift.TException {
        AuthCodeURL_result result = new AuthCodeURL_result();
        result.success = iface.AuthCodeURL(args.redirectURL, args.scope);
        return result;
      }
    }

    public static class GetUserInfoBySnsapiBase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetUserInfoBySnsapiBase_args> {
      public GetUserInfoBySnsapiBase() {
        super("GetUserInfoBySnsapiBase");
      }

      public GetUserInfoBySnsapiBase_args getEmptyArgsInstance() {
        return new GetUserInfoBySnsapiBase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetUserInfoBySnsapiBase_result getResult(I iface, GetUserInfoBySnsapiBase_args args) throws org.apache.thrift.TException {
        GetUserInfoBySnsapiBase_result result = new GetUserInfoBySnsapiBase_result();
        result.success = iface.GetUserInfoBySnsapiBase(args.code);
        return result;
      }
    }

    public static class GetUserInfoBySnsapiUserinfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetUserInfoBySnsapiUserinfo_args> {
      public GetUserInfoBySnsapiUserinfo() {
        super("GetUserInfoBySnsapiUserinfo");
      }

      public GetUserInfoBySnsapiUserinfo_args getEmptyArgsInstance() {
        return new GetUserInfoBySnsapiUserinfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetUserInfoBySnsapiUserinfo_result getResult(I iface, GetUserInfoBySnsapiUserinfo_args args) throws org.apache.thrift.TException {
        GetUserInfoBySnsapiUserinfo_result result = new GetUserInfoBySnsapiUserinfo_result();
        result.success = iface.GetUserInfoBySnsapiUserinfo(args.code);
        return result;
      }
    }

    public static class GetUserInfoByOpenid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetUserInfoByOpenid_args> {
      public GetUserInfoByOpenid() {
        super("GetUserInfoByOpenid");
      }

      public GetUserInfoByOpenid_args getEmptyArgsInstance() {
        return new GetUserInfoByOpenid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetUserInfoByOpenid_result getResult(I iface, GetUserInfoByOpenid_args args) throws org.apache.thrift.TException {
        GetUserInfoByOpenid_result result = new GetUserInfoByOpenid_result();
        result.success = iface.GetUserInfoByOpenid(args.openid);
        return result;
      }
    }

    public static class CreateMenu<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateMenu_args> {
      public CreateMenu() {
        super("CreateMenu");
      }

      public CreateMenu_args getEmptyArgsInstance() {
        return new CreateMenu_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateMenu_result getResult(I iface, CreateMenu_args args) throws org.apache.thrift.TException {
        CreateMenu_result result = new CreateMenu_result();
        result.success = iface.CreateMenu(args.menu);
        return result;
      }
    }

    public static class CreateMenuByJson<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateMenuByJson_args> {
      public CreateMenuByJson() {
        super("CreateMenuByJson");
      }

      public CreateMenuByJson_args getEmptyArgsInstance() {
        return new CreateMenuByJson_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateMenuByJson_result getResult(I iface, CreateMenuByJson_args args) throws org.apache.thrift.TException {
        CreateMenuByJson_result result = new CreateMenuByJson_result();
        result.success = iface.CreateMenuByJson(args.menuJsonBytes);
        return result;
      }
    }

    public static class UnifiedOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UnifiedOrder_args> {
      public UnifiedOrder() {
        super("UnifiedOrder");
      }

      public UnifiedOrder_args getEmptyArgsInstance() {
        return new UnifiedOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UnifiedOrder_result getResult(I iface, UnifiedOrder_args args) throws org.apache.thrift.TException {
        UnifiedOrder_result result = new UnifiedOrder_result();
        result.success = iface.UnifiedOrder(args.orderParam);
        return result;
      }
    }

    public static class GetJsApiParameters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetJsApiParameters_args> {
      public GetJsApiParameters() {
        super("GetJsApiParameters");
      }

      public GetJsApiParameters_args getEmptyArgsInstance() {
        return new GetJsApiParameters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetJsApiParameters_result getResult(I iface, GetJsApiParameters_args args) throws org.apache.thrift.TException {
        GetJsApiParameters_result result = new GetJsApiParameters_result();
        result.success = iface.GetJsApiParameters(args.unifiedOrderResult);
        return result;
      }
    }

    public static class WxpayParseAndVerifySign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, WxpayParseAndVerifySign_args> {
      public WxpayParseAndVerifySign() {
        super("WxpayParseAndVerifySign");
      }

      public WxpayParseAndVerifySign_args getEmptyArgsInstance() {
        return new WxpayParseAndVerifySign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public WxpayParseAndVerifySign_result getResult(I iface, WxpayParseAndVerifySign_args args) throws org.apache.thrift.TException {
        WxpayParseAndVerifySign_result result = new WxpayParseAndVerifySign_result();
        result.success = iface.WxpayParseAndVerifySign(args.xmlBytes);
        return result;
      }
    }

    public static class QrcodeShow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QrcodeShow_args> {
      public QrcodeShow() {
        super("QrcodeShow");
      }

      public QrcodeShow_args getEmptyArgsInstance() {
        return new QrcodeShow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public QrcodeShow_result getResult(I iface, QrcodeShow_args args) throws org.apache.thrift.TException {
        QrcodeShow_result result = new QrcodeShow_result();
        result.success = iface.QrcodeShow(args.qrJsonBytes);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("CallBack", new CallBack());
      processMap.put("put", new put());
      processMap.put("GetAccessToken", new GetAccessToken());
      processMap.put("GetJsapiTicket", new GetJsapiTicket());
      processMap.put("JsapiSign", new JsapiSign());
      processMap.put("IsWeixinServer", new IsWeixinServer());
      processMap.put("ParseTemplateToMixedMessages", new ParseTemplateToMixedMessages());
      processMap.put("SendTmplateMessage", new SendTmplateMessage());
      processMap.put("GetTextXml", new GetTextXml());
      processMap.put("TransferCustomerService", new TransferCustomerService());
      processMap.put("AuthCodeURL", new AuthCodeURL());
      processMap.put("GetUserInfoBySnsapiBase", new GetUserInfoBySnsapiBase());
      processMap.put("GetUserInfoBySnsapiUserinfo", new GetUserInfoBySnsapiUserinfo());
      processMap.put("GetUserInfoByOpenid", new GetUserInfoByOpenid());
      processMap.put("CreateMenu", new CreateMenu());
      processMap.put("CreateMenuByJson", new CreateMenuByJson());
      processMap.put("UnifiedOrder", new UnifiedOrder());
      processMap.put("GetJsApiParameters", new GetJsApiParameters());
      processMap.put("WxpayParseAndVerifySign", new WxpayParseAndVerifySign());
      processMap.put("QrcodeShow", new QrcodeShow());
      return processMap;
    }

    public static class CallBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CallBack_args, java.util.List<java.lang.String>> {
      public CallBack() {
        super("CallBack");
      }

      public CallBack_args getEmptyArgsInstance() {
        return new CallBack_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            CallBack_result result = new CallBack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CallBack_result result = new CallBack_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CallBack_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.CallBack(args.callTime, args.name, args.paramMap,resultHandler);
      }
    }

    public static class put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put_args, Void> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            put_result result = new put_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            put_result result = new put_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, put_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.put(args.newArticle,resultHandler);
      }
    }

    public static class GetAccessToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAccessToken_args, java.lang.String> {
      public GetAccessToken() {
        super("GetAccessToken");
      }

      public GetAccessToken_args getEmptyArgsInstance() {
        return new GetAccessToken_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            GetAccessToken_result result = new GetAccessToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetAccessToken_result result = new GetAccessToken_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAccessToken_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.GetAccessToken(resultHandler);
      }
    }

    public static class GetJsapiTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetJsapiTicket_args, java.lang.String> {
      public GetJsapiTicket() {
        super("GetJsapiTicket");
      }

      public GetJsapiTicket_args getEmptyArgsInstance() {
        return new GetJsapiTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            GetJsapiTicket_result result = new GetJsapiTicket_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetJsapiTicket_result result = new GetJsapiTicket_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetJsapiTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.GetJsapiTicket(resultHandler);
      }
    }

    public static class JsapiSign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, JsapiSign_args, JsapiSignData> {
      public JsapiSign() {
        super("JsapiSign");
      }

      public JsapiSign_args getEmptyArgsInstance() {
        return new JsapiSign_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<JsapiSignData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<JsapiSignData>() { 
          public void onComplete(JsapiSignData o) {
            JsapiSign_result result = new JsapiSign_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            JsapiSign_result result = new JsapiSign_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, JsapiSign_args args, org.apache.thrift.async.AsyncMethodCallback<JsapiSignData> resultHandler) throws org.apache.thrift.TException {
        iface.JsapiSign(args.url,resultHandler);
      }
    }

    public static class IsWeixinServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, IsWeixinServer_args, IsWeixinServerData> {
      public IsWeixinServer() {
        super("IsWeixinServer");
      }

      public IsWeixinServer_args getEmptyArgsInstance() {
        return new IsWeixinServer_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<IsWeixinServerData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<IsWeixinServerData>() { 
          public void onComplete(IsWeixinServerData o) {
            IsWeixinServer_result result = new IsWeixinServer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            IsWeixinServer_result result = new IsWeixinServer_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, IsWeixinServer_args args, org.apache.thrift.async.AsyncMethodCallback<IsWeixinServerData> resultHandler) throws org.apache.thrift.TException {
        iface.IsWeixinServer(args.token, args.echostr, args.signature, args.timestamp, args.nonce,resultHandler);
      }
    }

    public static class ParseTemplateToMixedMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ParseTemplateToMixedMessages_args, ParseTemplateToMixedMessagesData> {
      public ParseTemplateToMixedMessages() {
        super("ParseTemplateToMixedMessages");
      }

      public ParseTemplateToMixedMessages_args getEmptyArgsInstance() {
        return new ParseTemplateToMixedMessages_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ParseTemplateToMixedMessagesData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ParseTemplateToMixedMessagesData>() { 
          public void onComplete(ParseTemplateToMixedMessagesData o) {
            ParseTemplateToMixedMessages_result result = new ParseTemplateToMixedMessages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ParseTemplateToMixedMessages_result result = new ParseTemplateToMixedMessages_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ParseTemplateToMixedMessages_args args, org.apache.thrift.async.AsyncMethodCallback<ParseTemplateToMixedMessagesData> resultHandler) throws org.apache.thrift.TException {
        iface.ParseTemplateToMixedMessages(args.body,resultHandler);
      }
    }

    public static class SendTmplateMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendTmplateMessage_args, SendTemplateResponseData> {
      public SendTmplateMessage() {
        super("SendTmplateMessage");
      }

      public SendTmplateMessage_args getEmptyArgsInstance() {
        return new SendTmplateMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SendTemplateResponseData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SendTemplateResponseData>() { 
          public void onComplete(SendTemplateResponseData o) {
            SendTmplateMessage_result result = new SendTmplateMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            SendTmplateMessage_result result = new SendTmplateMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SendTmplateMessage_args args, org.apache.thrift.async.AsyncMethodCallback<SendTemplateResponseData> resultHandler) throws org.apache.thrift.TException {
        iface.SendTmplateMessage(args.tpl,resultHandler);
      }
    }

    public static class GetTextXml<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetTextXml_args, java.lang.String> {
      public GetTextXml() {
        super("GetTextXml");
      }

      public GetTextXml_args getEmptyArgsInstance() {
        return new GetTextXml_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            GetTextXml_result result = new GetTextXml_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetTextXml_result result = new GetTextXml_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetTextXml_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.GetTextXml(args.fromUserName, args.toUserName, args.content,resultHandler);
      }
    }

    public static class TransferCustomerService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TransferCustomerService_args, java.lang.String> {
      public TransferCustomerService() {
        super("TransferCustomerService");
      }

      public TransferCustomerService_args getEmptyArgsInstance() {
        return new TransferCustomerService_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            TransferCustomerService_result result = new TransferCustomerService_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            TransferCustomerService_result result = new TransferCustomerService_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TransferCustomerService_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.TransferCustomerService(args.fromUserName, args.toUserName, args.kfAccount,resultHandler);
      }
    }

    public static class AuthCodeURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AuthCodeURL_args, AuthCodeURLData> {
      public AuthCodeURL() {
        super("AuthCodeURL");
      }

      public AuthCodeURL_args getEmptyArgsInstance() {
        return new AuthCodeURL_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<AuthCodeURLData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<AuthCodeURLData>() { 
          public void onComplete(AuthCodeURLData o) {
            AuthCodeURL_result result = new AuthCodeURL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AuthCodeURL_result result = new AuthCodeURL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AuthCodeURL_args args, org.apache.thrift.async.AsyncMethodCallback<AuthCodeURLData> resultHandler) throws org.apache.thrift.TException {
        iface.AuthCodeURL(args.redirectURL, args.scope,resultHandler);
      }
    }

    public static class GetUserInfoBySnsapiBase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetUserInfoBySnsapiBase_args, UserInfo> {
      public GetUserInfoBySnsapiBase() {
        super("GetUserInfoBySnsapiBase");
      }

      public GetUserInfoBySnsapiBase_args getEmptyArgsInstance() {
        return new GetUserInfoBySnsapiBase_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UserInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UserInfo>() { 
          public void onComplete(UserInfo o) {
            GetUserInfoBySnsapiBase_result result = new GetUserInfoBySnsapiBase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetUserInfoBySnsapiBase_result result = new GetUserInfoBySnsapiBase_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetUserInfoBySnsapiBase_args args, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException {
        iface.GetUserInfoBySnsapiBase(args.code,resultHandler);
      }
    }

    public static class GetUserInfoBySnsapiUserinfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetUserInfoBySnsapiUserinfo_args, UserInfo> {
      public GetUserInfoBySnsapiUserinfo() {
        super("GetUserInfoBySnsapiUserinfo");
      }

      public GetUserInfoBySnsapiUserinfo_args getEmptyArgsInstance() {
        return new GetUserInfoBySnsapiUserinfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UserInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UserInfo>() { 
          public void onComplete(UserInfo o) {
            GetUserInfoBySnsapiUserinfo_result result = new GetUserInfoBySnsapiUserinfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetUserInfoBySnsapiUserinfo_result result = new GetUserInfoBySnsapiUserinfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetUserInfoBySnsapiUserinfo_args args, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException {
        iface.GetUserInfoBySnsapiUserinfo(args.code,resultHandler);
      }
    }

    public static class GetUserInfoByOpenid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetUserInfoByOpenid_args, UserInfo> {
      public GetUserInfoByOpenid() {
        super("GetUserInfoByOpenid");
      }

      public GetUserInfoByOpenid_args getEmptyArgsInstance() {
        return new GetUserInfoByOpenid_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UserInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UserInfo>() { 
          public void onComplete(UserInfo o) {
            GetUserInfoByOpenid_result result = new GetUserInfoByOpenid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetUserInfoByOpenid_result result = new GetUserInfoByOpenid_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetUserInfoByOpenid_args args, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws org.apache.thrift.TException {
        iface.GetUserInfoByOpenid(args.openid,resultHandler);
      }
    }

    public static class CreateMenu<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateMenu_args, WxResponse> {
      public CreateMenu() {
        super("CreateMenu");
      }

      public CreateMenu_args getEmptyArgsInstance() {
        return new CreateMenu_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WxResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WxResponse>() { 
          public void onComplete(WxResponse o) {
            CreateMenu_result result = new CreateMenu_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CreateMenu_result result = new CreateMenu_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateMenu_args args, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler) throws org.apache.thrift.TException {
        iface.CreateMenu(args.menu,resultHandler);
      }
    }

    public static class CreateMenuByJson<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateMenuByJson_args, WxResponse> {
      public CreateMenuByJson() {
        super("CreateMenuByJson");
      }

      public CreateMenuByJson_args getEmptyArgsInstance() {
        return new CreateMenuByJson_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WxResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WxResponse>() { 
          public void onComplete(WxResponse o) {
            CreateMenuByJson_result result = new CreateMenuByJson_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CreateMenuByJson_result result = new CreateMenuByJson_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateMenuByJson_args args, org.apache.thrift.async.AsyncMethodCallback<WxResponse> resultHandler) throws org.apache.thrift.TException {
        iface.CreateMenuByJson(args.menuJsonBytes,resultHandler);
      }
    }

    public static class UnifiedOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UnifiedOrder_args, UnifiedOrderResponse> {
      public UnifiedOrder() {
        super("UnifiedOrder");
      }

      public UnifiedOrder_args getEmptyArgsInstance() {
        return new UnifiedOrder_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UnifiedOrderResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UnifiedOrderResponse>() { 
          public void onComplete(UnifiedOrderResponse o) {
            UnifiedOrder_result result = new UnifiedOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            UnifiedOrder_result result = new UnifiedOrder_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UnifiedOrder_args args, org.apache.thrift.async.AsyncMethodCallback<UnifiedOrderResponse> resultHandler) throws org.apache.thrift.TException {
        iface.UnifiedOrder(args.orderParam,resultHandler);
      }
    }

    public static class GetJsApiParameters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetJsApiParameters_args, JsApiParameters> {
      public GetJsApiParameters() {
        super("GetJsApiParameters");
      }

      public GetJsApiParameters_args getEmptyArgsInstance() {
        return new GetJsApiParameters_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<JsApiParameters> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<JsApiParameters>() { 
          public void onComplete(JsApiParameters o) {
            GetJsApiParameters_result result = new GetJsApiParameters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetJsApiParameters_result result = new GetJsApiParameters_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetJsApiParameters_args args, org.apache.thrift.async.AsyncMethodCallback<JsApiParameters> resultHandler) throws org.apache.thrift.TException {
        iface.GetJsApiParameters(args.unifiedOrderResult,resultHandler);
      }
    }

    public static class WxpayParseAndVerifySign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, WxpayParseAndVerifySign_args, WXPayNotify> {
      public WxpayParseAndVerifySign() {
        super("WxpayParseAndVerifySign");
      }

      public WxpayParseAndVerifySign_args getEmptyArgsInstance() {
        return new WxpayParseAndVerifySign_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WXPayNotify> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WXPayNotify>() { 
          public void onComplete(WXPayNotify o) {
            WxpayParseAndVerifySign_result result = new WxpayParseAndVerifySign_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            WxpayParseAndVerifySign_result result = new WxpayParseAndVerifySign_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, WxpayParseAndVerifySign_args args, org.apache.thrift.async.AsyncMethodCallback<WXPayNotify> resultHandler) throws org.apache.thrift.TException {
        iface.WxpayParseAndVerifySign(args.xmlBytes,resultHandler);
      }
    }

    public static class QrcodeShow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QrcodeShow_args, java.lang.String> {
      public QrcodeShow() {
        super("QrcodeShow");
      }

      public QrcodeShow_args getEmptyArgsInstance() {
        return new QrcodeShow_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            QrcodeShow_result result = new QrcodeShow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            QrcodeShow_result result = new QrcodeShow_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QrcodeShow_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.QrcodeShow(args.qrJsonBytes,resultHandler);
      }
    }

  }

  public static class CallBack_args implements org.apache.thrift.TBase<CallBack_args, CallBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<CallBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CallBack_args");

    private static final org.apache.thrift.protocol.TField CALL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("callTime", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CallBack_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CallBack_argsTupleSchemeFactory();

    public long callTime; // required
    public java.lang.String name; // required
    public java.util.Map<java.lang.String,java.lang.String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALL_TIME((short)1, "callTime"),
      NAME((short)2, "name"),
      PARAM_MAP((short)3, "paramMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALL_TIME
            return CALL_TIME;
          case 2: // NAME
            return NAME;
          case 3: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CALLTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALL_TIME, new org.apache.thrift.meta_data.FieldMetaData("callTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CallBack_args.class, metaDataMap);
    }

    public CallBack_args() {
    }

    public CallBack_args(
      long callTime,
      java.lang.String name,
      java.util.Map<java.lang.String,java.lang.String> paramMap)
    {
      this();
      this.callTime = callTime;
      setCallTimeIsSet(true);
      this.name = name;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CallBack_args(CallBack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.callTime = other.callTime;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetParamMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__paramMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public CallBack_args deepCopy() {
      return new CallBack_args(this);
    }

    @Override
    public void clear() {
      setCallTimeIsSet(false);
      this.callTime = 0;
      this.name = null;
      this.paramMap = null;
    }

    public long getCallTime() {
      return this.callTime;
    }

    public CallBack_args setCallTime(long callTime) {
      this.callTime = callTime;
      setCallTimeIsSet(true);
      return this;
    }

    public void unsetCallTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    /** Returns true if field callTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCallTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    public void setCallTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLTIME_ISSET_ID, value);
    }

    public java.lang.String getName() {
      return this.name;
    }

    public CallBack_args setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(java.lang.String key, java.lang.String val) {
      if (this.paramMap == null) {
        this.paramMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.paramMap.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getParamMap() {
      return this.paramMap;
    }

    public CallBack_args setParamMap(java.util.Map<java.lang.String,java.lang.String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CALL_TIME:
        if (value == null) {
          unsetCallTime();
        } else {
          setCallTime((java.lang.Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALL_TIME:
        return getCallTime();

      case NAME:
        return getName();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALL_TIME:
        return isSetCallTime();
      case NAME:
        return isSetName();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CallBack_args)
        return this.equals((CallBack_args)that);
      return false;
    }

    public boolean equals(CallBack_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callTime = true;
      boolean that_present_callTime = true;
      if (this_present_callTime || that_present_callTime) {
        if (!(this_present_callTime && that_present_callTime))
          return false;
        if (this.callTime != that.callTime)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callTime);

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamMap()) ? 131071 : 524287);
      if (isSetParamMap())
        hashCode = hashCode * 8191 + paramMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CallBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCallTime()).compareTo(other.isSetCallTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callTime, other.callTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CallBack_args(");
      boolean first = true;

      sb.append("callTime:");
      sb.append(this.callTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CallBack_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CallBack_argsStandardScheme getScheme() {
        return new CallBack_argsStandardScheme();
      }
    }

    private static class CallBack_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CallBack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CallBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALL_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.callTime = iprot.readI64();
                struct.setCallTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.paramMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                  java.lang.String _key1;
                  java.lang.String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.paramMap.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CallBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CALL_TIME_FIELD_DESC);
        oprot.writeI64(struct.callTime);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CallBack_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CallBack_argsTupleScheme getScheme() {
        return new CallBack_argsTupleScheme();
      }
    }

    private static class CallBack_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CallBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CallBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallTime()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetParamMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCallTime()) {
          oprot.writeI64(struct.callTime);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CallBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.callTime = iprot.readI64();
          struct.setCallTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
            java.lang.String _key7;
            java.lang.String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.paramMap.put(_key7, _val8);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CallBack_result implements org.apache.thrift.TBase<CallBack_result, CallBack_result._Fields>, java.io.Serializable, Cloneable, Comparable<CallBack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CallBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CallBack_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CallBack_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CallBack_result.class, metaDataMap);
    }

    public CallBack_result() {
    }

    public CallBack_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CallBack_result(CallBack_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public CallBack_result deepCopy() {
      return new CallBack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public CallBack_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CallBack_result)
        return this.equals((CallBack_result)that);
      return false;
    }

    public boolean equals(CallBack_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CallBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CallBack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CallBack_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CallBack_resultStandardScheme getScheme() {
        return new CallBack_resultStandardScheme();
      }
    }

    private static class CallBack_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CallBack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CallBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list10.size);
                  java.lang.String _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = iprot.readString();
                    struct.success.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CallBack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter13 : struct.success)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CallBack_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CallBack_resultTupleScheme getScheme() {
        return new CallBack_resultTupleScheme();
      }
    }

    private static class CallBack_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CallBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CallBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter14 : struct.success)
            {
              oprot.writeString(_iter14);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CallBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list15.size);
            java.lang.String _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readString();
              struct.success.add(_elem16);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_args");

    private static final org.apache.thrift.protocol.TField NEW_ARTICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("newArticle", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new put_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new put_argsTupleSchemeFactory();

    public Article newArticle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_ARTICLE((short)1, "newArticle");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_ARTICLE
            return NEW_ARTICLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_ARTICLE, new org.apache.thrift.meta_data.FieldMetaData("newArticle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Article.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
    }

    public put_args() {
    }

    public put_args(
      Article newArticle)
    {
      this();
      this.newArticle = newArticle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_args(put_args other) {
      if (other.isSetNewArticle()) {
        this.newArticle = new Article(other.newArticle);
      }
    }

    public put_args deepCopy() {
      return new put_args(this);
    }

    @Override
    public void clear() {
      this.newArticle = null;
    }

    public Article getNewArticle() {
      return this.newArticle;
    }

    public put_args setNewArticle(Article newArticle) {
      this.newArticle = newArticle;
      return this;
    }

    public void unsetNewArticle() {
      this.newArticle = null;
    }

    /** Returns true if field newArticle is set (has been assigned a value) and false otherwise */
    public boolean isSetNewArticle() {
      return this.newArticle != null;
    }

    public void setNewArticleIsSet(boolean value) {
      if (!value) {
        this.newArticle = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NEW_ARTICLE:
        if (value == null) {
          unsetNewArticle();
        } else {
          setNewArticle((Article)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_ARTICLE:
        return getNewArticle();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NEW_ARTICLE:
        return isSetNewArticle();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof put_args)
        return this.equals((put_args)that);
      return false;
    }

    public boolean equals(put_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_newArticle = true && this.isSetNewArticle();
      boolean that_present_newArticle = true && that.isSetNewArticle();
      if (this_present_newArticle || that_present_newArticle) {
        if (!(this_present_newArticle && that_present_newArticle))
          return false;
        if (!this.newArticle.equals(that.newArticle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNewArticle()) ? 131071 : 524287);
      if (isSetNewArticle())
        hashCode = hashCode * 8191 + newArticle.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNewArticle()).compareTo(other.isSetNewArticle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewArticle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newArticle, other.newArticle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("put_args(");
      boolean first = true;

      sb.append("newArticle:");
      if (this.newArticle == null) {
        sb.append("null");
      } else {
        sb.append(this.newArticle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newArticle != null) {
        newArticle.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public put_argsStandardScheme getScheme() {
        return new put_argsStandardScheme();
      }
    }

    private static class put_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<put_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_ARTICLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newArticle = new Article();
                struct.newArticle.read(iprot);
                struct.setNewArticleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newArticle != null) {
          oprot.writeFieldBegin(NEW_ARTICLE_FIELD_DESC);
          struct.newArticle.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public put_argsTupleScheme getScheme() {
        return new put_argsTupleScheme();
      }
    }

    private static class put_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<put_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNewArticle()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewArticle()) {
          struct.newArticle.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newArticle = new Article();
          struct.newArticle.read(iprot);
          struct.setNewArticleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable, Comparable<put_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new put_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new put_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
    }

    public put_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_result(put_result other) {
    }

    public put_result deepCopy() {
      return new put_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof put_result)
        return this.equals((put_result)that);
      return false;
    }

    public boolean equals(put_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("put_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public put_resultStandardScheme getScheme() {
        return new put_resultStandardScheme();
      }
    }

    private static class put_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<put_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public put_resultTupleScheme getScheme() {
        return new put_resultTupleScheme();
      }
    }

    private static class put_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<put_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAccessToken_args implements org.apache.thrift.TBase<GetAccessToken_args, GetAccessToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccessToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccessToken_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAccessToken_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAccessToken_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccessToken_args.class, metaDataMap);
    }

    public GetAccessToken_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccessToken_args(GetAccessToken_args other) {
    }

    public GetAccessToken_args deepCopy() {
      return new GetAccessToken_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccessToken_args)
        return this.equals((GetAccessToken_args)that);
      return false;
    }

    public boolean equals(GetAccessToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetAccessToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAccessToken_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccessToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAccessToken_argsStandardScheme getScheme() {
        return new GetAccessToken_argsStandardScheme();
      }
    }

    private static class GetAccessToken_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAccessToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccessToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccessToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccessToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAccessToken_argsTupleScheme getScheme() {
        return new GetAccessToken_argsTupleScheme();
      }
    }

    private static class GetAccessToken_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAccessToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccessToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccessToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAccessToken_result implements org.apache.thrift.TBase<GetAccessToken_result, GetAccessToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccessToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccessToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAccessToken_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAccessToken_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccessToken_result.class, metaDataMap);
    }

    public GetAccessToken_result() {
    }

    public GetAccessToken_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccessToken_result(GetAccessToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetAccessToken_result deepCopy() {
      return new GetAccessToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public GetAccessToken_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccessToken_result)
        return this.equals((GetAccessToken_result)that);
      return false;
    }

    public boolean equals(GetAccessToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetAccessToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAccessToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccessToken_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAccessToken_resultStandardScheme getScheme() {
        return new GetAccessToken_resultStandardScheme();
      }
    }

    private static class GetAccessToken_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAccessToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccessToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccessToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccessToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAccessToken_resultTupleScheme getScheme() {
        return new GetAccessToken_resultTupleScheme();
      }
    }

    private static class GetAccessToken_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAccessToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccessToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccessToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetJsapiTicket_args implements org.apache.thrift.TBase<GetJsapiTicket_args, GetJsapiTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetJsapiTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetJsapiTicket_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetJsapiTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetJsapiTicket_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetJsapiTicket_args.class, metaDataMap);
    }

    public GetJsapiTicket_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetJsapiTicket_args(GetJsapiTicket_args other) {
    }

    public GetJsapiTicket_args deepCopy() {
      return new GetJsapiTicket_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetJsapiTicket_args)
        return this.equals((GetJsapiTicket_args)that);
      return false;
    }

    public boolean equals(GetJsapiTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetJsapiTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetJsapiTicket_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetJsapiTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsapiTicket_argsStandardScheme getScheme() {
        return new GetJsapiTicket_argsStandardScheme();
      }
    }

    private static class GetJsapiTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetJsapiTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetJsapiTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetJsapiTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetJsapiTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsapiTicket_argsTupleScheme getScheme() {
        return new GetJsapiTicket_argsTupleScheme();
      }
    }

    private static class GetJsapiTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetJsapiTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetJsapiTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetJsapiTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetJsapiTicket_result implements org.apache.thrift.TBase<GetJsapiTicket_result, GetJsapiTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetJsapiTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetJsapiTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetJsapiTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetJsapiTicket_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetJsapiTicket_result.class, metaDataMap);
    }

    public GetJsapiTicket_result() {
    }

    public GetJsapiTicket_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetJsapiTicket_result(GetJsapiTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetJsapiTicket_result deepCopy() {
      return new GetJsapiTicket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public GetJsapiTicket_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetJsapiTicket_result)
        return this.equals((GetJsapiTicket_result)that);
      return false;
    }

    public boolean equals(GetJsapiTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetJsapiTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetJsapiTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetJsapiTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsapiTicket_resultStandardScheme getScheme() {
        return new GetJsapiTicket_resultStandardScheme();
      }
    }

    private static class GetJsapiTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetJsapiTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetJsapiTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetJsapiTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetJsapiTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsapiTicket_resultTupleScheme getScheme() {
        return new GetJsapiTicket_resultTupleScheme();
      }
    }

    private static class GetJsapiTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetJsapiTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetJsapiTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetJsapiTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class JsapiSign_args implements org.apache.thrift.TBase<JsapiSign_args, JsapiSign_args._Fields>, java.io.Serializable, Cloneable, Comparable<JsapiSign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JsapiSign_args");

    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JsapiSign_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JsapiSign_argsTupleSchemeFactory();

    public java.lang.String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URL((short)1, "url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JsapiSign_args.class, metaDataMap);
    }

    public JsapiSign_args() {
    }

    public JsapiSign_args(
      java.lang.String url)
    {
      this();
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public JsapiSign_args(JsapiSign_args other) {
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    public JsapiSign_args deepCopy() {
      return new JsapiSign_args(this);
    }

    @Override
    public void clear() {
      this.url = null;
    }

    public java.lang.String getUrl() {
      return this.url;
    }

    public JsapiSign_args setUrl(java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case URL:
        return getUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case URL:
        return isSetUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof JsapiSign_args)
        return this.equals((JsapiSign_args)that);
      return false;
    }

    public boolean equals(JsapiSign_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(JsapiSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("JsapiSign_args(");
      boolean first = true;

      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class JsapiSign_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public JsapiSign_argsStandardScheme getScheme() {
        return new JsapiSign_argsStandardScheme();
      }
    }

    private static class JsapiSign_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<JsapiSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, JsapiSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, JsapiSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class JsapiSign_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public JsapiSign_argsTupleScheme getScheme() {
        return new JsapiSign_argsTupleScheme();
      }
    }

    private static class JsapiSign_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<JsapiSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, JsapiSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUrl()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, JsapiSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class JsapiSign_result implements org.apache.thrift.TBase<JsapiSign_result, JsapiSign_result._Fields>, java.io.Serializable, Cloneable, Comparable<JsapiSign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JsapiSign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JsapiSign_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JsapiSign_resultTupleSchemeFactory();

    public JsapiSignData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JsapiSignData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JsapiSign_result.class, metaDataMap);
    }

    public JsapiSign_result() {
    }

    public JsapiSign_result(
      JsapiSignData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public JsapiSign_result(JsapiSign_result other) {
      if (other.isSetSuccess()) {
        this.success = new JsapiSignData(other.success);
      }
    }

    public JsapiSign_result deepCopy() {
      return new JsapiSign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public JsapiSignData getSuccess() {
      return this.success;
    }

    public JsapiSign_result setSuccess(JsapiSignData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JsapiSignData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof JsapiSign_result)
        return this.equals((JsapiSign_result)that);
      return false;
    }

    public boolean equals(JsapiSign_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(JsapiSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("JsapiSign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class JsapiSign_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public JsapiSign_resultStandardScheme getScheme() {
        return new JsapiSign_resultStandardScheme();
      }
    }

    private static class JsapiSign_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<JsapiSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, JsapiSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JsapiSignData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, JsapiSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class JsapiSign_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public JsapiSign_resultTupleScheme getScheme() {
        return new JsapiSign_resultTupleScheme();
      }
    }

    private static class JsapiSign_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<JsapiSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, JsapiSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, JsapiSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new JsapiSignData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class IsWeixinServer_args implements org.apache.thrift.TBase<IsWeixinServer_args, IsWeixinServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<IsWeixinServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsWeixinServer_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ECHOSTR_FIELD_DESC = new org.apache.thrift.protocol.TField("echostr", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField NONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("nonce", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IsWeixinServer_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IsWeixinServer_argsTupleSchemeFactory();

    public java.lang.String token; // required
    public java.lang.String echostr; // required
    public java.lang.String signature; // required
    public java.lang.String timestamp; // required
    public java.lang.String nonce; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      ECHOSTR((short)2, "echostr"),
      SIGNATURE((short)3, "signature"),
      TIMESTAMP((short)4, "timestamp"),
      NONCE((short)5, "nonce");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // ECHOSTR
            return ECHOSTR;
          case 3: // SIGNATURE
            return SIGNATURE;
          case 4: // TIMESTAMP
            return TIMESTAMP;
          case 5: // NONCE
            return NONCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ECHOSTR, new org.apache.thrift.meta_data.FieldMetaData("echostr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NONCE, new org.apache.thrift.meta_data.FieldMetaData("nonce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsWeixinServer_args.class, metaDataMap);
    }

    public IsWeixinServer_args() {
    }

    public IsWeixinServer_args(
      java.lang.String token,
      java.lang.String echostr,
      java.lang.String signature,
      java.lang.String timestamp,
      java.lang.String nonce)
    {
      this();
      this.token = token;
      this.echostr = echostr;
      this.signature = signature;
      this.timestamp = timestamp;
      this.nonce = nonce;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsWeixinServer_args(IsWeixinServer_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetEchostr()) {
        this.echostr = other.echostr;
      }
      if (other.isSetSignature()) {
        this.signature = other.signature;
      }
      if (other.isSetTimestamp()) {
        this.timestamp = other.timestamp;
      }
      if (other.isSetNonce()) {
        this.nonce = other.nonce;
      }
    }

    public IsWeixinServer_args deepCopy() {
      return new IsWeixinServer_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.echostr = null;
      this.signature = null;
      this.timestamp = null;
      this.nonce = null;
    }

    public java.lang.String getToken() {
      return this.token;
    }

    public IsWeixinServer_args setToken(java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public java.lang.String getEchostr() {
      return this.echostr;
    }

    public IsWeixinServer_args setEchostr(java.lang.String echostr) {
      this.echostr = echostr;
      return this;
    }

    public void unsetEchostr() {
      this.echostr = null;
    }

    /** Returns true if field echostr is set (has been assigned a value) and false otherwise */
    public boolean isSetEchostr() {
      return this.echostr != null;
    }

    public void setEchostrIsSet(boolean value) {
      if (!value) {
        this.echostr = null;
      }
    }

    public java.lang.String getSignature() {
      return this.signature;
    }

    public IsWeixinServer_args setSignature(java.lang.String signature) {
      this.signature = signature;
      return this;
    }

    public void unsetSignature() {
      this.signature = null;
    }

    /** Returns true if field signature is set (has been assigned a value) and false otherwise */
    public boolean isSetSignature() {
      return this.signature != null;
    }

    public void setSignatureIsSet(boolean value) {
      if (!value) {
        this.signature = null;
      }
    }

    public java.lang.String getTimestamp() {
      return this.timestamp;
    }

    public IsWeixinServer_args setTimestamp(java.lang.String timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public java.lang.String getNonce() {
      return this.nonce;
    }

    public IsWeixinServer_args setNonce(java.lang.String nonce) {
      this.nonce = nonce;
      return this;
    }

    public void unsetNonce() {
      this.nonce = null;
    }

    /** Returns true if field nonce is set (has been assigned a value) and false otherwise */
    public boolean isSetNonce() {
      return this.nonce != null;
    }

    public void setNonceIsSet(boolean value) {
      if (!value) {
        this.nonce = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((java.lang.String)value);
        }
        break;

      case ECHOSTR:
        if (value == null) {
          unsetEchostr();
        } else {
          setEchostr((java.lang.String)value);
        }
        break;

      case SIGNATURE:
        if (value == null) {
          unsetSignature();
        } else {
          setSignature((java.lang.String)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((java.lang.String)value);
        }
        break;

      case NONCE:
        if (value == null) {
          unsetNonce();
        } else {
          setNonce((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case ECHOSTR:
        return getEchostr();

      case SIGNATURE:
        return getSignature();

      case TIMESTAMP:
        return getTimestamp();

      case NONCE:
        return getNonce();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case ECHOSTR:
        return isSetEchostr();
      case SIGNATURE:
        return isSetSignature();
      case TIMESTAMP:
        return isSetTimestamp();
      case NONCE:
        return isSetNonce();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof IsWeixinServer_args)
        return this.equals((IsWeixinServer_args)that);
      return false;
    }

    public boolean equals(IsWeixinServer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_echostr = true && this.isSetEchostr();
      boolean that_present_echostr = true && that.isSetEchostr();
      if (this_present_echostr || that_present_echostr) {
        if (!(this_present_echostr && that_present_echostr))
          return false;
        if (!this.echostr.equals(that.echostr))
          return false;
      }

      boolean this_present_signature = true && this.isSetSignature();
      boolean that_present_signature = true && that.isSetSignature();
      if (this_present_signature || that_present_signature) {
        if (!(this_present_signature && that_present_signature))
          return false;
        if (!this.signature.equals(that.signature))
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      boolean this_present_nonce = true && this.isSetNonce();
      boolean that_present_nonce = true && that.isSetNonce();
      if (this_present_nonce || that_present_nonce) {
        if (!(this_present_nonce && that_present_nonce))
          return false;
        if (!this.nonce.equals(that.nonce))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      hashCode = hashCode * 8191 + ((isSetEchostr()) ? 131071 : 524287);
      if (isSetEchostr())
        hashCode = hashCode * 8191 + echostr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
      if (isSetSignature())
        hashCode = hashCode * 8191 + signature.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
      if (isSetTimestamp())
        hashCode = hashCode * 8191 + timestamp.hashCode();

      hashCode = hashCode * 8191 + ((isSetNonce()) ? 131071 : 524287);
      if (isSetNonce())
        hashCode = hashCode * 8191 + nonce.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(IsWeixinServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEchostr()).compareTo(other.isSetEchostr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEchostr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.echostr, other.echostr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNonce()).compareTo(other.isSetNonce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNonce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonce, other.nonce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("IsWeixinServer_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("echostr:");
      if (this.echostr == null) {
        sb.append("null");
      } else {
        sb.append(this.echostr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nonce:");
      if (this.nonce == null) {
        sb.append("null");
      } else {
        sb.append(this.nonce);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsWeixinServer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IsWeixinServer_argsStandardScheme getScheme() {
        return new IsWeixinServer_argsStandardScheme();
      }
    }

    private static class IsWeixinServer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<IsWeixinServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsWeixinServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ECHOSTR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.echostr = iprot.readString();
                struct.setEchostrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SIGNATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.signature = iprot.readString();
                struct.setSignatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timestamp = iprot.readString();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nonce = iprot.readString();
                struct.setNonceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsWeixinServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.echostr != null) {
          oprot.writeFieldBegin(ECHOSTR_FIELD_DESC);
          oprot.writeString(struct.echostr);
          oprot.writeFieldEnd();
        }
        if (struct.signature != null) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.timestamp);
          oprot.writeFieldEnd();
        }
        if (struct.nonce != null) {
          oprot.writeFieldBegin(NONCE_FIELD_DESC);
          oprot.writeString(struct.nonce);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsWeixinServer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IsWeixinServer_argsTupleScheme getScheme() {
        return new IsWeixinServer_argsTupleScheme();
      }
    }

    private static class IsWeixinServer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<IsWeixinServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsWeixinServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetEchostr()) {
          optionals.set(1);
        }
        if (struct.isSetSignature()) {
          optionals.set(2);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(3);
        }
        if (struct.isSetNonce()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetEchostr()) {
          oprot.writeString(struct.echostr);
        }
        if (struct.isSetSignature()) {
          oprot.writeString(struct.signature);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeString(struct.timestamp);
        }
        if (struct.isSetNonce()) {
          oprot.writeString(struct.nonce);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsWeixinServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.echostr = iprot.readString();
          struct.setEchostrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.signature = iprot.readString();
          struct.setSignatureIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timestamp = iprot.readString();
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(4)) {
          struct.nonce = iprot.readString();
          struct.setNonceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class IsWeixinServer_result implements org.apache.thrift.TBase<IsWeixinServer_result, IsWeixinServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<IsWeixinServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsWeixinServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IsWeixinServer_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IsWeixinServer_resultTupleSchemeFactory();

    public IsWeixinServerData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsWeixinServerData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsWeixinServer_result.class, metaDataMap);
    }

    public IsWeixinServer_result() {
    }

    public IsWeixinServer_result(
      IsWeixinServerData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsWeixinServer_result(IsWeixinServer_result other) {
      if (other.isSetSuccess()) {
        this.success = new IsWeixinServerData(other.success);
      }
    }

    public IsWeixinServer_result deepCopy() {
      return new IsWeixinServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IsWeixinServerData getSuccess() {
      return this.success;
    }

    public IsWeixinServer_result setSuccess(IsWeixinServerData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IsWeixinServerData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof IsWeixinServer_result)
        return this.equals((IsWeixinServer_result)that);
      return false;
    }

    public boolean equals(IsWeixinServer_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(IsWeixinServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("IsWeixinServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsWeixinServer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IsWeixinServer_resultStandardScheme getScheme() {
        return new IsWeixinServer_resultStandardScheme();
      }
    }

    private static class IsWeixinServer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<IsWeixinServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsWeixinServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IsWeixinServerData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsWeixinServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsWeixinServer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IsWeixinServer_resultTupleScheme getScheme() {
        return new IsWeixinServer_resultTupleScheme();
      }
    }

    private static class IsWeixinServer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<IsWeixinServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsWeixinServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsWeixinServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IsWeixinServerData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ParseTemplateToMixedMessages_args implements org.apache.thrift.TBase<ParseTemplateToMixedMessages_args, ParseTemplateToMixedMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<ParseTemplateToMixedMessages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParseTemplateToMixedMessages_args");

    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ParseTemplateToMixedMessages_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ParseTemplateToMixedMessages_argsTupleSchemeFactory();

    public java.lang.String body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BODY((short)1, "body");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ParseTemplateToMixedMessages_args.class, metaDataMap);
    }

    public ParseTemplateToMixedMessages_args() {
    }

    public ParseTemplateToMixedMessages_args(
      java.lang.String body)
    {
      this();
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ParseTemplateToMixedMessages_args(ParseTemplateToMixedMessages_args other) {
      if (other.isSetBody()) {
        this.body = other.body;
      }
    }

    public ParseTemplateToMixedMessages_args deepCopy() {
      return new ParseTemplateToMixedMessages_args(this);
    }

    @Override
    public void clear() {
      this.body = null;
    }

    public java.lang.String getBody() {
      return this.body;
    }

    public ParseTemplateToMixedMessages_args setBody(java.lang.String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BODY:
        return getBody();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BODY:
        return isSetBody();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ParseTemplateToMixedMessages_args)
        return this.equals((ParseTemplateToMixedMessages_args)that);
      return false;
    }

    public boolean equals(ParseTemplateToMixedMessages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBody()) ? 131071 : 524287);
      if (isSetBody())
        hashCode = hashCode * 8191 + body.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ParseTemplateToMixedMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ParseTemplateToMixedMessages_args(");
      boolean first = true;

      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ParseTemplateToMixedMessages_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ParseTemplateToMixedMessages_argsStandardScheme getScheme() {
        return new ParseTemplateToMixedMessages_argsStandardScheme();
      }
    }

    private static class ParseTemplateToMixedMessages_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ParseTemplateToMixedMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ParseTemplateToMixedMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ParseTemplateToMixedMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ParseTemplateToMixedMessages_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ParseTemplateToMixedMessages_argsTupleScheme getScheme() {
        return new ParseTemplateToMixedMessages_argsTupleScheme();
      }
    }

    private static class ParseTemplateToMixedMessages_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ParseTemplateToMixedMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ParseTemplateToMixedMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBody()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ParseTemplateToMixedMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ParseTemplateToMixedMessages_result implements org.apache.thrift.TBase<ParseTemplateToMixedMessages_result, ParseTemplateToMixedMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<ParseTemplateToMixedMessages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParseTemplateToMixedMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ParseTemplateToMixedMessages_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ParseTemplateToMixedMessages_resultTupleSchemeFactory();

    public ParseTemplateToMixedMessagesData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParseTemplateToMixedMessagesData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ParseTemplateToMixedMessages_result.class, metaDataMap);
    }

    public ParseTemplateToMixedMessages_result() {
    }

    public ParseTemplateToMixedMessages_result(
      ParseTemplateToMixedMessagesData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ParseTemplateToMixedMessages_result(ParseTemplateToMixedMessages_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParseTemplateToMixedMessagesData(other.success);
      }
    }

    public ParseTemplateToMixedMessages_result deepCopy() {
      return new ParseTemplateToMixedMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ParseTemplateToMixedMessagesData getSuccess() {
      return this.success;
    }

    public ParseTemplateToMixedMessages_result setSuccess(ParseTemplateToMixedMessagesData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParseTemplateToMixedMessagesData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ParseTemplateToMixedMessages_result)
        return this.equals((ParseTemplateToMixedMessages_result)that);
      return false;
    }

    public boolean equals(ParseTemplateToMixedMessages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ParseTemplateToMixedMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ParseTemplateToMixedMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ParseTemplateToMixedMessages_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ParseTemplateToMixedMessages_resultStandardScheme getScheme() {
        return new ParseTemplateToMixedMessages_resultStandardScheme();
      }
    }

    private static class ParseTemplateToMixedMessages_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ParseTemplateToMixedMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ParseTemplateToMixedMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParseTemplateToMixedMessagesData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ParseTemplateToMixedMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ParseTemplateToMixedMessages_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ParseTemplateToMixedMessages_resultTupleScheme getScheme() {
        return new ParseTemplateToMixedMessages_resultTupleScheme();
      }
    }

    private static class ParseTemplateToMixedMessages_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ParseTemplateToMixedMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ParseTemplateToMixedMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ParseTemplateToMixedMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ParseTemplateToMixedMessagesData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SendTmplateMessage_args implements org.apache.thrift.TBase<SendTmplateMessage_args, SendTmplateMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<SendTmplateMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendTmplateMessage_args");

    private static final org.apache.thrift.protocol.TField TPL_FIELD_DESC = new org.apache.thrift.protocol.TField("tpl", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SendTmplateMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SendTmplateMessage_argsTupleSchemeFactory();

    public TemplateMsgData tpl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TPL((short)1, "tpl");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TPL
            return TPL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TPL, new org.apache.thrift.meta_data.FieldMetaData("tpl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateMsgData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendTmplateMessage_args.class, metaDataMap);
    }

    public SendTmplateMessage_args() {
    }

    public SendTmplateMessage_args(
      TemplateMsgData tpl)
    {
      this();
      this.tpl = tpl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SendTmplateMessage_args(SendTmplateMessage_args other) {
      if (other.isSetTpl()) {
        this.tpl = new TemplateMsgData(other.tpl);
      }
    }

    public SendTmplateMessage_args deepCopy() {
      return new SendTmplateMessage_args(this);
    }

    @Override
    public void clear() {
      this.tpl = null;
    }

    public TemplateMsgData getTpl() {
      return this.tpl;
    }

    public SendTmplateMessage_args setTpl(TemplateMsgData tpl) {
      this.tpl = tpl;
      return this;
    }

    public void unsetTpl() {
      this.tpl = null;
    }

    /** Returns true if field tpl is set (has been assigned a value) and false otherwise */
    public boolean isSetTpl() {
      return this.tpl != null;
    }

    public void setTplIsSet(boolean value) {
      if (!value) {
        this.tpl = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TPL:
        if (value == null) {
          unsetTpl();
        } else {
          setTpl((TemplateMsgData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TPL:
        return getTpl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TPL:
        return isSetTpl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SendTmplateMessage_args)
        return this.equals((SendTmplateMessage_args)that);
      return false;
    }

    public boolean equals(SendTmplateMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tpl = true && this.isSetTpl();
      boolean that_present_tpl = true && that.isSetTpl();
      if (this_present_tpl || that_present_tpl) {
        if (!(this_present_tpl && that_present_tpl))
          return false;
        if (!this.tpl.equals(that.tpl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTpl()) ? 131071 : 524287);
      if (isSetTpl())
        hashCode = hashCode * 8191 + tpl.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SendTmplateMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTpl()).compareTo(other.isSetTpl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTpl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tpl, other.tpl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SendTmplateMessage_args(");
      boolean first = true;

      sb.append("tpl:");
      if (this.tpl == null) {
        sb.append("null");
      } else {
        sb.append(this.tpl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tpl != null) {
        tpl.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SendTmplateMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SendTmplateMessage_argsStandardScheme getScheme() {
        return new SendTmplateMessage_argsStandardScheme();
      }
    }

    private static class SendTmplateMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SendTmplateMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SendTmplateMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TPL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tpl = new TemplateMsgData();
                struct.tpl.read(iprot);
                struct.setTplIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SendTmplateMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tpl != null) {
          oprot.writeFieldBegin(TPL_FIELD_DESC);
          struct.tpl.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SendTmplateMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SendTmplateMessage_argsTupleScheme getScheme() {
        return new SendTmplateMessage_argsTupleScheme();
      }
    }

    private static class SendTmplateMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SendTmplateMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SendTmplateMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTpl()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTpl()) {
          struct.tpl.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SendTmplateMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tpl = new TemplateMsgData();
          struct.tpl.read(iprot);
          struct.setTplIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SendTmplateMessage_result implements org.apache.thrift.TBase<SendTmplateMessage_result, SendTmplateMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<SendTmplateMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendTmplateMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SendTmplateMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SendTmplateMessage_resultTupleSchemeFactory();

    public SendTemplateResponseData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SendTemplateResponseData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendTmplateMessage_result.class, metaDataMap);
    }

    public SendTmplateMessage_result() {
    }

    public SendTmplateMessage_result(
      SendTemplateResponseData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SendTmplateMessage_result(SendTmplateMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendTemplateResponseData(other.success);
      }
    }

    public SendTmplateMessage_result deepCopy() {
      return new SendTmplateMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SendTemplateResponseData getSuccess() {
      return this.success;
    }

    public SendTmplateMessage_result setSuccess(SendTemplateResponseData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SendTemplateResponseData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SendTmplateMessage_result)
        return this.equals((SendTmplateMessage_result)that);
      return false;
    }

    public boolean equals(SendTmplateMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SendTmplateMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SendTmplateMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SendTmplateMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SendTmplateMessage_resultStandardScheme getScheme() {
        return new SendTmplateMessage_resultStandardScheme();
      }
    }

    private static class SendTmplateMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SendTmplateMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SendTmplateMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SendTemplateResponseData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SendTmplateMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SendTmplateMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SendTmplateMessage_resultTupleScheme getScheme() {
        return new SendTmplateMessage_resultTupleScheme();
      }
    }

    private static class SendTmplateMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SendTmplateMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SendTmplateMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SendTmplateMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SendTemplateResponseData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetTextXml_args implements org.apache.thrift.TBase<GetTextXml_args, GetTextXml_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetTextXml_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTextXml_args");

    private static final org.apache.thrift.protocol.TField FROM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUserName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TO_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toUserName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetTextXml_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetTextXml_argsTupleSchemeFactory();

    public java.lang.String fromUserName; // required
    public java.lang.String toUserName; // required
    public java.lang.String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_USER_NAME((short)1, "fromUserName"),
      TO_USER_NAME((short)2, "toUserName"),
      CONTENT((short)3, "content");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_USER_NAME
            return FROM_USER_NAME;
          case 2: // TO_USER_NAME
            return TO_USER_NAME;
          case 3: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("toUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTextXml_args.class, metaDataMap);
    }

    public GetTextXml_args() {
    }

    public GetTextXml_args(
      java.lang.String fromUserName,
      java.lang.String toUserName,
      java.lang.String content)
    {
      this();
      this.fromUserName = fromUserName;
      this.toUserName = toUserName;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTextXml_args(GetTextXml_args other) {
      if (other.isSetFromUserName()) {
        this.fromUserName = other.fromUserName;
      }
      if (other.isSetToUserName()) {
        this.toUserName = other.toUserName;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public GetTextXml_args deepCopy() {
      return new GetTextXml_args(this);
    }

    @Override
    public void clear() {
      this.fromUserName = null;
      this.toUserName = null;
      this.content = null;
    }

    public java.lang.String getFromUserName() {
      return this.fromUserName;
    }

    public GetTextXml_args setFromUserName(java.lang.String fromUserName) {
      this.fromUserName = fromUserName;
      return this;
    }

    public void unsetFromUserName() {
      this.fromUserName = null;
    }

    /** Returns true if field fromUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetFromUserName() {
      return this.fromUserName != null;
    }

    public void setFromUserNameIsSet(boolean value) {
      if (!value) {
        this.fromUserName = null;
      }
    }

    public java.lang.String getToUserName() {
      return this.toUserName;
    }

    public GetTextXml_args setToUserName(java.lang.String toUserName) {
      this.toUserName = toUserName;
      return this;
    }

    public void unsetToUserName() {
      this.toUserName = null;
    }

    /** Returns true if field toUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetToUserName() {
      return this.toUserName != null;
    }

    public void setToUserNameIsSet(boolean value) {
      if (!value) {
        this.toUserName = null;
      }
    }

    public java.lang.String getContent() {
      return this.content;
    }

    public GetTextXml_args setContent(java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FROM_USER_NAME:
        if (value == null) {
          unsetFromUserName();
        } else {
          setFromUserName((java.lang.String)value);
        }
        break;

      case TO_USER_NAME:
        if (value == null) {
          unsetToUserName();
        } else {
          setToUserName((java.lang.String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_USER_NAME:
        return getFromUserName();

      case TO_USER_NAME:
        return getToUserName();

      case CONTENT:
        return getContent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FROM_USER_NAME:
        return isSetFromUserName();
      case TO_USER_NAME:
        return isSetToUserName();
      case CONTENT:
        return isSetContent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTextXml_args)
        return this.equals((GetTextXml_args)that);
      return false;
    }

    public boolean equals(GetTextXml_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fromUserName = true && this.isSetFromUserName();
      boolean that_present_fromUserName = true && that.isSetFromUserName();
      if (this_present_fromUserName || that_present_fromUserName) {
        if (!(this_present_fromUserName && that_present_fromUserName))
          return false;
        if (!this.fromUserName.equals(that.fromUserName))
          return false;
      }

      boolean this_present_toUserName = true && this.isSetToUserName();
      boolean that_present_toUserName = true && that.isSetToUserName();
      if (this_present_toUserName || that_present_toUserName) {
        if (!(this_present_toUserName && that_present_toUserName))
          return false;
        if (!this.toUserName.equals(that.toUserName))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFromUserName()) ? 131071 : 524287);
      if (isSetFromUserName())
        hashCode = hashCode * 8191 + fromUserName.hashCode();

      hashCode = hashCode * 8191 + ((isSetToUserName()) ? 131071 : 524287);
      if (isSetToUserName())
        hashCode = hashCode * 8191 + toUserName.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetTextXml_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFromUserName()).compareTo(other.isSetFromUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUserName, other.fromUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetToUserName()).compareTo(other.isSetToUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUserName, other.toUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetTextXml_args(");
      boolean first = true;

      sb.append("fromUserName:");
      if (this.fromUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.fromUserName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toUserName:");
      if (this.toUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.toUserName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTextXml_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetTextXml_argsStandardScheme getScheme() {
        return new GetTextXml_argsStandardScheme();
      }
    }

    private static class GetTextXml_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetTextXml_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTextXml_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromUserName = iprot.readString();
                struct.setFromUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.toUserName = iprot.readString();
                struct.setToUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTextXml_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fromUserName != null) {
          oprot.writeFieldBegin(FROM_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.fromUserName);
          oprot.writeFieldEnd();
        }
        if (struct.toUserName != null) {
          oprot.writeFieldBegin(TO_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.toUserName);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTextXml_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetTextXml_argsTupleScheme getScheme() {
        return new GetTextXml_argsTupleScheme();
      }
    }

    private static class GetTextXml_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetTextXml_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTextXml_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFromUserName()) {
          optionals.set(0);
        }
        if (struct.isSetToUserName()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFromUserName()) {
          oprot.writeString(struct.fromUserName);
        }
        if (struct.isSetToUserName()) {
          oprot.writeString(struct.toUserName);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTextXml_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fromUserName = iprot.readString();
          struct.setFromUserNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toUserName = iprot.readString();
          struct.setToUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetTextXml_result implements org.apache.thrift.TBase<GetTextXml_result, GetTextXml_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetTextXml_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTextXml_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetTextXml_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetTextXml_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTextXml_result.class, metaDataMap);
    }

    public GetTextXml_result() {
    }

    public GetTextXml_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTextXml_result(GetTextXml_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetTextXml_result deepCopy() {
      return new GetTextXml_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public GetTextXml_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTextXml_result)
        return this.equals((GetTextXml_result)that);
      return false;
    }

    public boolean equals(GetTextXml_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetTextXml_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetTextXml_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTextXml_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetTextXml_resultStandardScheme getScheme() {
        return new GetTextXml_resultStandardScheme();
      }
    }

    private static class GetTextXml_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetTextXml_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTextXml_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTextXml_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTextXml_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetTextXml_resultTupleScheme getScheme() {
        return new GetTextXml_resultTupleScheme();
      }
    }

    private static class GetTextXml_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetTextXml_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTextXml_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTextXml_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransferCustomerService_args implements org.apache.thrift.TBase<TransferCustomerService_args, TransferCustomerService_args._Fields>, java.io.Serializable, Cloneable, Comparable<TransferCustomerService_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransferCustomerService_args");

    private static final org.apache.thrift.protocol.TField FROM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUserName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TO_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toUserName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KF_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("kfAccount", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransferCustomerService_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransferCustomerService_argsTupleSchemeFactory();

    public java.lang.String fromUserName; // required
    public java.lang.String toUserName; // required
    public java.lang.String kfAccount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_USER_NAME((short)1, "fromUserName"),
      TO_USER_NAME((short)2, "toUserName"),
      KF_ACCOUNT((short)3, "kfAccount");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_USER_NAME
            return FROM_USER_NAME;
          case 2: // TO_USER_NAME
            return TO_USER_NAME;
          case 3: // KF_ACCOUNT
            return KF_ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("toUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KF_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("kfAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransferCustomerService_args.class, metaDataMap);
    }

    public TransferCustomerService_args() {
    }

    public TransferCustomerService_args(
      java.lang.String fromUserName,
      java.lang.String toUserName,
      java.lang.String kfAccount)
    {
      this();
      this.fromUserName = fromUserName;
      this.toUserName = toUserName;
      this.kfAccount = kfAccount;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransferCustomerService_args(TransferCustomerService_args other) {
      if (other.isSetFromUserName()) {
        this.fromUserName = other.fromUserName;
      }
      if (other.isSetToUserName()) {
        this.toUserName = other.toUserName;
      }
      if (other.isSetKfAccount()) {
        this.kfAccount = other.kfAccount;
      }
    }

    public TransferCustomerService_args deepCopy() {
      return new TransferCustomerService_args(this);
    }

    @Override
    public void clear() {
      this.fromUserName = null;
      this.toUserName = null;
      this.kfAccount = null;
    }

    public java.lang.String getFromUserName() {
      return this.fromUserName;
    }

    public TransferCustomerService_args setFromUserName(java.lang.String fromUserName) {
      this.fromUserName = fromUserName;
      return this;
    }

    public void unsetFromUserName() {
      this.fromUserName = null;
    }

    /** Returns true if field fromUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetFromUserName() {
      return this.fromUserName != null;
    }

    public void setFromUserNameIsSet(boolean value) {
      if (!value) {
        this.fromUserName = null;
      }
    }

    public java.lang.String getToUserName() {
      return this.toUserName;
    }

    public TransferCustomerService_args setToUserName(java.lang.String toUserName) {
      this.toUserName = toUserName;
      return this;
    }

    public void unsetToUserName() {
      this.toUserName = null;
    }

    /** Returns true if field toUserName is set (has been assigned a value) and false otherwise */
    public boolean isSetToUserName() {
      return this.toUserName != null;
    }

    public void setToUserNameIsSet(boolean value) {
      if (!value) {
        this.toUserName = null;
      }
    }

    public java.lang.String getKfAccount() {
      return this.kfAccount;
    }

    public TransferCustomerService_args setKfAccount(java.lang.String kfAccount) {
      this.kfAccount = kfAccount;
      return this;
    }

    public void unsetKfAccount() {
      this.kfAccount = null;
    }

    /** Returns true if field kfAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetKfAccount() {
      return this.kfAccount != null;
    }

    public void setKfAccountIsSet(boolean value) {
      if (!value) {
        this.kfAccount = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FROM_USER_NAME:
        if (value == null) {
          unsetFromUserName();
        } else {
          setFromUserName((java.lang.String)value);
        }
        break;

      case TO_USER_NAME:
        if (value == null) {
          unsetToUserName();
        } else {
          setToUserName((java.lang.String)value);
        }
        break;

      case KF_ACCOUNT:
        if (value == null) {
          unsetKfAccount();
        } else {
          setKfAccount((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_USER_NAME:
        return getFromUserName();

      case TO_USER_NAME:
        return getToUserName();

      case KF_ACCOUNT:
        return getKfAccount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FROM_USER_NAME:
        return isSetFromUserName();
      case TO_USER_NAME:
        return isSetToUserName();
      case KF_ACCOUNT:
        return isSetKfAccount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransferCustomerService_args)
        return this.equals((TransferCustomerService_args)that);
      return false;
    }

    public boolean equals(TransferCustomerService_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fromUserName = true && this.isSetFromUserName();
      boolean that_present_fromUserName = true && that.isSetFromUserName();
      if (this_present_fromUserName || that_present_fromUserName) {
        if (!(this_present_fromUserName && that_present_fromUserName))
          return false;
        if (!this.fromUserName.equals(that.fromUserName))
          return false;
      }

      boolean this_present_toUserName = true && this.isSetToUserName();
      boolean that_present_toUserName = true && that.isSetToUserName();
      if (this_present_toUserName || that_present_toUserName) {
        if (!(this_present_toUserName && that_present_toUserName))
          return false;
        if (!this.toUserName.equals(that.toUserName))
          return false;
      }

      boolean this_present_kfAccount = true && this.isSetKfAccount();
      boolean that_present_kfAccount = true && that.isSetKfAccount();
      if (this_present_kfAccount || that_present_kfAccount) {
        if (!(this_present_kfAccount && that_present_kfAccount))
          return false;
        if (!this.kfAccount.equals(that.kfAccount))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFromUserName()) ? 131071 : 524287);
      if (isSetFromUserName())
        hashCode = hashCode * 8191 + fromUserName.hashCode();

      hashCode = hashCode * 8191 + ((isSetToUserName()) ? 131071 : 524287);
      if (isSetToUserName())
        hashCode = hashCode * 8191 + toUserName.hashCode();

      hashCode = hashCode * 8191 + ((isSetKfAccount()) ? 131071 : 524287);
      if (isSetKfAccount())
        hashCode = hashCode * 8191 + kfAccount.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransferCustomerService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFromUserName()).compareTo(other.isSetFromUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUserName, other.fromUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetToUserName()).compareTo(other.isSetToUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUserName, other.toUserName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKfAccount()).compareTo(other.isSetKfAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKfAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kfAccount, other.kfAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransferCustomerService_args(");
      boolean first = true;

      sb.append("fromUserName:");
      if (this.fromUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.fromUserName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toUserName:");
      if (this.toUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.toUserName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kfAccount:");
      if (this.kfAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.kfAccount);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransferCustomerService_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransferCustomerService_argsStandardScheme getScheme() {
        return new TransferCustomerService_argsStandardScheme();
      }
    }

    private static class TransferCustomerService_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransferCustomerService_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransferCustomerService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromUserName = iprot.readString();
                struct.setFromUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.toUserName = iprot.readString();
                struct.setToUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KF_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.kfAccount = iprot.readString();
                struct.setKfAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransferCustomerService_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fromUserName != null) {
          oprot.writeFieldBegin(FROM_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.fromUserName);
          oprot.writeFieldEnd();
        }
        if (struct.toUserName != null) {
          oprot.writeFieldBegin(TO_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.toUserName);
          oprot.writeFieldEnd();
        }
        if (struct.kfAccount != null) {
          oprot.writeFieldBegin(KF_ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.kfAccount);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransferCustomerService_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransferCustomerService_argsTupleScheme getScheme() {
        return new TransferCustomerService_argsTupleScheme();
      }
    }

    private static class TransferCustomerService_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransferCustomerService_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransferCustomerService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFromUserName()) {
          optionals.set(0);
        }
        if (struct.isSetToUserName()) {
          optionals.set(1);
        }
        if (struct.isSetKfAccount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFromUserName()) {
          oprot.writeString(struct.fromUserName);
        }
        if (struct.isSetToUserName()) {
          oprot.writeString(struct.toUserName);
        }
        if (struct.isSetKfAccount()) {
          oprot.writeString(struct.kfAccount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransferCustomerService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fromUserName = iprot.readString();
          struct.setFromUserNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toUserName = iprot.readString();
          struct.setToUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.kfAccount = iprot.readString();
          struct.setKfAccountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TransferCustomerService_result implements org.apache.thrift.TBase<TransferCustomerService_result, TransferCustomerService_result._Fields>, java.io.Serializable, Cloneable, Comparable<TransferCustomerService_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransferCustomerService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransferCustomerService_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransferCustomerService_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransferCustomerService_result.class, metaDataMap);
    }

    public TransferCustomerService_result() {
    }

    public TransferCustomerService_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TransferCustomerService_result(TransferCustomerService_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public TransferCustomerService_result deepCopy() {
      return new TransferCustomerService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public TransferCustomerService_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TransferCustomerService_result)
        return this.equals((TransferCustomerService_result)that);
      return false;
    }

    public boolean equals(TransferCustomerService_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TransferCustomerService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TransferCustomerService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TransferCustomerService_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransferCustomerService_resultStandardScheme getScheme() {
        return new TransferCustomerService_resultStandardScheme();
      }
    }

    private static class TransferCustomerService_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransferCustomerService_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TransferCustomerService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TransferCustomerService_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TransferCustomerService_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TransferCustomerService_resultTupleScheme getScheme() {
        return new TransferCustomerService_resultTupleScheme();
      }
    }

    private static class TransferCustomerService_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransferCustomerService_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TransferCustomerService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TransferCustomerService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AuthCodeURL_args implements org.apache.thrift.TBase<AuthCodeURL_args, AuthCodeURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCodeURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCodeURL_args");

    private static final org.apache.thrift.protocol.TField REDIRECT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("redirectURL", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCodeURL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCodeURL_argsTupleSchemeFactory();

    public java.lang.String redirectURL; // required
    public java.lang.String scope; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REDIRECT_URL((short)1, "redirectURL"),
      SCOPE((short)2, "scope");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REDIRECT_URL
            return REDIRECT_URL;
          case 2: // SCOPE
            return SCOPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REDIRECT_URL, new org.apache.thrift.meta_data.FieldMetaData("redirectURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCodeURL_args.class, metaDataMap);
    }

    public AuthCodeURL_args() {
    }

    public AuthCodeURL_args(
      java.lang.String redirectURL,
      java.lang.String scope)
    {
      this();
      this.redirectURL = redirectURL;
      this.scope = scope;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCodeURL_args(AuthCodeURL_args other) {
      if (other.isSetRedirectURL()) {
        this.redirectURL = other.redirectURL;
      }
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
    }

    public AuthCodeURL_args deepCopy() {
      return new AuthCodeURL_args(this);
    }

    @Override
    public void clear() {
      this.redirectURL = null;
      this.scope = null;
    }

    public java.lang.String getRedirectURL() {
      return this.redirectURL;
    }

    public AuthCodeURL_args setRedirectURL(java.lang.String redirectURL) {
      this.redirectURL = redirectURL;
      return this;
    }

    public void unsetRedirectURL() {
      this.redirectURL = null;
    }

    /** Returns true if field redirectURL is set (has been assigned a value) and false otherwise */
    public boolean isSetRedirectURL() {
      return this.redirectURL != null;
    }

    public void setRedirectURLIsSet(boolean value) {
      if (!value) {
        this.redirectURL = null;
      }
    }

    public java.lang.String getScope() {
      return this.scope;
    }

    public AuthCodeURL_args setScope(java.lang.String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REDIRECT_URL:
        if (value == null) {
          unsetRedirectURL();
        } else {
          setRedirectURL((java.lang.String)value);
        }
        break;

      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REDIRECT_URL:
        return getRedirectURL();

      case SCOPE:
        return getScope();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REDIRECT_URL:
        return isSetRedirectURL();
      case SCOPE:
        return isSetScope();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AuthCodeURL_args)
        return this.equals((AuthCodeURL_args)that);
      return false;
    }

    public boolean equals(AuthCodeURL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_redirectURL = true && this.isSetRedirectURL();
      boolean that_present_redirectURL = true && that.isSetRedirectURL();
      if (this_present_redirectURL || that_present_redirectURL) {
        if (!(this_present_redirectURL && that_present_redirectURL))
          return false;
        if (!this.redirectURL.equals(that.redirectURL))
          return false;
      }

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRedirectURL()) ? 131071 : 524287);
      if (isSetRedirectURL())
        hashCode = hashCode * 8191 + redirectURL.hashCode();

      hashCode = hashCode * 8191 + ((isSetScope()) ? 131071 : 524287);
      if (isSetScope())
        hashCode = hashCode * 8191 + scope.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCodeURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRedirectURL()).compareTo(other.isSetRedirectURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedirectURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redirectURL, other.redirectURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCodeURL_args(");
      boolean first = true;

      sb.append("redirectURL:");
      if (this.redirectURL == null) {
        sb.append("null");
      } else {
        sb.append(this.redirectURL);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCodeURL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AuthCodeURL_argsStandardScheme getScheme() {
        return new AuthCodeURL_argsStandardScheme();
      }
    }

    private static class AuthCodeURL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCodeURL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCodeURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REDIRECT_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.redirectURL = iprot.readString();
                struct.setRedirectURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCodeURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.redirectURL != null) {
          oprot.writeFieldBegin(REDIRECT_URL_FIELD_DESC);
          oprot.writeString(struct.redirectURL);
          oprot.writeFieldEnd();
        }
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCodeURL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AuthCodeURL_argsTupleScheme getScheme() {
        return new AuthCodeURL_argsTupleScheme();
      }
    }

    private static class AuthCodeURL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCodeURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCodeURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRedirectURL()) {
          optionals.set(0);
        }
        if (struct.isSetScope()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRedirectURL()) {
          oprot.writeString(struct.redirectURL);
        }
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCodeURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.redirectURL = iprot.readString();
          struct.setRedirectURLIsSet(true);
        }
        if (incoming.get(1)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AuthCodeURL_result implements org.apache.thrift.TBase<AuthCodeURL_result, AuthCodeURL_result._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCodeURL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCodeURL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCodeURL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCodeURL_resultTupleSchemeFactory();

    public AuthCodeURLData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthCodeURLData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCodeURL_result.class, metaDataMap);
    }

    public AuthCodeURL_result() {
    }

    public AuthCodeURL_result(
      AuthCodeURLData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCodeURL_result(AuthCodeURL_result other) {
      if (other.isSetSuccess()) {
        this.success = new AuthCodeURLData(other.success);
      }
    }

    public AuthCodeURL_result deepCopy() {
      return new AuthCodeURL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AuthCodeURLData getSuccess() {
      return this.success;
    }

    public AuthCodeURL_result setSuccess(AuthCodeURLData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AuthCodeURLData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AuthCodeURL_result)
        return this.equals((AuthCodeURL_result)that);
      return false;
    }

    public boolean equals(AuthCodeURL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCodeURL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCodeURL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCodeURL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AuthCodeURL_resultStandardScheme getScheme() {
        return new AuthCodeURL_resultStandardScheme();
      }
    }

    private static class AuthCodeURL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCodeURL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCodeURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AuthCodeURLData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCodeURL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCodeURL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AuthCodeURL_resultTupleScheme getScheme() {
        return new AuthCodeURL_resultTupleScheme();
      }
    }

    private static class AuthCodeURL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCodeURL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCodeURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCodeURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AuthCodeURLData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetUserInfoBySnsapiBase_args implements org.apache.thrift.TBase<GetUserInfoBySnsapiBase_args, GetUserInfoBySnsapiBase_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserInfoBySnsapiBase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserInfoBySnsapiBase_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetUserInfoBySnsapiBase_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetUserInfoBySnsapiBase_argsTupleSchemeFactory();

    public java.lang.String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserInfoBySnsapiBase_args.class, metaDataMap);
    }

    public GetUserInfoBySnsapiBase_args() {
    }

    public GetUserInfoBySnsapiBase_args(
      java.lang.String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserInfoBySnsapiBase_args(GetUserInfoBySnsapiBase_args other) {
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public GetUserInfoBySnsapiBase_args deepCopy() {
      return new GetUserInfoBySnsapiBase_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
    }

    public java.lang.String getCode() {
      return this.code;
    }

    public GetUserInfoBySnsapiBase_args setCode(java.lang.String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserInfoBySnsapiBase_args)
        return this.equals((GetUserInfoBySnsapiBase_args)that);
      return false;
    }

    public boolean equals(GetUserInfoBySnsapiBase_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetUserInfoBySnsapiBase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetUserInfoBySnsapiBase_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserInfoBySnsapiBase_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiBase_argsStandardScheme getScheme() {
        return new GetUserInfoBySnsapiBase_argsStandardScheme();
      }
    }

    private static class GetUserInfoBySnsapiBase_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetUserInfoBySnsapiBase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserInfoBySnsapiBase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserInfoBySnsapiBase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserInfoBySnsapiBase_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiBase_argsTupleScheme getScheme() {
        return new GetUserInfoBySnsapiBase_argsTupleScheme();
      }
    }

    private static class GetUserInfoBySnsapiBase_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetUserInfoBySnsapiBase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiBase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiBase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetUserInfoBySnsapiBase_result implements org.apache.thrift.TBase<GetUserInfoBySnsapiBase_result, GetUserInfoBySnsapiBase_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserInfoBySnsapiBase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserInfoBySnsapiBase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetUserInfoBySnsapiBase_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetUserInfoBySnsapiBase_resultTupleSchemeFactory();

    public UserInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserInfoBySnsapiBase_result.class, metaDataMap);
    }

    public GetUserInfoBySnsapiBase_result() {
    }

    public GetUserInfoBySnsapiBase_result(
      UserInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserInfoBySnsapiBase_result(GetUserInfoBySnsapiBase_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserInfo(other.success);
      }
    }

    public GetUserInfoBySnsapiBase_result deepCopy() {
      return new GetUserInfoBySnsapiBase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserInfo getSuccess() {
      return this.success;
    }

    public GetUserInfoBySnsapiBase_result setSuccess(UserInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserInfoBySnsapiBase_result)
        return this.equals((GetUserInfoBySnsapiBase_result)that);
      return false;
    }

    public boolean equals(GetUserInfoBySnsapiBase_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetUserInfoBySnsapiBase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetUserInfoBySnsapiBase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserInfoBySnsapiBase_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiBase_resultStandardScheme getScheme() {
        return new GetUserInfoBySnsapiBase_resultStandardScheme();
      }
    }

    private static class GetUserInfoBySnsapiBase_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetUserInfoBySnsapiBase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserInfoBySnsapiBase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserInfoBySnsapiBase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserInfoBySnsapiBase_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiBase_resultTupleScheme getScheme() {
        return new GetUserInfoBySnsapiBase_resultTupleScheme();
      }
    }

    private static class GetUserInfoBySnsapiBase_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetUserInfoBySnsapiBase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiBase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiBase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetUserInfoBySnsapiUserinfo_args implements org.apache.thrift.TBase<GetUserInfoBySnsapiUserinfo_args, GetUserInfoBySnsapiUserinfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserInfoBySnsapiUserinfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserInfoBySnsapiUserinfo_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetUserInfoBySnsapiUserinfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetUserInfoBySnsapiUserinfo_argsTupleSchemeFactory();

    public java.lang.String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserInfoBySnsapiUserinfo_args.class, metaDataMap);
    }

    public GetUserInfoBySnsapiUserinfo_args() {
    }

    public GetUserInfoBySnsapiUserinfo_args(
      java.lang.String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserInfoBySnsapiUserinfo_args(GetUserInfoBySnsapiUserinfo_args other) {
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public GetUserInfoBySnsapiUserinfo_args deepCopy() {
      return new GetUserInfoBySnsapiUserinfo_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
    }

    public java.lang.String getCode() {
      return this.code;
    }

    public GetUserInfoBySnsapiUserinfo_args setCode(java.lang.String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserInfoBySnsapiUserinfo_args)
        return this.equals((GetUserInfoBySnsapiUserinfo_args)that);
      return false;
    }

    public boolean equals(GetUserInfoBySnsapiUserinfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetUserInfoBySnsapiUserinfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetUserInfoBySnsapiUserinfo_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserInfoBySnsapiUserinfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiUserinfo_argsStandardScheme getScheme() {
        return new GetUserInfoBySnsapiUserinfo_argsStandardScheme();
      }
    }

    private static class GetUserInfoBySnsapiUserinfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetUserInfoBySnsapiUserinfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserInfoBySnsapiUserinfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserInfoBySnsapiUserinfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserInfoBySnsapiUserinfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiUserinfo_argsTupleScheme getScheme() {
        return new GetUserInfoBySnsapiUserinfo_argsTupleScheme();
      }
    }

    private static class GetUserInfoBySnsapiUserinfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetUserInfoBySnsapiUserinfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiUserinfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiUserinfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetUserInfoBySnsapiUserinfo_result implements org.apache.thrift.TBase<GetUserInfoBySnsapiUserinfo_result, GetUserInfoBySnsapiUserinfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserInfoBySnsapiUserinfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserInfoBySnsapiUserinfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetUserInfoBySnsapiUserinfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetUserInfoBySnsapiUserinfo_resultTupleSchemeFactory();

    public UserInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserInfoBySnsapiUserinfo_result.class, metaDataMap);
    }

    public GetUserInfoBySnsapiUserinfo_result() {
    }

    public GetUserInfoBySnsapiUserinfo_result(
      UserInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserInfoBySnsapiUserinfo_result(GetUserInfoBySnsapiUserinfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserInfo(other.success);
      }
    }

    public GetUserInfoBySnsapiUserinfo_result deepCopy() {
      return new GetUserInfoBySnsapiUserinfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserInfo getSuccess() {
      return this.success;
    }

    public GetUserInfoBySnsapiUserinfo_result setSuccess(UserInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserInfoBySnsapiUserinfo_result)
        return this.equals((GetUserInfoBySnsapiUserinfo_result)that);
      return false;
    }

    public boolean equals(GetUserInfoBySnsapiUserinfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetUserInfoBySnsapiUserinfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetUserInfoBySnsapiUserinfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserInfoBySnsapiUserinfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiUserinfo_resultStandardScheme getScheme() {
        return new GetUserInfoBySnsapiUserinfo_resultStandardScheme();
      }
    }

    private static class GetUserInfoBySnsapiUserinfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetUserInfoBySnsapiUserinfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserInfoBySnsapiUserinfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserInfoBySnsapiUserinfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserInfoBySnsapiUserinfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoBySnsapiUserinfo_resultTupleScheme getScheme() {
        return new GetUserInfoBySnsapiUserinfo_resultTupleScheme();
      }
    }

    private static class GetUserInfoBySnsapiUserinfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetUserInfoBySnsapiUserinfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiUserinfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserInfoBySnsapiUserinfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetUserInfoByOpenid_args implements org.apache.thrift.TBase<GetUserInfoByOpenid_args, GetUserInfoByOpenid_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserInfoByOpenid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserInfoByOpenid_args");

    private static final org.apache.thrift.protocol.TField OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("openid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetUserInfoByOpenid_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetUserInfoByOpenid_argsTupleSchemeFactory();

    public java.lang.String openid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPENID((short)1, "openid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPENID
            return OPENID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPENID, new org.apache.thrift.meta_data.FieldMetaData("openid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserInfoByOpenid_args.class, metaDataMap);
    }

    public GetUserInfoByOpenid_args() {
    }

    public GetUserInfoByOpenid_args(
      java.lang.String openid)
    {
      this();
      this.openid = openid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserInfoByOpenid_args(GetUserInfoByOpenid_args other) {
      if (other.isSetOpenid()) {
        this.openid = other.openid;
      }
    }

    public GetUserInfoByOpenid_args deepCopy() {
      return new GetUserInfoByOpenid_args(this);
    }

    @Override
    public void clear() {
      this.openid = null;
    }

    public java.lang.String getOpenid() {
      return this.openid;
    }

    public GetUserInfoByOpenid_args setOpenid(java.lang.String openid) {
      this.openid = openid;
      return this;
    }

    public void unsetOpenid() {
      this.openid = null;
    }

    /** Returns true if field openid is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenid() {
      return this.openid != null;
    }

    public void setOpenidIsSet(boolean value) {
      if (!value) {
        this.openid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OPENID:
        if (value == null) {
          unsetOpenid();
        } else {
          setOpenid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OPENID:
        return getOpenid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OPENID:
        return isSetOpenid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserInfoByOpenid_args)
        return this.equals((GetUserInfoByOpenid_args)that);
      return false;
    }

    public boolean equals(GetUserInfoByOpenid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_openid = true && this.isSetOpenid();
      boolean that_present_openid = true && that.isSetOpenid();
      if (this_present_openid || that_present_openid) {
        if (!(this_present_openid && that_present_openid))
          return false;
        if (!this.openid.equals(that.openid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOpenid()) ? 131071 : 524287);
      if (isSetOpenid())
        hashCode = hashCode * 8191 + openid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetUserInfoByOpenid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOpenid()).compareTo(other.isSetOpenid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openid, other.openid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetUserInfoByOpenid_args(");
      boolean first = true;

      sb.append("openid:");
      if (this.openid == null) {
        sb.append("null");
      } else {
        sb.append(this.openid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserInfoByOpenid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoByOpenid_argsStandardScheme getScheme() {
        return new GetUserInfoByOpenid_argsStandardScheme();
      }
    }

    private static class GetUserInfoByOpenid_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetUserInfoByOpenid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserInfoByOpenid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPENID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.openid = iprot.readString();
                struct.setOpenidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserInfoByOpenid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.openid != null) {
          oprot.writeFieldBegin(OPENID_FIELD_DESC);
          oprot.writeString(struct.openid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserInfoByOpenid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoByOpenid_argsTupleScheme getScheme() {
        return new GetUserInfoByOpenid_argsTupleScheme();
      }
    }

    private static class GetUserInfoByOpenid_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetUserInfoByOpenid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserInfoByOpenid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOpenid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOpenid()) {
          oprot.writeString(struct.openid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserInfoByOpenid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.openid = iprot.readString();
          struct.setOpenidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetUserInfoByOpenid_result implements org.apache.thrift.TBase<GetUserInfoByOpenid_result, GetUserInfoByOpenid_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserInfoByOpenid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserInfoByOpenid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetUserInfoByOpenid_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetUserInfoByOpenid_resultTupleSchemeFactory();

    public UserInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserInfoByOpenid_result.class, metaDataMap);
    }

    public GetUserInfoByOpenid_result() {
    }

    public GetUserInfoByOpenid_result(
      UserInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserInfoByOpenid_result(GetUserInfoByOpenid_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserInfo(other.success);
      }
    }

    public GetUserInfoByOpenid_result deepCopy() {
      return new GetUserInfoByOpenid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserInfo getSuccess() {
      return this.success;
    }

    public GetUserInfoByOpenid_result setSuccess(UserInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserInfoByOpenid_result)
        return this.equals((GetUserInfoByOpenid_result)that);
      return false;
    }

    public boolean equals(GetUserInfoByOpenid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetUserInfoByOpenid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetUserInfoByOpenid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserInfoByOpenid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoByOpenid_resultStandardScheme getScheme() {
        return new GetUserInfoByOpenid_resultStandardScheme();
      }
    }

    private static class GetUserInfoByOpenid_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetUserInfoByOpenid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserInfoByOpenid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserInfoByOpenid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserInfoByOpenid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetUserInfoByOpenid_resultTupleScheme getScheme() {
        return new GetUserInfoByOpenid_resultTupleScheme();
      }
    }

    private static class GetUserInfoByOpenid_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetUserInfoByOpenid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserInfoByOpenid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserInfoByOpenid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateMenu_args implements org.apache.thrift.TBase<CreateMenu_args, CreateMenu_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateMenu_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateMenu_args");

    private static final org.apache.thrift.protocol.TField MENU_FIELD_DESC = new org.apache.thrift.protocol.TField("menu", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateMenu_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateMenu_argsTupleSchemeFactory();

    public menu menu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MENU((short)1, "menu");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MENU
            return MENU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MENU, new org.apache.thrift.meta_data.FieldMetaData("menu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, menu.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateMenu_args.class, metaDataMap);
    }

    public CreateMenu_args() {
    }

    public CreateMenu_args(
      menu menu)
    {
      this();
      this.menu = menu;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateMenu_args(CreateMenu_args other) {
      if (other.isSetMenu()) {
        this.menu = new menu(other.menu);
      }
    }

    public CreateMenu_args deepCopy() {
      return new CreateMenu_args(this);
    }

    @Override
    public void clear() {
      this.menu = null;
    }

    public menu getMenu() {
      return this.menu;
    }

    public CreateMenu_args setMenu(menu menu) {
      this.menu = menu;
      return this;
    }

    public void unsetMenu() {
      this.menu = null;
    }

    /** Returns true if field menu is set (has been assigned a value) and false otherwise */
    public boolean isSetMenu() {
      return this.menu != null;
    }

    public void setMenuIsSet(boolean value) {
      if (!value) {
        this.menu = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MENU:
        if (value == null) {
          unsetMenu();
        } else {
          setMenu((menu)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MENU:
        return getMenu();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MENU:
        return isSetMenu();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateMenu_args)
        return this.equals((CreateMenu_args)that);
      return false;
    }

    public boolean equals(CreateMenu_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_menu = true && this.isSetMenu();
      boolean that_present_menu = true && that.isSetMenu();
      if (this_present_menu || that_present_menu) {
        if (!(this_present_menu && that_present_menu))
          return false;
        if (!this.menu.equals(that.menu))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMenu()) ? 131071 : 524287);
      if (isSetMenu())
        hashCode = hashCode * 8191 + menu.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateMenu_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMenu()).compareTo(other.isSetMenu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMenu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menu, other.menu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateMenu_args(");
      boolean first = true;

      sb.append("menu:");
      if (this.menu == null) {
        sb.append("null");
      } else {
        sb.append(this.menu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (menu != null) {
        menu.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateMenu_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenu_argsStandardScheme getScheme() {
        return new CreateMenu_argsStandardScheme();
      }
    }

    private static class CreateMenu_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateMenu_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateMenu_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MENU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.menu = new menu();
                struct.menu.read(iprot);
                struct.setMenuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateMenu_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.menu != null) {
          oprot.writeFieldBegin(MENU_FIELD_DESC);
          struct.menu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateMenu_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenu_argsTupleScheme getScheme() {
        return new CreateMenu_argsTupleScheme();
      }
    }

    private static class CreateMenu_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateMenu_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateMenu_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMenu()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMenu()) {
          struct.menu.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateMenu_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.menu = new menu();
          struct.menu.read(iprot);
          struct.setMenuIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateMenu_result implements org.apache.thrift.TBase<CreateMenu_result, CreateMenu_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateMenu_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateMenu_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateMenu_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateMenu_resultTupleSchemeFactory();

    public WxResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WxResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateMenu_result.class, metaDataMap);
    }

    public CreateMenu_result() {
    }

    public CreateMenu_result(
      WxResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateMenu_result(CreateMenu_result other) {
      if (other.isSetSuccess()) {
        this.success = new WxResponse(other.success);
      }
    }

    public CreateMenu_result deepCopy() {
      return new CreateMenu_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WxResponse getSuccess() {
      return this.success;
    }

    public CreateMenu_result setSuccess(WxResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WxResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateMenu_result)
        return this.equals((CreateMenu_result)that);
      return false;
    }

    public boolean equals(CreateMenu_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateMenu_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateMenu_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateMenu_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenu_resultStandardScheme getScheme() {
        return new CreateMenu_resultStandardScheme();
      }
    }

    private static class CreateMenu_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateMenu_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateMenu_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WxResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateMenu_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateMenu_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenu_resultTupleScheme getScheme() {
        return new CreateMenu_resultTupleScheme();
      }
    }

    private static class CreateMenu_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateMenu_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateMenu_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateMenu_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WxResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateMenuByJson_args implements org.apache.thrift.TBase<CreateMenuByJson_args, CreateMenuByJson_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateMenuByJson_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateMenuByJson_args");

    private static final org.apache.thrift.protocol.TField MENU_JSON_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("menuJsonBytes", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateMenuByJson_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateMenuByJson_argsTupleSchemeFactory();

    public java.nio.ByteBuffer menuJsonBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MENU_JSON_BYTES((short)1, "menuJsonBytes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MENU_JSON_BYTES
            return MENU_JSON_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MENU_JSON_BYTES, new org.apache.thrift.meta_data.FieldMetaData("menuJsonBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateMenuByJson_args.class, metaDataMap);
    }

    public CreateMenuByJson_args() {
    }

    public CreateMenuByJson_args(
      java.nio.ByteBuffer menuJsonBytes)
    {
      this();
      this.menuJsonBytes = org.apache.thrift.TBaseHelper.copyBinary(menuJsonBytes);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateMenuByJson_args(CreateMenuByJson_args other) {
      if (other.isSetMenuJsonBytes()) {
        this.menuJsonBytes = org.apache.thrift.TBaseHelper.copyBinary(other.menuJsonBytes);
      }
    }

    public CreateMenuByJson_args deepCopy() {
      return new CreateMenuByJson_args(this);
    }

    @Override
    public void clear() {
      this.menuJsonBytes = null;
    }

    public byte[] getMenuJsonBytes() {
      setMenuJsonBytes(org.apache.thrift.TBaseHelper.rightSize(menuJsonBytes));
      return menuJsonBytes == null ? null : menuJsonBytes.array();
    }

    public java.nio.ByteBuffer bufferForMenuJsonBytes() {
      return org.apache.thrift.TBaseHelper.copyBinary(menuJsonBytes);
    }

    public CreateMenuByJson_args setMenuJsonBytes(byte[] menuJsonBytes) {
      this.menuJsonBytes = menuJsonBytes == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(menuJsonBytes.clone());
      return this;
    }

    public CreateMenuByJson_args setMenuJsonBytes(java.nio.ByteBuffer menuJsonBytes) {
      this.menuJsonBytes = org.apache.thrift.TBaseHelper.copyBinary(menuJsonBytes);
      return this;
    }

    public void unsetMenuJsonBytes() {
      this.menuJsonBytes = null;
    }

    /** Returns true if field menuJsonBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetMenuJsonBytes() {
      return this.menuJsonBytes != null;
    }

    public void setMenuJsonBytesIsSet(boolean value) {
      if (!value) {
        this.menuJsonBytes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MENU_JSON_BYTES:
        if (value == null) {
          unsetMenuJsonBytes();
        } else {
          if (value instanceof byte[]) {
            setMenuJsonBytes((byte[])value);
          } else {
            setMenuJsonBytes((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MENU_JSON_BYTES:
        return getMenuJsonBytes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MENU_JSON_BYTES:
        return isSetMenuJsonBytes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateMenuByJson_args)
        return this.equals((CreateMenuByJson_args)that);
      return false;
    }

    public boolean equals(CreateMenuByJson_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_menuJsonBytes = true && this.isSetMenuJsonBytes();
      boolean that_present_menuJsonBytes = true && that.isSetMenuJsonBytes();
      if (this_present_menuJsonBytes || that_present_menuJsonBytes) {
        if (!(this_present_menuJsonBytes && that_present_menuJsonBytes))
          return false;
        if (!this.menuJsonBytes.equals(that.menuJsonBytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMenuJsonBytes()) ? 131071 : 524287);
      if (isSetMenuJsonBytes())
        hashCode = hashCode * 8191 + menuJsonBytes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateMenuByJson_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMenuJsonBytes()).compareTo(other.isSetMenuJsonBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMenuJsonBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuJsonBytes, other.menuJsonBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateMenuByJson_args(");
      boolean first = true;

      sb.append("menuJsonBytes:");
      if (this.menuJsonBytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.menuJsonBytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateMenuByJson_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenuByJson_argsStandardScheme getScheme() {
        return new CreateMenuByJson_argsStandardScheme();
      }
    }

    private static class CreateMenuByJson_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateMenuByJson_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateMenuByJson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MENU_JSON_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.menuJsonBytes = iprot.readBinary();
                struct.setMenuJsonBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateMenuByJson_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.menuJsonBytes != null) {
          oprot.writeFieldBegin(MENU_JSON_BYTES_FIELD_DESC);
          oprot.writeBinary(struct.menuJsonBytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateMenuByJson_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenuByJson_argsTupleScheme getScheme() {
        return new CreateMenuByJson_argsTupleScheme();
      }
    }

    private static class CreateMenuByJson_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateMenuByJson_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateMenuByJson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMenuJsonBytes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMenuJsonBytes()) {
          oprot.writeBinary(struct.menuJsonBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateMenuByJson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.menuJsonBytes = iprot.readBinary();
          struct.setMenuJsonBytesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CreateMenuByJson_result implements org.apache.thrift.TBase<CreateMenuByJson_result, CreateMenuByJson_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateMenuByJson_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateMenuByJson_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreateMenuByJson_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreateMenuByJson_resultTupleSchemeFactory();

    public WxResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WxResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateMenuByJson_result.class, metaDataMap);
    }

    public CreateMenuByJson_result() {
    }

    public CreateMenuByJson_result(
      WxResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateMenuByJson_result(CreateMenuByJson_result other) {
      if (other.isSetSuccess()) {
        this.success = new WxResponse(other.success);
      }
    }

    public CreateMenuByJson_result deepCopy() {
      return new CreateMenuByJson_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WxResponse getSuccess() {
      return this.success;
    }

    public CreateMenuByJson_result setSuccess(WxResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WxResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateMenuByJson_result)
        return this.equals((CreateMenuByJson_result)that);
      return false;
    }

    public boolean equals(CreateMenuByJson_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CreateMenuByJson_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CreateMenuByJson_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateMenuByJson_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenuByJson_resultStandardScheme getScheme() {
        return new CreateMenuByJson_resultStandardScheme();
      }
    }

    private static class CreateMenuByJson_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreateMenuByJson_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateMenuByJson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WxResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateMenuByJson_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateMenuByJson_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CreateMenuByJson_resultTupleScheme getScheme() {
        return new CreateMenuByJson_resultTupleScheme();
      }
    }

    private static class CreateMenuByJson_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreateMenuByJson_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateMenuByJson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateMenuByJson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WxResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class UnifiedOrder_args implements org.apache.thrift.TBase<UnifiedOrder_args, UnifiedOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<UnifiedOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnifiedOrder_args");

    private static final org.apache.thrift.protocol.TField ORDER_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderParam", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UnifiedOrder_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UnifiedOrder_argsTupleSchemeFactory();

    public UnifiedOrderParam orderParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_PARAM((short)1, "orderParam");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_PARAM
            return ORDER_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_PARAM, new org.apache.thrift.meta_data.FieldMetaData("orderParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnifiedOrderParam.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnifiedOrder_args.class, metaDataMap);
    }

    public UnifiedOrder_args() {
    }

    public UnifiedOrder_args(
      UnifiedOrderParam orderParam)
    {
      this();
      this.orderParam = orderParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnifiedOrder_args(UnifiedOrder_args other) {
      if (other.isSetOrderParam()) {
        this.orderParam = new UnifiedOrderParam(other.orderParam);
      }
    }

    public UnifiedOrder_args deepCopy() {
      return new UnifiedOrder_args(this);
    }

    @Override
    public void clear() {
      this.orderParam = null;
    }

    public UnifiedOrderParam getOrderParam() {
      return this.orderParam;
    }

    public UnifiedOrder_args setOrderParam(UnifiedOrderParam orderParam) {
      this.orderParam = orderParam;
      return this;
    }

    public void unsetOrderParam() {
      this.orderParam = null;
    }

    /** Returns true if field orderParam is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderParam() {
      return this.orderParam != null;
    }

    public void setOrderParamIsSet(boolean value) {
      if (!value) {
        this.orderParam = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ORDER_PARAM:
        if (value == null) {
          unsetOrderParam();
        } else {
          setOrderParam((UnifiedOrderParam)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_PARAM:
        return getOrderParam();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ORDER_PARAM:
        return isSetOrderParam();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof UnifiedOrder_args)
        return this.equals((UnifiedOrder_args)that);
      return false;
    }

    public boolean equals(UnifiedOrder_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_orderParam = true && this.isSetOrderParam();
      boolean that_present_orderParam = true && that.isSetOrderParam();
      if (this_present_orderParam || that_present_orderParam) {
        if (!(this_present_orderParam && that_present_orderParam))
          return false;
        if (!this.orderParam.equals(that.orderParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOrderParam()) ? 131071 : 524287);
      if (isSetOrderParam())
        hashCode = hashCode * 8191 + orderParam.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(UnifiedOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOrderParam()).compareTo(other.isSetOrderParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderParam, other.orderParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("UnifiedOrder_args(");
      boolean first = true;

      sb.append("orderParam:");
      if (this.orderParam == null) {
        sb.append("null");
      } else {
        sb.append(this.orderParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (orderParam != null) {
        orderParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnifiedOrder_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnifiedOrder_argsStandardScheme getScheme() {
        return new UnifiedOrder_argsStandardScheme();
      }
    }

    private static class UnifiedOrder_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<UnifiedOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnifiedOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orderParam = new UnifiedOrderParam();
                struct.orderParam.read(iprot);
                struct.setOrderParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnifiedOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderParam != null) {
          oprot.writeFieldBegin(ORDER_PARAM_FIELD_DESC);
          struct.orderParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnifiedOrder_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnifiedOrder_argsTupleScheme getScheme() {
        return new UnifiedOrder_argsTupleScheme();
      }
    }

    private static class UnifiedOrder_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<UnifiedOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnifiedOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOrderParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderParam()) {
          struct.orderParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnifiedOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderParam = new UnifiedOrderParam();
          struct.orderParam.read(iprot);
          struct.setOrderParamIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class UnifiedOrder_result implements org.apache.thrift.TBase<UnifiedOrder_result, UnifiedOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<UnifiedOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnifiedOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UnifiedOrder_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UnifiedOrder_resultTupleSchemeFactory();

    public UnifiedOrderResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnifiedOrderResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnifiedOrder_result.class, metaDataMap);
    }

    public UnifiedOrder_result() {
    }

    public UnifiedOrder_result(
      UnifiedOrderResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnifiedOrder_result(UnifiedOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new UnifiedOrderResponse(other.success);
      }
    }

    public UnifiedOrder_result deepCopy() {
      return new UnifiedOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UnifiedOrderResponse getSuccess() {
      return this.success;
    }

    public UnifiedOrder_result setSuccess(UnifiedOrderResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UnifiedOrderResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof UnifiedOrder_result)
        return this.equals((UnifiedOrder_result)that);
      return false;
    }

    public boolean equals(UnifiedOrder_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(UnifiedOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("UnifiedOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnifiedOrder_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnifiedOrder_resultStandardScheme getScheme() {
        return new UnifiedOrder_resultStandardScheme();
      }
    }

    private static class UnifiedOrder_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<UnifiedOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnifiedOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UnifiedOrderResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnifiedOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnifiedOrder_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnifiedOrder_resultTupleScheme getScheme() {
        return new UnifiedOrder_resultTupleScheme();
      }
    }

    private static class UnifiedOrder_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<UnifiedOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnifiedOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnifiedOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UnifiedOrderResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetJsApiParameters_args implements org.apache.thrift.TBase<GetJsApiParameters_args, GetJsApiParameters_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetJsApiParameters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetJsApiParameters_args");

    private static final org.apache.thrift.protocol.TField UNIFIED_ORDER_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("unifiedOrderResult", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetJsApiParameters_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetJsApiParameters_argsTupleSchemeFactory();

    public UnifiedOrderResponse unifiedOrderResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNIFIED_ORDER_RESULT((short)1, "unifiedOrderResult");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNIFIED_ORDER_RESULT
            return UNIFIED_ORDER_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNIFIED_ORDER_RESULT, new org.apache.thrift.meta_data.FieldMetaData("unifiedOrderResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnifiedOrderResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetJsApiParameters_args.class, metaDataMap);
    }

    public GetJsApiParameters_args() {
    }

    public GetJsApiParameters_args(
      UnifiedOrderResponse unifiedOrderResult)
    {
      this();
      this.unifiedOrderResult = unifiedOrderResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetJsApiParameters_args(GetJsApiParameters_args other) {
      if (other.isSetUnifiedOrderResult()) {
        this.unifiedOrderResult = new UnifiedOrderResponse(other.unifiedOrderResult);
      }
    }

    public GetJsApiParameters_args deepCopy() {
      return new GetJsApiParameters_args(this);
    }

    @Override
    public void clear() {
      this.unifiedOrderResult = null;
    }

    public UnifiedOrderResponse getUnifiedOrderResult() {
      return this.unifiedOrderResult;
    }

    public GetJsApiParameters_args setUnifiedOrderResult(UnifiedOrderResponse unifiedOrderResult) {
      this.unifiedOrderResult = unifiedOrderResult;
      return this;
    }

    public void unsetUnifiedOrderResult() {
      this.unifiedOrderResult = null;
    }

    /** Returns true if field unifiedOrderResult is set (has been assigned a value) and false otherwise */
    public boolean isSetUnifiedOrderResult() {
      return this.unifiedOrderResult != null;
    }

    public void setUnifiedOrderResultIsSet(boolean value) {
      if (!value) {
        this.unifiedOrderResult = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UNIFIED_ORDER_RESULT:
        if (value == null) {
          unsetUnifiedOrderResult();
        } else {
          setUnifiedOrderResult((UnifiedOrderResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNIFIED_ORDER_RESULT:
        return getUnifiedOrderResult();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNIFIED_ORDER_RESULT:
        return isSetUnifiedOrderResult();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetJsApiParameters_args)
        return this.equals((GetJsApiParameters_args)that);
      return false;
    }

    public boolean equals(GetJsApiParameters_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unifiedOrderResult = true && this.isSetUnifiedOrderResult();
      boolean that_present_unifiedOrderResult = true && that.isSetUnifiedOrderResult();
      if (this_present_unifiedOrderResult || that_present_unifiedOrderResult) {
        if (!(this_present_unifiedOrderResult && that_present_unifiedOrderResult))
          return false;
        if (!this.unifiedOrderResult.equals(that.unifiedOrderResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnifiedOrderResult()) ? 131071 : 524287);
      if (isSetUnifiedOrderResult())
        hashCode = hashCode * 8191 + unifiedOrderResult.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetJsApiParameters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUnifiedOrderResult()).compareTo(other.isSetUnifiedOrderResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnifiedOrderResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unifiedOrderResult, other.unifiedOrderResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetJsApiParameters_args(");
      boolean first = true;

      sb.append("unifiedOrderResult:");
      if (this.unifiedOrderResult == null) {
        sb.append("null");
      } else {
        sb.append(this.unifiedOrderResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (unifiedOrderResult != null) {
        unifiedOrderResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetJsApiParameters_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsApiParameters_argsStandardScheme getScheme() {
        return new GetJsApiParameters_argsStandardScheme();
      }
    }

    private static class GetJsApiParameters_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetJsApiParameters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetJsApiParameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNIFIED_ORDER_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unifiedOrderResult = new UnifiedOrderResponse();
                struct.unifiedOrderResult.read(iprot);
                struct.setUnifiedOrderResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetJsApiParameters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unifiedOrderResult != null) {
          oprot.writeFieldBegin(UNIFIED_ORDER_RESULT_FIELD_DESC);
          struct.unifiedOrderResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetJsApiParameters_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsApiParameters_argsTupleScheme getScheme() {
        return new GetJsApiParameters_argsTupleScheme();
      }
    }

    private static class GetJsApiParameters_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetJsApiParameters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetJsApiParameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnifiedOrderResult()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnifiedOrderResult()) {
          struct.unifiedOrderResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetJsApiParameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.unifiedOrderResult = new UnifiedOrderResponse();
          struct.unifiedOrderResult.read(iprot);
          struct.setUnifiedOrderResultIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetJsApiParameters_result implements org.apache.thrift.TBase<GetJsApiParameters_result, GetJsApiParameters_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetJsApiParameters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetJsApiParameters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetJsApiParameters_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetJsApiParameters_resultTupleSchemeFactory();

    public JsApiParameters success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JsApiParameters.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetJsApiParameters_result.class, metaDataMap);
    }

    public GetJsApiParameters_result() {
    }

    public GetJsApiParameters_result(
      JsApiParameters success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetJsApiParameters_result(GetJsApiParameters_result other) {
      if (other.isSetSuccess()) {
        this.success = new JsApiParameters(other.success);
      }
    }

    public GetJsApiParameters_result deepCopy() {
      return new GetJsApiParameters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public JsApiParameters getSuccess() {
      return this.success;
    }

    public GetJsApiParameters_result setSuccess(JsApiParameters success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JsApiParameters)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetJsApiParameters_result)
        return this.equals((GetJsApiParameters_result)that);
      return false;
    }

    public boolean equals(GetJsApiParameters_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetJsApiParameters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetJsApiParameters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetJsApiParameters_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsApiParameters_resultStandardScheme getScheme() {
        return new GetJsApiParameters_resultStandardScheme();
      }
    }

    private static class GetJsApiParameters_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetJsApiParameters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetJsApiParameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JsApiParameters();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetJsApiParameters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetJsApiParameters_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetJsApiParameters_resultTupleScheme getScheme() {
        return new GetJsApiParameters_resultTupleScheme();
      }
    }

    private static class GetJsApiParameters_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetJsApiParameters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetJsApiParameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetJsApiParameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new JsApiParameters();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class WxpayParseAndVerifySign_args implements org.apache.thrift.TBase<WxpayParseAndVerifySign_args, WxpayParseAndVerifySign_args._Fields>, java.io.Serializable, Cloneable, Comparable<WxpayParseAndVerifySign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WxpayParseAndVerifySign_args");

    private static final org.apache.thrift.protocol.TField XML_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlBytes", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WxpayParseAndVerifySign_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WxpayParseAndVerifySign_argsTupleSchemeFactory();

    public java.nio.ByteBuffer xmlBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XML_BYTES((short)1, "xmlBytes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XML_BYTES
            return XML_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XML_BYTES, new org.apache.thrift.meta_data.FieldMetaData("xmlBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WxpayParseAndVerifySign_args.class, metaDataMap);
    }

    public WxpayParseAndVerifySign_args() {
    }

    public WxpayParseAndVerifySign_args(
      java.nio.ByteBuffer xmlBytes)
    {
      this();
      this.xmlBytes = org.apache.thrift.TBaseHelper.copyBinary(xmlBytes);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WxpayParseAndVerifySign_args(WxpayParseAndVerifySign_args other) {
      if (other.isSetXmlBytes()) {
        this.xmlBytes = org.apache.thrift.TBaseHelper.copyBinary(other.xmlBytes);
      }
    }

    public WxpayParseAndVerifySign_args deepCopy() {
      return new WxpayParseAndVerifySign_args(this);
    }

    @Override
    public void clear() {
      this.xmlBytes = null;
    }

    public byte[] getXmlBytes() {
      setXmlBytes(org.apache.thrift.TBaseHelper.rightSize(xmlBytes));
      return xmlBytes == null ? null : xmlBytes.array();
    }

    public java.nio.ByteBuffer bufferForXmlBytes() {
      return org.apache.thrift.TBaseHelper.copyBinary(xmlBytes);
    }

    public WxpayParseAndVerifySign_args setXmlBytes(byte[] xmlBytes) {
      this.xmlBytes = xmlBytes == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(xmlBytes.clone());
      return this;
    }

    public WxpayParseAndVerifySign_args setXmlBytes(java.nio.ByteBuffer xmlBytes) {
      this.xmlBytes = org.apache.thrift.TBaseHelper.copyBinary(xmlBytes);
      return this;
    }

    public void unsetXmlBytes() {
      this.xmlBytes = null;
    }

    /** Returns true if field xmlBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlBytes() {
      return this.xmlBytes != null;
    }

    public void setXmlBytesIsSet(boolean value) {
      if (!value) {
        this.xmlBytes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case XML_BYTES:
        if (value == null) {
          unsetXmlBytes();
        } else {
          if (value instanceof byte[]) {
            setXmlBytes((byte[])value);
          } else {
            setXmlBytes((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case XML_BYTES:
        return getXmlBytes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case XML_BYTES:
        return isSetXmlBytes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof WxpayParseAndVerifySign_args)
        return this.equals((WxpayParseAndVerifySign_args)that);
      return false;
    }

    public boolean equals(WxpayParseAndVerifySign_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_xmlBytes = true && this.isSetXmlBytes();
      boolean that_present_xmlBytes = true && that.isSetXmlBytes();
      if (this_present_xmlBytes || that_present_xmlBytes) {
        if (!(this_present_xmlBytes && that_present_xmlBytes))
          return false;
        if (!this.xmlBytes.equals(that.xmlBytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetXmlBytes()) ? 131071 : 524287);
      if (isSetXmlBytes())
        hashCode = hashCode * 8191 + xmlBytes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(WxpayParseAndVerifySign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetXmlBytes()).compareTo(other.isSetXmlBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlBytes, other.xmlBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("WxpayParseAndVerifySign_args(");
      boolean first = true;

      sb.append("xmlBytes:");
      if (this.xmlBytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.xmlBytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WxpayParseAndVerifySign_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public WxpayParseAndVerifySign_argsStandardScheme getScheme() {
        return new WxpayParseAndVerifySign_argsStandardScheme();
      }
    }

    private static class WxpayParseAndVerifySign_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<WxpayParseAndVerifySign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WxpayParseAndVerifySign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XML_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlBytes = iprot.readBinary();
                struct.setXmlBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WxpayParseAndVerifySign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlBytes != null) {
          oprot.writeFieldBegin(XML_BYTES_FIELD_DESC);
          oprot.writeBinary(struct.xmlBytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WxpayParseAndVerifySign_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public WxpayParseAndVerifySign_argsTupleScheme getScheme() {
        return new WxpayParseAndVerifySign_argsTupleScheme();
      }
    }

    private static class WxpayParseAndVerifySign_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<WxpayParseAndVerifySign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WxpayParseAndVerifySign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetXmlBytes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXmlBytes()) {
          oprot.writeBinary(struct.xmlBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WxpayParseAndVerifySign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xmlBytes = iprot.readBinary();
          struct.setXmlBytesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class WxpayParseAndVerifySign_result implements org.apache.thrift.TBase<WxpayParseAndVerifySign_result, WxpayParseAndVerifySign_result._Fields>, java.io.Serializable, Cloneable, Comparable<WxpayParseAndVerifySign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WxpayParseAndVerifySign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WxpayParseAndVerifySign_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WxpayParseAndVerifySign_resultTupleSchemeFactory();

    public WXPayNotify success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WXPayNotify.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WxpayParseAndVerifySign_result.class, metaDataMap);
    }

    public WxpayParseAndVerifySign_result() {
    }

    public WxpayParseAndVerifySign_result(
      WXPayNotify success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WxpayParseAndVerifySign_result(WxpayParseAndVerifySign_result other) {
      if (other.isSetSuccess()) {
        this.success = new WXPayNotify(other.success);
      }
    }

    public WxpayParseAndVerifySign_result deepCopy() {
      return new WxpayParseAndVerifySign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WXPayNotify getSuccess() {
      return this.success;
    }

    public WxpayParseAndVerifySign_result setSuccess(WXPayNotify success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WXPayNotify)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof WxpayParseAndVerifySign_result)
        return this.equals((WxpayParseAndVerifySign_result)that);
      return false;
    }

    public boolean equals(WxpayParseAndVerifySign_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(WxpayParseAndVerifySign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("WxpayParseAndVerifySign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WxpayParseAndVerifySign_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public WxpayParseAndVerifySign_resultStandardScheme getScheme() {
        return new WxpayParseAndVerifySign_resultStandardScheme();
      }
    }

    private static class WxpayParseAndVerifySign_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<WxpayParseAndVerifySign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WxpayParseAndVerifySign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WXPayNotify();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WxpayParseAndVerifySign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WxpayParseAndVerifySign_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public WxpayParseAndVerifySign_resultTupleScheme getScheme() {
        return new WxpayParseAndVerifySign_resultTupleScheme();
      }
    }

    private static class WxpayParseAndVerifySign_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<WxpayParseAndVerifySign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WxpayParseAndVerifySign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WxpayParseAndVerifySign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WXPayNotify();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QrcodeShow_args implements org.apache.thrift.TBase<QrcodeShow_args, QrcodeShow_args._Fields>, java.io.Serializable, Cloneable, Comparable<QrcodeShow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QrcodeShow_args");

    private static final org.apache.thrift.protocol.TField QR_JSON_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("qrJsonBytes", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QrcodeShow_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QrcodeShow_argsTupleSchemeFactory();

    public java.nio.ByteBuffer qrJsonBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QR_JSON_BYTES((short)1, "qrJsonBytes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QR_JSON_BYTES
            return QR_JSON_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QR_JSON_BYTES, new org.apache.thrift.meta_data.FieldMetaData("qrJsonBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QrcodeShow_args.class, metaDataMap);
    }

    public QrcodeShow_args() {
    }

    public QrcodeShow_args(
      java.nio.ByteBuffer qrJsonBytes)
    {
      this();
      this.qrJsonBytes = org.apache.thrift.TBaseHelper.copyBinary(qrJsonBytes);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QrcodeShow_args(QrcodeShow_args other) {
      if (other.isSetQrJsonBytes()) {
        this.qrJsonBytes = org.apache.thrift.TBaseHelper.copyBinary(other.qrJsonBytes);
      }
    }

    public QrcodeShow_args deepCopy() {
      return new QrcodeShow_args(this);
    }

    @Override
    public void clear() {
      this.qrJsonBytes = null;
    }

    public byte[] getQrJsonBytes() {
      setQrJsonBytes(org.apache.thrift.TBaseHelper.rightSize(qrJsonBytes));
      return qrJsonBytes == null ? null : qrJsonBytes.array();
    }

    public java.nio.ByteBuffer bufferForQrJsonBytes() {
      return org.apache.thrift.TBaseHelper.copyBinary(qrJsonBytes);
    }

    public QrcodeShow_args setQrJsonBytes(byte[] qrJsonBytes) {
      this.qrJsonBytes = qrJsonBytes == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(qrJsonBytes.clone());
      return this;
    }

    public QrcodeShow_args setQrJsonBytes(java.nio.ByteBuffer qrJsonBytes) {
      this.qrJsonBytes = org.apache.thrift.TBaseHelper.copyBinary(qrJsonBytes);
      return this;
    }

    public void unsetQrJsonBytes() {
      this.qrJsonBytes = null;
    }

    /** Returns true if field qrJsonBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetQrJsonBytes() {
      return this.qrJsonBytes != null;
    }

    public void setQrJsonBytesIsSet(boolean value) {
      if (!value) {
        this.qrJsonBytes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QR_JSON_BYTES:
        if (value == null) {
          unsetQrJsonBytes();
        } else {
          if (value instanceof byte[]) {
            setQrJsonBytes((byte[])value);
          } else {
            setQrJsonBytes((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QR_JSON_BYTES:
        return getQrJsonBytes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QR_JSON_BYTES:
        return isSetQrJsonBytes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QrcodeShow_args)
        return this.equals((QrcodeShow_args)that);
      return false;
    }

    public boolean equals(QrcodeShow_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qrJsonBytes = true && this.isSetQrJsonBytes();
      boolean that_present_qrJsonBytes = true && that.isSetQrJsonBytes();
      if (this_present_qrJsonBytes || that_present_qrJsonBytes) {
        if (!(this_present_qrJsonBytes && that_present_qrJsonBytes))
          return false;
        if (!this.qrJsonBytes.equals(that.qrJsonBytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQrJsonBytes()) ? 131071 : 524287);
      if (isSetQrJsonBytes())
        hashCode = hashCode * 8191 + qrJsonBytes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QrcodeShow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQrJsonBytes()).compareTo(other.isSetQrJsonBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQrJsonBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qrJsonBytes, other.qrJsonBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QrcodeShow_args(");
      boolean first = true;

      sb.append("qrJsonBytes:");
      if (this.qrJsonBytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.qrJsonBytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QrcodeShow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QrcodeShow_argsStandardScheme getScheme() {
        return new QrcodeShow_argsStandardScheme();
      }
    }

    private static class QrcodeShow_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QrcodeShow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QrcodeShow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QR_JSON_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qrJsonBytes = iprot.readBinary();
                struct.setQrJsonBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QrcodeShow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qrJsonBytes != null) {
          oprot.writeFieldBegin(QR_JSON_BYTES_FIELD_DESC);
          oprot.writeBinary(struct.qrJsonBytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QrcodeShow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QrcodeShow_argsTupleScheme getScheme() {
        return new QrcodeShow_argsTupleScheme();
      }
    }

    private static class QrcodeShow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QrcodeShow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QrcodeShow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQrJsonBytes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQrJsonBytes()) {
          oprot.writeBinary(struct.qrJsonBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QrcodeShow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.qrJsonBytes = iprot.readBinary();
          struct.setQrJsonBytesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QrcodeShow_result implements org.apache.thrift.TBase<QrcodeShow_result, QrcodeShow_result._Fields>, java.io.Serializable, Cloneable, Comparable<QrcodeShow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QrcodeShow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QrcodeShow_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QrcodeShow_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QrcodeShow_result.class, metaDataMap);
    }

    public QrcodeShow_result() {
    }

    public QrcodeShow_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QrcodeShow_result(QrcodeShow_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public QrcodeShow_result deepCopy() {
      return new QrcodeShow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public QrcodeShow_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QrcodeShow_result)
        return this.equals((QrcodeShow_result)that);
      return false;
    }

    public boolean equals(QrcodeShow_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QrcodeShow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QrcodeShow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QrcodeShow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QrcodeShow_resultStandardScheme getScheme() {
        return new QrcodeShow_resultStandardScheme();
      }
    }

    private static class QrcodeShow_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<QrcodeShow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QrcodeShow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QrcodeShow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QrcodeShow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QrcodeShow_resultTupleScheme getScheme() {
        return new QrcodeShow_resultTupleScheme();
      }
    }

    private static class QrcodeShow_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<QrcodeShow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QrcodeShow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QrcodeShow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
