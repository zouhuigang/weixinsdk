/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class UnifiedOrderParam implements org.apache.thrift.TBase<UnifiedOrderParam, UnifiedOrderParam._Fields>, java.io.Serializable, Cloneable, Comparable<UnifiedOrderParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnifiedOrderParam");

  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("Appid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MchId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("DeviceInfo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NONCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("NonceStr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("Sign", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SIGN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SignType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("Body", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("Detail", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ATTACH_FIELD_DESC = new org.apache.thrift.protocol.TField("Attach", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OUT_TRADE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("OutTradeNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FEE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("FeeType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("TotalFee", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SPBILL_CREATE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("SpbillCreateIp", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("TimeStart", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TIME_EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("TimeExpire", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField GOODS_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("GoodsTag", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField NOTIFY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("NotifyUrl", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TRADE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("TradeType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ProductId", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LIMIT_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("LimitPay", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("Openid", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField RECEIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("Receipt", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SCENE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("Scene_info", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UnifiedOrderParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UnifiedOrderParamTupleSchemeFactory();

  public java.lang.String Appid; // required
  public java.lang.String MchId; // required
  public java.lang.String DeviceInfo; // required
  public java.lang.String NonceStr; // required
  public java.lang.String Sign; // required
  public java.lang.String SignType; // required
  public java.lang.String Body; // required
  public java.lang.String Detail; // required
  public java.lang.String Attach; // required
  public java.lang.String OutTradeNo; // required
  public java.lang.String FeeType; // required
  public java.lang.String TotalFee; // required
  public java.lang.String SpbillCreateIp; // required
  public java.lang.String TimeStart; // required
  public java.lang.String TimeExpire; // required
  public java.lang.String GoodsTag; // required
  public java.lang.String NotifyUrl; // required
  public java.lang.String TradeType; // required
  public java.lang.String ProductId; // required
  public java.lang.String LimitPay; // required
  public java.lang.String Openid; // required
  public java.lang.String Receipt; // required
  public java.lang.String Scene_info; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPID((short)1, "Appid"),
    MCH_ID((short)2, "MchId"),
    DEVICE_INFO((short)3, "DeviceInfo"),
    NONCE_STR((short)4, "NonceStr"),
    SIGN((short)5, "Sign"),
    SIGN_TYPE((short)6, "SignType"),
    BODY((short)7, "Body"),
    DETAIL((short)8, "Detail"),
    ATTACH((short)9, "Attach"),
    OUT_TRADE_NO((short)10, "OutTradeNo"),
    FEE_TYPE((short)11, "FeeType"),
    TOTAL_FEE((short)12, "TotalFee"),
    SPBILL_CREATE_IP((short)13, "SpbillCreateIp"),
    TIME_START((short)14, "TimeStart"),
    TIME_EXPIRE((short)15, "TimeExpire"),
    GOODS_TAG((short)16, "GoodsTag"),
    NOTIFY_URL((short)17, "NotifyUrl"),
    TRADE_TYPE((short)18, "TradeType"),
    PRODUCT_ID((short)19, "ProductId"),
    LIMIT_PAY((short)20, "LimitPay"),
    OPENID((short)21, "Openid"),
    RECEIPT((short)22, "Receipt"),
    SCENE_INFO((short)23, "Scene_info");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPID
          return APPID;
        case 2: // MCH_ID
          return MCH_ID;
        case 3: // DEVICE_INFO
          return DEVICE_INFO;
        case 4: // NONCE_STR
          return NONCE_STR;
        case 5: // SIGN
          return SIGN;
        case 6: // SIGN_TYPE
          return SIGN_TYPE;
        case 7: // BODY
          return BODY;
        case 8: // DETAIL
          return DETAIL;
        case 9: // ATTACH
          return ATTACH;
        case 10: // OUT_TRADE_NO
          return OUT_TRADE_NO;
        case 11: // FEE_TYPE
          return FEE_TYPE;
        case 12: // TOTAL_FEE
          return TOTAL_FEE;
        case 13: // SPBILL_CREATE_IP
          return SPBILL_CREATE_IP;
        case 14: // TIME_START
          return TIME_START;
        case 15: // TIME_EXPIRE
          return TIME_EXPIRE;
        case 16: // GOODS_TAG
          return GOODS_TAG;
        case 17: // NOTIFY_URL
          return NOTIFY_URL;
        case 18: // TRADE_TYPE
          return TRADE_TYPE;
        case 19: // PRODUCT_ID
          return PRODUCT_ID;
        case 20: // LIMIT_PAY
          return LIMIT_PAY;
        case 21: // OPENID
          return OPENID;
        case 22: // RECEIPT
          return RECEIPT;
        case 23: // SCENE_INFO
          return SCENE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("Appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MCH_ID, new org.apache.thrift.meta_data.FieldMetaData("MchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("DeviceInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NONCE_STR, new org.apache.thrift.meta_data.FieldMetaData("NonceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("Sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SignType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("Body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("Detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACH, new org.apache.thrift.meta_data.FieldMetaData("Attach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_TRADE_NO, new org.apache.thrift.meta_data.FieldMetaData("OutTradeNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("FeeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_FEE, new org.apache.thrift.meta_data.FieldMetaData("TotalFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPBILL_CREATE_IP, new org.apache.thrift.meta_data.FieldMetaData("SpbillCreateIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_START, new org.apache.thrift.meta_data.FieldMetaData("TimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("TimeExpire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_TAG, new org.apache.thrift.meta_data.FieldMetaData("GoodsTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_URL, new org.apache.thrift.meta_data.FieldMetaData("NotifyUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("TradeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("ProductId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_PAY, new org.apache.thrift.meta_data.FieldMetaData("LimitPay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPENID, new org.apache.thrift.meta_data.FieldMetaData("Openid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIPT, new org.apache.thrift.meta_data.FieldMetaData("Receipt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCENE_INFO, new org.apache.thrift.meta_data.FieldMetaData("Scene_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnifiedOrderParam.class, metaDataMap);
  }

  public UnifiedOrderParam() {
  }

  public UnifiedOrderParam(
    java.lang.String Appid,
    java.lang.String MchId,
    java.lang.String DeviceInfo,
    java.lang.String NonceStr,
    java.lang.String Sign,
    java.lang.String SignType,
    java.lang.String Body,
    java.lang.String Detail,
    java.lang.String Attach,
    java.lang.String OutTradeNo,
    java.lang.String FeeType,
    java.lang.String TotalFee,
    java.lang.String SpbillCreateIp,
    java.lang.String TimeStart,
    java.lang.String TimeExpire,
    java.lang.String GoodsTag,
    java.lang.String NotifyUrl,
    java.lang.String TradeType,
    java.lang.String ProductId,
    java.lang.String LimitPay,
    java.lang.String Openid,
    java.lang.String Receipt,
    java.lang.String Scene_info)
  {
    this();
    this.Appid = Appid;
    this.MchId = MchId;
    this.DeviceInfo = DeviceInfo;
    this.NonceStr = NonceStr;
    this.Sign = Sign;
    this.SignType = SignType;
    this.Body = Body;
    this.Detail = Detail;
    this.Attach = Attach;
    this.OutTradeNo = OutTradeNo;
    this.FeeType = FeeType;
    this.TotalFee = TotalFee;
    this.SpbillCreateIp = SpbillCreateIp;
    this.TimeStart = TimeStart;
    this.TimeExpire = TimeExpire;
    this.GoodsTag = GoodsTag;
    this.NotifyUrl = NotifyUrl;
    this.TradeType = TradeType;
    this.ProductId = ProductId;
    this.LimitPay = LimitPay;
    this.Openid = Openid;
    this.Receipt = Receipt;
    this.Scene_info = Scene_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UnifiedOrderParam(UnifiedOrderParam other) {
    if (other.isSetAppid()) {
      this.Appid = other.Appid;
    }
    if (other.isSetMchId()) {
      this.MchId = other.MchId;
    }
    if (other.isSetDeviceInfo()) {
      this.DeviceInfo = other.DeviceInfo;
    }
    if (other.isSetNonceStr()) {
      this.NonceStr = other.NonceStr;
    }
    if (other.isSetSign()) {
      this.Sign = other.Sign;
    }
    if (other.isSetSignType()) {
      this.SignType = other.SignType;
    }
    if (other.isSetBody()) {
      this.Body = other.Body;
    }
    if (other.isSetDetail()) {
      this.Detail = other.Detail;
    }
    if (other.isSetAttach()) {
      this.Attach = other.Attach;
    }
    if (other.isSetOutTradeNo()) {
      this.OutTradeNo = other.OutTradeNo;
    }
    if (other.isSetFeeType()) {
      this.FeeType = other.FeeType;
    }
    if (other.isSetTotalFee()) {
      this.TotalFee = other.TotalFee;
    }
    if (other.isSetSpbillCreateIp()) {
      this.SpbillCreateIp = other.SpbillCreateIp;
    }
    if (other.isSetTimeStart()) {
      this.TimeStart = other.TimeStart;
    }
    if (other.isSetTimeExpire()) {
      this.TimeExpire = other.TimeExpire;
    }
    if (other.isSetGoodsTag()) {
      this.GoodsTag = other.GoodsTag;
    }
    if (other.isSetNotifyUrl()) {
      this.NotifyUrl = other.NotifyUrl;
    }
    if (other.isSetTradeType()) {
      this.TradeType = other.TradeType;
    }
    if (other.isSetProductId()) {
      this.ProductId = other.ProductId;
    }
    if (other.isSetLimitPay()) {
      this.LimitPay = other.LimitPay;
    }
    if (other.isSetOpenid()) {
      this.Openid = other.Openid;
    }
    if (other.isSetReceipt()) {
      this.Receipt = other.Receipt;
    }
    if (other.isSetScene_info()) {
      this.Scene_info = other.Scene_info;
    }
  }

  public UnifiedOrderParam deepCopy() {
    return new UnifiedOrderParam(this);
  }

  @Override
  public void clear() {
    this.Appid = null;
    this.MchId = null;
    this.DeviceInfo = null;
    this.NonceStr = null;
    this.Sign = null;
    this.SignType = null;
    this.Body = null;
    this.Detail = null;
    this.Attach = null;
    this.OutTradeNo = null;
    this.FeeType = null;
    this.TotalFee = null;
    this.SpbillCreateIp = null;
    this.TimeStart = null;
    this.TimeExpire = null;
    this.GoodsTag = null;
    this.NotifyUrl = null;
    this.TradeType = null;
    this.ProductId = null;
    this.LimitPay = null;
    this.Openid = null;
    this.Receipt = null;
    this.Scene_info = null;
  }

  public java.lang.String getAppid() {
    return this.Appid;
  }

  public UnifiedOrderParam setAppid(java.lang.String Appid) {
    this.Appid = Appid;
    return this;
  }

  public void unsetAppid() {
    this.Appid = null;
  }

  /** Returns true if field Appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return this.Appid != null;
  }

  public void setAppidIsSet(boolean value) {
    if (!value) {
      this.Appid = null;
    }
  }

  public java.lang.String getMchId() {
    return this.MchId;
  }

  public UnifiedOrderParam setMchId(java.lang.String MchId) {
    this.MchId = MchId;
    return this;
  }

  public void unsetMchId() {
    this.MchId = null;
  }

  /** Returns true if field MchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMchId() {
    return this.MchId != null;
  }

  public void setMchIdIsSet(boolean value) {
    if (!value) {
      this.MchId = null;
    }
  }

  public java.lang.String getDeviceInfo() {
    return this.DeviceInfo;
  }

  public UnifiedOrderParam setDeviceInfo(java.lang.String DeviceInfo) {
    this.DeviceInfo = DeviceInfo;
    return this;
  }

  public void unsetDeviceInfo() {
    this.DeviceInfo = null;
  }

  /** Returns true if field DeviceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceInfo() {
    return this.DeviceInfo != null;
  }

  public void setDeviceInfoIsSet(boolean value) {
    if (!value) {
      this.DeviceInfo = null;
    }
  }

  public java.lang.String getNonceStr() {
    return this.NonceStr;
  }

  public UnifiedOrderParam setNonceStr(java.lang.String NonceStr) {
    this.NonceStr = NonceStr;
    return this;
  }

  public void unsetNonceStr() {
    this.NonceStr = null;
  }

  /** Returns true if field NonceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetNonceStr() {
    return this.NonceStr != null;
  }

  public void setNonceStrIsSet(boolean value) {
    if (!value) {
      this.NonceStr = null;
    }
  }

  public java.lang.String getSign() {
    return this.Sign;
  }

  public UnifiedOrderParam setSign(java.lang.String Sign) {
    this.Sign = Sign;
    return this;
  }

  public void unsetSign() {
    this.Sign = null;
  }

  /** Returns true if field Sign is set (has been assigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.Sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.Sign = null;
    }
  }

  public java.lang.String getSignType() {
    return this.SignType;
  }

  public UnifiedOrderParam setSignType(java.lang.String SignType) {
    this.SignType = SignType;
    return this;
  }

  public void unsetSignType() {
    this.SignType = null;
  }

  /** Returns true if field SignType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignType() {
    return this.SignType != null;
  }

  public void setSignTypeIsSet(boolean value) {
    if (!value) {
      this.SignType = null;
    }
  }

  public java.lang.String getBody() {
    return this.Body;
  }

  public UnifiedOrderParam setBody(java.lang.String Body) {
    this.Body = Body;
    return this;
  }

  public void unsetBody() {
    this.Body = null;
  }

  /** Returns true if field Body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.Body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.Body = null;
    }
  }

  public java.lang.String getDetail() {
    return this.Detail;
  }

  public UnifiedOrderParam setDetail(java.lang.String Detail) {
    this.Detail = Detail;
    return this;
  }

  public void unsetDetail() {
    this.Detail = null;
  }

  /** Returns true if field Detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.Detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.Detail = null;
    }
  }

  public java.lang.String getAttach() {
    return this.Attach;
  }

  public UnifiedOrderParam setAttach(java.lang.String Attach) {
    this.Attach = Attach;
    return this;
  }

  public void unsetAttach() {
    this.Attach = null;
  }

  /** Returns true if field Attach is set (has been assigned a value) and false otherwise */
  public boolean isSetAttach() {
    return this.Attach != null;
  }

  public void setAttachIsSet(boolean value) {
    if (!value) {
      this.Attach = null;
    }
  }

  public java.lang.String getOutTradeNo() {
    return this.OutTradeNo;
  }

  public UnifiedOrderParam setOutTradeNo(java.lang.String OutTradeNo) {
    this.OutTradeNo = OutTradeNo;
    return this;
  }

  public void unsetOutTradeNo() {
    this.OutTradeNo = null;
  }

  /** Returns true if field OutTradeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOutTradeNo() {
    return this.OutTradeNo != null;
  }

  public void setOutTradeNoIsSet(boolean value) {
    if (!value) {
      this.OutTradeNo = null;
    }
  }

  public java.lang.String getFeeType() {
    return this.FeeType;
  }

  public UnifiedOrderParam setFeeType(java.lang.String FeeType) {
    this.FeeType = FeeType;
    return this;
  }

  public void unsetFeeType() {
    this.FeeType = null;
  }

  /** Returns true if field FeeType is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeType() {
    return this.FeeType != null;
  }

  public void setFeeTypeIsSet(boolean value) {
    if (!value) {
      this.FeeType = null;
    }
  }

  public java.lang.String getTotalFee() {
    return this.TotalFee;
  }

  public UnifiedOrderParam setTotalFee(java.lang.String TotalFee) {
    this.TotalFee = TotalFee;
    return this;
  }

  public void unsetTotalFee() {
    this.TotalFee = null;
  }

  /** Returns true if field TotalFee is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFee() {
    return this.TotalFee != null;
  }

  public void setTotalFeeIsSet(boolean value) {
    if (!value) {
      this.TotalFee = null;
    }
  }

  public java.lang.String getSpbillCreateIp() {
    return this.SpbillCreateIp;
  }

  public UnifiedOrderParam setSpbillCreateIp(java.lang.String SpbillCreateIp) {
    this.SpbillCreateIp = SpbillCreateIp;
    return this;
  }

  public void unsetSpbillCreateIp() {
    this.SpbillCreateIp = null;
  }

  /** Returns true if field SpbillCreateIp is set (has been assigned a value) and false otherwise */
  public boolean isSetSpbillCreateIp() {
    return this.SpbillCreateIp != null;
  }

  public void setSpbillCreateIpIsSet(boolean value) {
    if (!value) {
      this.SpbillCreateIp = null;
    }
  }

  public java.lang.String getTimeStart() {
    return this.TimeStart;
  }

  public UnifiedOrderParam setTimeStart(java.lang.String TimeStart) {
    this.TimeStart = TimeStart;
    return this;
  }

  public void unsetTimeStart() {
    this.TimeStart = null;
  }

  /** Returns true if field TimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStart() {
    return this.TimeStart != null;
  }

  public void setTimeStartIsSet(boolean value) {
    if (!value) {
      this.TimeStart = null;
    }
  }

  public java.lang.String getTimeExpire() {
    return this.TimeExpire;
  }

  public UnifiedOrderParam setTimeExpire(java.lang.String TimeExpire) {
    this.TimeExpire = TimeExpire;
    return this;
  }

  public void unsetTimeExpire() {
    this.TimeExpire = null;
  }

  /** Returns true if field TimeExpire is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeExpire() {
    return this.TimeExpire != null;
  }

  public void setTimeExpireIsSet(boolean value) {
    if (!value) {
      this.TimeExpire = null;
    }
  }

  public java.lang.String getGoodsTag() {
    return this.GoodsTag;
  }

  public UnifiedOrderParam setGoodsTag(java.lang.String GoodsTag) {
    this.GoodsTag = GoodsTag;
    return this;
  }

  public void unsetGoodsTag() {
    this.GoodsTag = null;
  }

  /** Returns true if field GoodsTag is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsTag() {
    return this.GoodsTag != null;
  }

  public void setGoodsTagIsSet(boolean value) {
    if (!value) {
      this.GoodsTag = null;
    }
  }

  public java.lang.String getNotifyUrl() {
    return this.NotifyUrl;
  }

  public UnifiedOrderParam setNotifyUrl(java.lang.String NotifyUrl) {
    this.NotifyUrl = NotifyUrl;
    return this;
  }

  public void unsetNotifyUrl() {
    this.NotifyUrl = null;
  }

  /** Returns true if field NotifyUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyUrl() {
    return this.NotifyUrl != null;
  }

  public void setNotifyUrlIsSet(boolean value) {
    if (!value) {
      this.NotifyUrl = null;
    }
  }

  public java.lang.String getTradeType() {
    return this.TradeType;
  }

  public UnifiedOrderParam setTradeType(java.lang.String TradeType) {
    this.TradeType = TradeType;
    return this;
  }

  public void unsetTradeType() {
    this.TradeType = null;
  }

  /** Returns true if field TradeType is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeType() {
    return this.TradeType != null;
  }

  public void setTradeTypeIsSet(boolean value) {
    if (!value) {
      this.TradeType = null;
    }
  }

  public java.lang.String getProductId() {
    return this.ProductId;
  }

  public UnifiedOrderParam setProductId(java.lang.String ProductId) {
    this.ProductId = ProductId;
    return this;
  }

  public void unsetProductId() {
    this.ProductId = null;
  }

  /** Returns true if field ProductId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.ProductId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.ProductId = null;
    }
  }

  public java.lang.String getLimitPay() {
    return this.LimitPay;
  }

  public UnifiedOrderParam setLimitPay(java.lang.String LimitPay) {
    this.LimitPay = LimitPay;
    return this;
  }

  public void unsetLimitPay() {
    this.LimitPay = null;
  }

  /** Returns true if field LimitPay is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPay() {
    return this.LimitPay != null;
  }

  public void setLimitPayIsSet(boolean value) {
    if (!value) {
      this.LimitPay = null;
    }
  }

  public java.lang.String getOpenid() {
    return this.Openid;
  }

  public UnifiedOrderParam setOpenid(java.lang.String Openid) {
    this.Openid = Openid;
    return this;
  }

  public void unsetOpenid() {
    this.Openid = null;
  }

  /** Returns true if field Openid is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenid() {
    return this.Openid != null;
  }

  public void setOpenidIsSet(boolean value) {
    if (!value) {
      this.Openid = null;
    }
  }

  public java.lang.String getReceipt() {
    return this.Receipt;
  }

  public UnifiedOrderParam setReceipt(java.lang.String Receipt) {
    this.Receipt = Receipt;
    return this;
  }

  public void unsetReceipt() {
    this.Receipt = null;
  }

  /** Returns true if field Receipt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceipt() {
    return this.Receipt != null;
  }

  public void setReceiptIsSet(boolean value) {
    if (!value) {
      this.Receipt = null;
    }
  }

  public java.lang.String getScene_info() {
    return this.Scene_info;
  }

  public UnifiedOrderParam setScene_info(java.lang.String Scene_info) {
    this.Scene_info = Scene_info;
    return this;
  }

  public void unsetScene_info() {
    this.Scene_info = null;
  }

  /** Returns true if field Scene_info is set (has been assigned a value) and false otherwise */
  public boolean isSetScene_info() {
    return this.Scene_info != null;
  }

  public void setScene_infoIsSet(boolean value) {
    if (!value) {
      this.Scene_info = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((java.lang.String)value);
      }
      break;

    case MCH_ID:
      if (value == null) {
        unsetMchId();
      } else {
        setMchId((java.lang.String)value);
      }
      break;

    case DEVICE_INFO:
      if (value == null) {
        unsetDeviceInfo();
      } else {
        setDeviceInfo((java.lang.String)value);
      }
      break;

    case NONCE_STR:
      if (value == null) {
        unsetNonceStr();
      } else {
        setNonceStr((java.lang.String)value);
      }
      break;

    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((java.lang.String)value);
      }
      break;

    case SIGN_TYPE:
      if (value == null) {
        unsetSignType();
      } else {
        setSignType((java.lang.String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((java.lang.String)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((java.lang.String)value);
      }
      break;

    case ATTACH:
      if (value == null) {
        unsetAttach();
      } else {
        setAttach((java.lang.String)value);
      }
      break;

    case OUT_TRADE_NO:
      if (value == null) {
        unsetOutTradeNo();
      } else {
        setOutTradeNo((java.lang.String)value);
      }
      break;

    case FEE_TYPE:
      if (value == null) {
        unsetFeeType();
      } else {
        setFeeType((java.lang.String)value);
      }
      break;

    case TOTAL_FEE:
      if (value == null) {
        unsetTotalFee();
      } else {
        setTotalFee((java.lang.String)value);
      }
      break;

    case SPBILL_CREATE_IP:
      if (value == null) {
        unsetSpbillCreateIp();
      } else {
        setSpbillCreateIp((java.lang.String)value);
      }
      break;

    case TIME_START:
      if (value == null) {
        unsetTimeStart();
      } else {
        setTimeStart((java.lang.String)value);
      }
      break;

    case TIME_EXPIRE:
      if (value == null) {
        unsetTimeExpire();
      } else {
        setTimeExpire((java.lang.String)value);
      }
      break;

    case GOODS_TAG:
      if (value == null) {
        unsetGoodsTag();
      } else {
        setGoodsTag((java.lang.String)value);
      }
      break;

    case NOTIFY_URL:
      if (value == null) {
        unsetNotifyUrl();
      } else {
        setNotifyUrl((java.lang.String)value);
      }
      break;

    case TRADE_TYPE:
      if (value == null) {
        unsetTradeType();
      } else {
        setTradeType((java.lang.String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((java.lang.String)value);
      }
      break;

    case LIMIT_PAY:
      if (value == null) {
        unsetLimitPay();
      } else {
        setLimitPay((java.lang.String)value);
      }
      break;

    case OPENID:
      if (value == null) {
        unsetOpenid();
      } else {
        setOpenid((java.lang.String)value);
      }
      break;

    case RECEIPT:
      if (value == null) {
        unsetReceipt();
      } else {
        setReceipt((java.lang.String)value);
      }
      break;

    case SCENE_INFO:
      if (value == null) {
        unsetScene_info();
      } else {
        setScene_info((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APPID:
      return getAppid();

    case MCH_ID:
      return getMchId();

    case DEVICE_INFO:
      return getDeviceInfo();

    case NONCE_STR:
      return getNonceStr();

    case SIGN:
      return getSign();

    case SIGN_TYPE:
      return getSignType();

    case BODY:
      return getBody();

    case DETAIL:
      return getDetail();

    case ATTACH:
      return getAttach();

    case OUT_TRADE_NO:
      return getOutTradeNo();

    case FEE_TYPE:
      return getFeeType();

    case TOTAL_FEE:
      return getTotalFee();

    case SPBILL_CREATE_IP:
      return getSpbillCreateIp();

    case TIME_START:
      return getTimeStart();

    case TIME_EXPIRE:
      return getTimeExpire();

    case GOODS_TAG:
      return getGoodsTag();

    case NOTIFY_URL:
      return getNotifyUrl();

    case TRADE_TYPE:
      return getTradeType();

    case PRODUCT_ID:
      return getProductId();

    case LIMIT_PAY:
      return getLimitPay();

    case OPENID:
      return getOpenid();

    case RECEIPT:
      return getReceipt();

    case SCENE_INFO:
      return getScene_info();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APPID:
      return isSetAppid();
    case MCH_ID:
      return isSetMchId();
    case DEVICE_INFO:
      return isSetDeviceInfo();
    case NONCE_STR:
      return isSetNonceStr();
    case SIGN:
      return isSetSign();
    case SIGN_TYPE:
      return isSetSignType();
    case BODY:
      return isSetBody();
    case DETAIL:
      return isSetDetail();
    case ATTACH:
      return isSetAttach();
    case OUT_TRADE_NO:
      return isSetOutTradeNo();
    case FEE_TYPE:
      return isSetFeeType();
    case TOTAL_FEE:
      return isSetTotalFee();
    case SPBILL_CREATE_IP:
      return isSetSpbillCreateIp();
    case TIME_START:
      return isSetTimeStart();
    case TIME_EXPIRE:
      return isSetTimeExpire();
    case GOODS_TAG:
      return isSetGoodsTag();
    case NOTIFY_URL:
      return isSetNotifyUrl();
    case TRADE_TYPE:
      return isSetTradeType();
    case PRODUCT_ID:
      return isSetProductId();
    case LIMIT_PAY:
      return isSetLimitPay();
    case OPENID:
      return isSetOpenid();
    case RECEIPT:
      return isSetReceipt();
    case SCENE_INFO:
      return isSetScene_info();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UnifiedOrderParam)
      return this.equals((UnifiedOrderParam)that);
    return false;
  }

  public boolean equals(UnifiedOrderParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Appid = true && this.isSetAppid();
    boolean that_present_Appid = true && that.isSetAppid();
    if (this_present_Appid || that_present_Appid) {
      if (!(this_present_Appid && that_present_Appid))
        return false;
      if (!this.Appid.equals(that.Appid))
        return false;
    }

    boolean this_present_MchId = true && this.isSetMchId();
    boolean that_present_MchId = true && that.isSetMchId();
    if (this_present_MchId || that_present_MchId) {
      if (!(this_present_MchId && that_present_MchId))
        return false;
      if (!this.MchId.equals(that.MchId))
        return false;
    }

    boolean this_present_DeviceInfo = true && this.isSetDeviceInfo();
    boolean that_present_DeviceInfo = true && that.isSetDeviceInfo();
    if (this_present_DeviceInfo || that_present_DeviceInfo) {
      if (!(this_present_DeviceInfo && that_present_DeviceInfo))
        return false;
      if (!this.DeviceInfo.equals(that.DeviceInfo))
        return false;
    }

    boolean this_present_NonceStr = true && this.isSetNonceStr();
    boolean that_present_NonceStr = true && that.isSetNonceStr();
    if (this_present_NonceStr || that_present_NonceStr) {
      if (!(this_present_NonceStr && that_present_NonceStr))
        return false;
      if (!this.NonceStr.equals(that.NonceStr))
        return false;
    }

    boolean this_present_Sign = true && this.isSetSign();
    boolean that_present_Sign = true && that.isSetSign();
    if (this_present_Sign || that_present_Sign) {
      if (!(this_present_Sign && that_present_Sign))
        return false;
      if (!this.Sign.equals(that.Sign))
        return false;
    }

    boolean this_present_SignType = true && this.isSetSignType();
    boolean that_present_SignType = true && that.isSetSignType();
    if (this_present_SignType || that_present_SignType) {
      if (!(this_present_SignType && that_present_SignType))
        return false;
      if (!this.SignType.equals(that.SignType))
        return false;
    }

    boolean this_present_Body = true && this.isSetBody();
    boolean that_present_Body = true && that.isSetBody();
    if (this_present_Body || that_present_Body) {
      if (!(this_present_Body && that_present_Body))
        return false;
      if (!this.Body.equals(that.Body))
        return false;
    }

    boolean this_present_Detail = true && this.isSetDetail();
    boolean that_present_Detail = true && that.isSetDetail();
    if (this_present_Detail || that_present_Detail) {
      if (!(this_present_Detail && that_present_Detail))
        return false;
      if (!this.Detail.equals(that.Detail))
        return false;
    }

    boolean this_present_Attach = true && this.isSetAttach();
    boolean that_present_Attach = true && that.isSetAttach();
    if (this_present_Attach || that_present_Attach) {
      if (!(this_present_Attach && that_present_Attach))
        return false;
      if (!this.Attach.equals(that.Attach))
        return false;
    }

    boolean this_present_OutTradeNo = true && this.isSetOutTradeNo();
    boolean that_present_OutTradeNo = true && that.isSetOutTradeNo();
    if (this_present_OutTradeNo || that_present_OutTradeNo) {
      if (!(this_present_OutTradeNo && that_present_OutTradeNo))
        return false;
      if (!this.OutTradeNo.equals(that.OutTradeNo))
        return false;
    }

    boolean this_present_FeeType = true && this.isSetFeeType();
    boolean that_present_FeeType = true && that.isSetFeeType();
    if (this_present_FeeType || that_present_FeeType) {
      if (!(this_present_FeeType && that_present_FeeType))
        return false;
      if (!this.FeeType.equals(that.FeeType))
        return false;
    }

    boolean this_present_TotalFee = true && this.isSetTotalFee();
    boolean that_present_TotalFee = true && that.isSetTotalFee();
    if (this_present_TotalFee || that_present_TotalFee) {
      if (!(this_present_TotalFee && that_present_TotalFee))
        return false;
      if (!this.TotalFee.equals(that.TotalFee))
        return false;
    }

    boolean this_present_SpbillCreateIp = true && this.isSetSpbillCreateIp();
    boolean that_present_SpbillCreateIp = true && that.isSetSpbillCreateIp();
    if (this_present_SpbillCreateIp || that_present_SpbillCreateIp) {
      if (!(this_present_SpbillCreateIp && that_present_SpbillCreateIp))
        return false;
      if (!this.SpbillCreateIp.equals(that.SpbillCreateIp))
        return false;
    }

    boolean this_present_TimeStart = true && this.isSetTimeStart();
    boolean that_present_TimeStart = true && that.isSetTimeStart();
    if (this_present_TimeStart || that_present_TimeStart) {
      if (!(this_present_TimeStart && that_present_TimeStart))
        return false;
      if (!this.TimeStart.equals(that.TimeStart))
        return false;
    }

    boolean this_present_TimeExpire = true && this.isSetTimeExpire();
    boolean that_present_TimeExpire = true && that.isSetTimeExpire();
    if (this_present_TimeExpire || that_present_TimeExpire) {
      if (!(this_present_TimeExpire && that_present_TimeExpire))
        return false;
      if (!this.TimeExpire.equals(that.TimeExpire))
        return false;
    }

    boolean this_present_GoodsTag = true && this.isSetGoodsTag();
    boolean that_present_GoodsTag = true && that.isSetGoodsTag();
    if (this_present_GoodsTag || that_present_GoodsTag) {
      if (!(this_present_GoodsTag && that_present_GoodsTag))
        return false;
      if (!this.GoodsTag.equals(that.GoodsTag))
        return false;
    }

    boolean this_present_NotifyUrl = true && this.isSetNotifyUrl();
    boolean that_present_NotifyUrl = true && that.isSetNotifyUrl();
    if (this_present_NotifyUrl || that_present_NotifyUrl) {
      if (!(this_present_NotifyUrl && that_present_NotifyUrl))
        return false;
      if (!this.NotifyUrl.equals(that.NotifyUrl))
        return false;
    }

    boolean this_present_TradeType = true && this.isSetTradeType();
    boolean that_present_TradeType = true && that.isSetTradeType();
    if (this_present_TradeType || that_present_TradeType) {
      if (!(this_present_TradeType && that_present_TradeType))
        return false;
      if (!this.TradeType.equals(that.TradeType))
        return false;
    }

    boolean this_present_ProductId = true && this.isSetProductId();
    boolean that_present_ProductId = true && that.isSetProductId();
    if (this_present_ProductId || that_present_ProductId) {
      if (!(this_present_ProductId && that_present_ProductId))
        return false;
      if (!this.ProductId.equals(that.ProductId))
        return false;
    }

    boolean this_present_LimitPay = true && this.isSetLimitPay();
    boolean that_present_LimitPay = true && that.isSetLimitPay();
    if (this_present_LimitPay || that_present_LimitPay) {
      if (!(this_present_LimitPay && that_present_LimitPay))
        return false;
      if (!this.LimitPay.equals(that.LimitPay))
        return false;
    }

    boolean this_present_Openid = true && this.isSetOpenid();
    boolean that_present_Openid = true && that.isSetOpenid();
    if (this_present_Openid || that_present_Openid) {
      if (!(this_present_Openid && that_present_Openid))
        return false;
      if (!this.Openid.equals(that.Openid))
        return false;
    }

    boolean this_present_Receipt = true && this.isSetReceipt();
    boolean that_present_Receipt = true && that.isSetReceipt();
    if (this_present_Receipt || that_present_Receipt) {
      if (!(this_present_Receipt && that_present_Receipt))
        return false;
      if (!this.Receipt.equals(that.Receipt))
        return false;
    }

    boolean this_present_Scene_info = true && this.isSetScene_info();
    boolean that_present_Scene_info = true && that.isSetScene_info();
    if (this_present_Scene_info || that_present_Scene_info) {
      if (!(this_present_Scene_info && that_present_Scene_info))
        return false;
      if (!this.Scene_info.equals(that.Scene_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppid()) ? 131071 : 524287);
    if (isSetAppid())
      hashCode = hashCode * 8191 + Appid.hashCode();

    hashCode = hashCode * 8191 + ((isSetMchId()) ? 131071 : 524287);
    if (isSetMchId())
      hashCode = hashCode * 8191 + MchId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceInfo()) ? 131071 : 524287);
    if (isSetDeviceInfo())
      hashCode = hashCode * 8191 + DeviceInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetNonceStr()) ? 131071 : 524287);
    if (isSetNonceStr())
      hashCode = hashCode * 8191 + NonceStr.hashCode();

    hashCode = hashCode * 8191 + ((isSetSign()) ? 131071 : 524287);
    if (isSetSign())
      hashCode = hashCode * 8191 + Sign.hashCode();

    hashCode = hashCode * 8191 + ((isSetSignType()) ? 131071 : 524287);
    if (isSetSignType())
      hashCode = hashCode * 8191 + SignType.hashCode();

    hashCode = hashCode * 8191 + ((isSetBody()) ? 131071 : 524287);
    if (isSetBody())
      hashCode = hashCode * 8191 + Body.hashCode();

    hashCode = hashCode * 8191 + ((isSetDetail()) ? 131071 : 524287);
    if (isSetDetail())
      hashCode = hashCode * 8191 + Detail.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttach()) ? 131071 : 524287);
    if (isSetAttach())
      hashCode = hashCode * 8191 + Attach.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutTradeNo()) ? 131071 : 524287);
    if (isSetOutTradeNo())
      hashCode = hashCode * 8191 + OutTradeNo.hashCode();

    hashCode = hashCode * 8191 + ((isSetFeeType()) ? 131071 : 524287);
    if (isSetFeeType())
      hashCode = hashCode * 8191 + FeeType.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotalFee()) ? 131071 : 524287);
    if (isSetTotalFee())
      hashCode = hashCode * 8191 + TotalFee.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpbillCreateIp()) ? 131071 : 524287);
    if (isSetSpbillCreateIp())
      hashCode = hashCode * 8191 + SpbillCreateIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeStart()) ? 131071 : 524287);
    if (isSetTimeStart())
      hashCode = hashCode * 8191 + TimeStart.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeExpire()) ? 131071 : 524287);
    if (isSetTimeExpire())
      hashCode = hashCode * 8191 + TimeExpire.hashCode();

    hashCode = hashCode * 8191 + ((isSetGoodsTag()) ? 131071 : 524287);
    if (isSetGoodsTag())
      hashCode = hashCode * 8191 + GoodsTag.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotifyUrl()) ? 131071 : 524287);
    if (isSetNotifyUrl())
      hashCode = hashCode * 8191 + NotifyUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetTradeType()) ? 131071 : 524287);
    if (isSetTradeType())
      hashCode = hashCode * 8191 + TradeType.hashCode();

    hashCode = hashCode * 8191 + ((isSetProductId()) ? 131071 : 524287);
    if (isSetProductId())
      hashCode = hashCode * 8191 + ProductId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLimitPay()) ? 131071 : 524287);
    if (isSetLimitPay())
      hashCode = hashCode * 8191 + LimitPay.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpenid()) ? 131071 : 524287);
    if (isSetOpenid())
      hashCode = hashCode * 8191 + Openid.hashCode();

    hashCode = hashCode * 8191 + ((isSetReceipt()) ? 131071 : 524287);
    if (isSetReceipt())
      hashCode = hashCode * 8191 + Receipt.hashCode();

    hashCode = hashCode * 8191 + ((isSetScene_info()) ? 131071 : 524287);
    if (isSetScene_info())
      hashCode = hashCode * 8191 + Scene_info.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UnifiedOrderParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Appid, other.Appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMchId()).compareTo(other.isSetMchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MchId, other.MchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceInfo()).compareTo(other.isSetDeviceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DeviceInfo, other.DeviceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNonceStr()).compareTo(other.isSetNonceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NonceStr, other.NonceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSign()).compareTo(other.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Sign, other.Sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignType()).compareTo(other.isSetSignType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SignType, other.SignType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Body, other.Body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDetail()).compareTo(other.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Detail, other.Detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttach()).compareTo(other.isSetAttach());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttach()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Attach, other.Attach);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutTradeNo()).compareTo(other.isSetOutTradeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutTradeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OutTradeNo, other.OutTradeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFeeType()).compareTo(other.isSetFeeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FeeType, other.FeeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalFee()).compareTo(other.isSetTotalFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TotalFee, other.TotalFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpbillCreateIp()).compareTo(other.isSetSpbillCreateIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpbillCreateIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SpbillCreateIp, other.SpbillCreateIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeStart()).compareTo(other.isSetTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TimeStart, other.TimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeExpire()).compareTo(other.isSetTimeExpire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeExpire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TimeExpire, other.TimeExpire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGoodsTag()).compareTo(other.isSetGoodsTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GoodsTag, other.GoodsTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotifyUrl()).compareTo(other.isSetNotifyUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NotifyUrl, other.NotifyUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTradeType()).compareTo(other.isSetTradeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TradeType, other.TradeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProductId, other.ProductId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimitPay()).compareTo(other.isSetLimitPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LimitPay, other.LimitPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpenid()).compareTo(other.isSetOpenid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Openid, other.Openid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReceipt()).compareTo(other.isSetReceipt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceipt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Receipt, other.Receipt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScene_info()).compareTo(other.isSetScene_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScene_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Scene_info, other.Scene_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UnifiedOrderParam(");
    boolean first = true;

    sb.append("Appid:");
    if (this.Appid == null) {
      sb.append("null");
    } else {
      sb.append(this.Appid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MchId:");
    if (this.MchId == null) {
      sb.append("null");
    } else {
      sb.append(this.MchId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DeviceInfo:");
    if (this.DeviceInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.DeviceInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NonceStr:");
    if (this.NonceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.NonceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Sign:");
    if (this.Sign == null) {
      sb.append("null");
    } else {
      sb.append(this.Sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SignType:");
    if (this.SignType == null) {
      sb.append("null");
    } else {
      sb.append(this.SignType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Body:");
    if (this.Body == null) {
      sb.append("null");
    } else {
      sb.append(this.Body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Detail:");
    if (this.Detail == null) {
      sb.append("null");
    } else {
      sb.append(this.Detail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Attach:");
    if (this.Attach == null) {
      sb.append("null");
    } else {
      sb.append(this.Attach);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OutTradeNo:");
    if (this.OutTradeNo == null) {
      sb.append("null");
    } else {
      sb.append(this.OutTradeNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FeeType:");
    if (this.FeeType == null) {
      sb.append("null");
    } else {
      sb.append(this.FeeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TotalFee:");
    if (this.TotalFee == null) {
      sb.append("null");
    } else {
      sb.append(this.TotalFee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SpbillCreateIp:");
    if (this.SpbillCreateIp == null) {
      sb.append("null");
    } else {
      sb.append(this.SpbillCreateIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TimeStart:");
    if (this.TimeStart == null) {
      sb.append("null");
    } else {
      sb.append(this.TimeStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TimeExpire:");
    if (this.TimeExpire == null) {
      sb.append("null");
    } else {
      sb.append(this.TimeExpire);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("GoodsTag:");
    if (this.GoodsTag == null) {
      sb.append("null");
    } else {
      sb.append(this.GoodsTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NotifyUrl:");
    if (this.NotifyUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.NotifyUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TradeType:");
    if (this.TradeType == null) {
      sb.append("null");
    } else {
      sb.append(this.TradeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProductId:");
    if (this.ProductId == null) {
      sb.append("null");
    } else {
      sb.append(this.ProductId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LimitPay:");
    if (this.LimitPay == null) {
      sb.append("null");
    } else {
      sb.append(this.LimitPay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Openid:");
    if (this.Openid == null) {
      sb.append("null");
    } else {
      sb.append(this.Openid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Receipt:");
    if (this.Receipt == null) {
      sb.append("null");
    } else {
      sb.append(this.Receipt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Scene_info:");
    if (this.Scene_info == null) {
      sb.append("null");
    } else {
      sb.append(this.Scene_info);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UnifiedOrderParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UnifiedOrderParamStandardScheme getScheme() {
      return new UnifiedOrderParamStandardScheme();
    }
  }

  private static class UnifiedOrderParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<UnifiedOrderParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UnifiedOrderParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Appid = iprot.readString();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MchId = iprot.readString();
              struct.setMchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DeviceInfo = iprot.readString();
              struct.setDeviceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NONCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NonceStr = iprot.readString();
              struct.setNonceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Sign = iprot.readString();
              struct.setSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIGN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SignType = iprot.readString();
              struct.setSignTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Detail = iprot.readString();
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ATTACH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Attach = iprot.readString();
              struct.setAttachIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUT_TRADE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OutTradeNo = iprot.readString();
              struct.setOutTradeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FEE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FeeType = iprot.readString();
              struct.setFeeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TotalFee = iprot.readString();
              struct.setTotalFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SPBILL_CREATE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SpbillCreateIp = iprot.readString();
              struct.setSpbillCreateIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TimeStart = iprot.readString();
              struct.setTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TIME_EXPIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TimeExpire = iprot.readString();
              struct.setTimeExpireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GOODS_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.GoodsTag = iprot.readString();
              struct.setGoodsTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NOTIFY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NotifyUrl = iprot.readString();
              struct.setNotifyUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TRADE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TradeType = iprot.readString();
              struct.setTradeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ProductId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LIMIT_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LimitPay = iprot.readString();
              struct.setLimitPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Openid = iprot.readString();
              struct.setOpenidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RECEIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Receipt = iprot.readString();
              struct.setReceiptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SCENE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Scene_info = iprot.readString();
              struct.setScene_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UnifiedOrderParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Appid != null) {
        oprot.writeFieldBegin(APPID_FIELD_DESC);
        oprot.writeString(struct.Appid);
        oprot.writeFieldEnd();
      }
      if (struct.MchId != null) {
        oprot.writeFieldBegin(MCH_ID_FIELD_DESC);
        oprot.writeString(struct.MchId);
        oprot.writeFieldEnd();
      }
      if (struct.DeviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        oprot.writeString(struct.DeviceInfo);
        oprot.writeFieldEnd();
      }
      if (struct.NonceStr != null) {
        oprot.writeFieldBegin(NONCE_STR_FIELD_DESC);
        oprot.writeString(struct.NonceStr);
        oprot.writeFieldEnd();
      }
      if (struct.Sign != null) {
        oprot.writeFieldBegin(SIGN_FIELD_DESC);
        oprot.writeString(struct.Sign);
        oprot.writeFieldEnd();
      }
      if (struct.SignType != null) {
        oprot.writeFieldBegin(SIGN_TYPE_FIELD_DESC);
        oprot.writeString(struct.SignType);
        oprot.writeFieldEnd();
      }
      if (struct.Body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.Body);
        oprot.writeFieldEnd();
      }
      if (struct.Detail != null) {
        oprot.writeFieldBegin(DETAIL_FIELD_DESC);
        oprot.writeString(struct.Detail);
        oprot.writeFieldEnd();
      }
      if (struct.Attach != null) {
        oprot.writeFieldBegin(ATTACH_FIELD_DESC);
        oprot.writeString(struct.Attach);
        oprot.writeFieldEnd();
      }
      if (struct.OutTradeNo != null) {
        oprot.writeFieldBegin(OUT_TRADE_NO_FIELD_DESC);
        oprot.writeString(struct.OutTradeNo);
        oprot.writeFieldEnd();
      }
      if (struct.FeeType != null) {
        oprot.writeFieldBegin(FEE_TYPE_FIELD_DESC);
        oprot.writeString(struct.FeeType);
        oprot.writeFieldEnd();
      }
      if (struct.TotalFee != null) {
        oprot.writeFieldBegin(TOTAL_FEE_FIELD_DESC);
        oprot.writeString(struct.TotalFee);
        oprot.writeFieldEnd();
      }
      if (struct.SpbillCreateIp != null) {
        oprot.writeFieldBegin(SPBILL_CREATE_IP_FIELD_DESC);
        oprot.writeString(struct.SpbillCreateIp);
        oprot.writeFieldEnd();
      }
      if (struct.TimeStart != null) {
        oprot.writeFieldBegin(TIME_START_FIELD_DESC);
        oprot.writeString(struct.TimeStart);
        oprot.writeFieldEnd();
      }
      if (struct.TimeExpire != null) {
        oprot.writeFieldBegin(TIME_EXPIRE_FIELD_DESC);
        oprot.writeString(struct.TimeExpire);
        oprot.writeFieldEnd();
      }
      if (struct.GoodsTag != null) {
        oprot.writeFieldBegin(GOODS_TAG_FIELD_DESC);
        oprot.writeString(struct.GoodsTag);
        oprot.writeFieldEnd();
      }
      if (struct.NotifyUrl != null) {
        oprot.writeFieldBegin(NOTIFY_URL_FIELD_DESC);
        oprot.writeString(struct.NotifyUrl);
        oprot.writeFieldEnd();
      }
      if (struct.TradeType != null) {
        oprot.writeFieldBegin(TRADE_TYPE_FIELD_DESC);
        oprot.writeString(struct.TradeType);
        oprot.writeFieldEnd();
      }
      if (struct.ProductId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.ProductId);
        oprot.writeFieldEnd();
      }
      if (struct.LimitPay != null) {
        oprot.writeFieldBegin(LIMIT_PAY_FIELD_DESC);
        oprot.writeString(struct.LimitPay);
        oprot.writeFieldEnd();
      }
      if (struct.Openid != null) {
        oprot.writeFieldBegin(OPENID_FIELD_DESC);
        oprot.writeString(struct.Openid);
        oprot.writeFieldEnd();
      }
      if (struct.Receipt != null) {
        oprot.writeFieldBegin(RECEIPT_FIELD_DESC);
        oprot.writeString(struct.Receipt);
        oprot.writeFieldEnd();
      }
      if (struct.Scene_info != null) {
        oprot.writeFieldBegin(SCENE_INFO_FIELD_DESC);
        oprot.writeString(struct.Scene_info);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UnifiedOrderParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UnifiedOrderParamTupleScheme getScheme() {
      return new UnifiedOrderParamTupleScheme();
    }
  }

  private static class UnifiedOrderParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<UnifiedOrderParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UnifiedOrderParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppid()) {
        optionals.set(0);
      }
      if (struct.isSetMchId()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceInfo()) {
        optionals.set(2);
      }
      if (struct.isSetNonceStr()) {
        optionals.set(3);
      }
      if (struct.isSetSign()) {
        optionals.set(4);
      }
      if (struct.isSetSignType()) {
        optionals.set(5);
      }
      if (struct.isSetBody()) {
        optionals.set(6);
      }
      if (struct.isSetDetail()) {
        optionals.set(7);
      }
      if (struct.isSetAttach()) {
        optionals.set(8);
      }
      if (struct.isSetOutTradeNo()) {
        optionals.set(9);
      }
      if (struct.isSetFeeType()) {
        optionals.set(10);
      }
      if (struct.isSetTotalFee()) {
        optionals.set(11);
      }
      if (struct.isSetSpbillCreateIp()) {
        optionals.set(12);
      }
      if (struct.isSetTimeStart()) {
        optionals.set(13);
      }
      if (struct.isSetTimeExpire()) {
        optionals.set(14);
      }
      if (struct.isSetGoodsTag()) {
        optionals.set(15);
      }
      if (struct.isSetNotifyUrl()) {
        optionals.set(16);
      }
      if (struct.isSetTradeType()) {
        optionals.set(17);
      }
      if (struct.isSetProductId()) {
        optionals.set(18);
      }
      if (struct.isSetLimitPay()) {
        optionals.set(19);
      }
      if (struct.isSetOpenid()) {
        optionals.set(20);
      }
      if (struct.isSetReceipt()) {
        optionals.set(21);
      }
      if (struct.isSetScene_info()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetAppid()) {
        oprot.writeString(struct.Appid);
      }
      if (struct.isSetMchId()) {
        oprot.writeString(struct.MchId);
      }
      if (struct.isSetDeviceInfo()) {
        oprot.writeString(struct.DeviceInfo);
      }
      if (struct.isSetNonceStr()) {
        oprot.writeString(struct.NonceStr);
      }
      if (struct.isSetSign()) {
        oprot.writeString(struct.Sign);
      }
      if (struct.isSetSignType()) {
        oprot.writeString(struct.SignType);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.Body);
      }
      if (struct.isSetDetail()) {
        oprot.writeString(struct.Detail);
      }
      if (struct.isSetAttach()) {
        oprot.writeString(struct.Attach);
      }
      if (struct.isSetOutTradeNo()) {
        oprot.writeString(struct.OutTradeNo);
      }
      if (struct.isSetFeeType()) {
        oprot.writeString(struct.FeeType);
      }
      if (struct.isSetTotalFee()) {
        oprot.writeString(struct.TotalFee);
      }
      if (struct.isSetSpbillCreateIp()) {
        oprot.writeString(struct.SpbillCreateIp);
      }
      if (struct.isSetTimeStart()) {
        oprot.writeString(struct.TimeStart);
      }
      if (struct.isSetTimeExpire()) {
        oprot.writeString(struct.TimeExpire);
      }
      if (struct.isSetGoodsTag()) {
        oprot.writeString(struct.GoodsTag);
      }
      if (struct.isSetNotifyUrl()) {
        oprot.writeString(struct.NotifyUrl);
      }
      if (struct.isSetTradeType()) {
        oprot.writeString(struct.TradeType);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.ProductId);
      }
      if (struct.isSetLimitPay()) {
        oprot.writeString(struct.LimitPay);
      }
      if (struct.isSetOpenid()) {
        oprot.writeString(struct.Openid);
      }
      if (struct.isSetReceipt()) {
        oprot.writeString(struct.Receipt);
      }
      if (struct.isSetScene_info()) {
        oprot.writeString(struct.Scene_info);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UnifiedOrderParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.Appid = iprot.readString();
        struct.setAppidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.MchId = iprot.readString();
        struct.setMchIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.DeviceInfo = iprot.readString();
        struct.setDeviceInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.NonceStr = iprot.readString();
        struct.setNonceStrIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Sign = iprot.readString();
        struct.setSignIsSet(true);
      }
      if (incoming.get(5)) {
        struct.SignType = iprot.readString();
        struct.setSignTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.Detail = iprot.readString();
        struct.setDetailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.Attach = iprot.readString();
        struct.setAttachIsSet(true);
      }
      if (incoming.get(9)) {
        struct.OutTradeNo = iprot.readString();
        struct.setOutTradeNoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.FeeType = iprot.readString();
        struct.setFeeTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.TotalFee = iprot.readString();
        struct.setTotalFeeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.SpbillCreateIp = iprot.readString();
        struct.setSpbillCreateIpIsSet(true);
      }
      if (incoming.get(13)) {
        struct.TimeStart = iprot.readString();
        struct.setTimeStartIsSet(true);
      }
      if (incoming.get(14)) {
        struct.TimeExpire = iprot.readString();
        struct.setTimeExpireIsSet(true);
      }
      if (incoming.get(15)) {
        struct.GoodsTag = iprot.readString();
        struct.setGoodsTagIsSet(true);
      }
      if (incoming.get(16)) {
        struct.NotifyUrl = iprot.readString();
        struct.setNotifyUrlIsSet(true);
      }
      if (incoming.get(17)) {
        struct.TradeType = iprot.readString();
        struct.setTradeTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.ProductId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.LimitPay = iprot.readString();
        struct.setLimitPayIsSet(true);
      }
      if (incoming.get(20)) {
        struct.Openid = iprot.readString();
        struct.setOpenidIsSet(true);
      }
      if (incoming.get(21)) {
        struct.Receipt = iprot.readString();
        struct.setReceiptIsSet(true);
      }
      if (incoming.get(22)) {
        struct.Scene_info = iprot.readString();
        struct.setScene_infoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

