/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class button implements org.apache.thrift.TBase<button, button._Fields>, java.io.Serializable, Cloneable, Comparable<button> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("button");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("media_id", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAGEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("pagepath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUB_BUTTON_FIELD_DESC = new org.apache.thrift.protocol.TField("sub_button", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new buttonStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new buttonTupleSchemeFactory();

  public java.lang.String type; // required
  public java.lang.String name; // required
  public java.lang.String key; // required
  public java.lang.String url; // required
  public java.lang.String media_id; // required
  public java.lang.String appid; // required
  public java.lang.String pagepath; // required
  public java.util.List<sub_button> sub_button; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    NAME((short)2, "name"),
    KEY((short)3, "key"),
    URL((short)4, "url"),
    MEDIA_ID((short)5, "media_id"),
    APPID((short)6, "appid"),
    PAGEPATH((short)7, "pagepath"),
    SUB_BUTTON((short)8, "sub_button");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // NAME
          return NAME;
        case 3: // KEY
          return KEY;
        case 4: // URL
          return URL;
        case 5: // MEDIA_ID
          return MEDIA_ID;
        case 6: // APPID
          return APPID;
        case 7: // PAGEPATH
          return PAGEPATH;
        case 8: // SUB_BUTTON
          return SUB_BUTTON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("media_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGEPATH, new org.apache.thrift.meta_data.FieldMetaData("pagepath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_BUTTON, new org.apache.thrift.meta_data.FieldMetaData("sub_button", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "sub_button"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(button.class, metaDataMap);
  }

  public button() {
  }

  public button(
    java.lang.String type,
    java.lang.String name,
    java.lang.String key,
    java.lang.String url,
    java.lang.String media_id,
    java.lang.String appid,
    java.lang.String pagepath,
    java.util.List<sub_button> sub_button)
  {
    this();
    this.type = type;
    this.name = name;
    this.key = key;
    this.url = url;
    this.media_id = media_id;
    this.appid = appid;
    this.pagepath = pagepath;
    this.sub_button = sub_button;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public button(button other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetMedia_id()) {
      this.media_id = other.media_id;
    }
    if (other.isSetAppid()) {
      this.appid = other.appid;
    }
    if (other.isSetPagepath()) {
      this.pagepath = other.pagepath;
    }
    if (other.isSetSub_button()) {
      java.util.List<sub_button> __this__sub_button = new java.util.ArrayList<sub_button>(other.sub_button.size());
      for (sub_button other_element : other.sub_button) {
        __this__sub_button.add(other_element);
      }
      this.sub_button = __this__sub_button;
    }
  }

  public button deepCopy() {
    return new button(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.name = null;
    this.key = null;
    this.url = null;
    this.media_id = null;
    this.appid = null;
    this.pagepath = null;
    this.sub_button = null;
  }

  public java.lang.String getType() {
    return this.type;
  }

  public button setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public button setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getKey() {
    return this.key;
  }

  public button setKey(java.lang.String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public button setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public java.lang.String getMedia_id() {
    return this.media_id;
  }

  public button setMedia_id(java.lang.String media_id) {
    this.media_id = media_id;
    return this;
  }

  public void unsetMedia_id() {
    this.media_id = null;
  }

  /** Returns true if field media_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_id() {
    return this.media_id != null;
  }

  public void setMedia_idIsSet(boolean value) {
    if (!value) {
      this.media_id = null;
    }
  }

  public java.lang.String getAppid() {
    return this.appid;
  }

  public button setAppid(java.lang.String appid) {
    this.appid = appid;
    return this;
  }

  public void unsetAppid() {
    this.appid = null;
  }

  /** Returns true if field appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return this.appid != null;
  }

  public void setAppidIsSet(boolean value) {
    if (!value) {
      this.appid = null;
    }
  }

  public java.lang.String getPagepath() {
    return this.pagepath;
  }

  public button setPagepath(java.lang.String pagepath) {
    this.pagepath = pagepath;
    return this;
  }

  public void unsetPagepath() {
    this.pagepath = null;
  }

  /** Returns true if field pagepath is set (has been assigned a value) and false otherwise */
  public boolean isSetPagepath() {
    return this.pagepath != null;
  }

  public void setPagepathIsSet(boolean value) {
    if (!value) {
      this.pagepath = null;
    }
  }

  public int getSub_buttonSize() {
    return (this.sub_button == null) ? 0 : this.sub_button.size();
  }

  public java.util.Iterator<sub_button> getSub_buttonIterator() {
    return (this.sub_button == null) ? null : this.sub_button.iterator();
  }

  public void addToSub_button(sub_button elem) {
    if (this.sub_button == null) {
      this.sub_button = new java.util.ArrayList<sub_button>();
    }
    this.sub_button.add(elem);
  }

  public java.util.List<sub_button> getSub_button() {
    return this.sub_button;
  }

  public button setSub_button(java.util.List<sub_button> sub_button) {
    this.sub_button = sub_button;
    return this;
  }

  public void unsetSub_button() {
    this.sub_button = null;
  }

  /** Returns true if field sub_button is set (has been assigned a value) and false otherwise */
  public boolean isSetSub_button() {
    return this.sub_button != null;
  }

  public void setSub_buttonIsSet(boolean value) {
    if (!value) {
      this.sub_button = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case MEDIA_ID:
      if (value == null) {
        unsetMedia_id();
      } else {
        setMedia_id((java.lang.String)value);
      }
      break;

    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((java.lang.String)value);
      }
      break;

    case PAGEPATH:
      if (value == null) {
        unsetPagepath();
      } else {
        setPagepath((java.lang.String)value);
      }
      break;

    case SUB_BUTTON:
      if (value == null) {
        unsetSub_button();
      } else {
        setSub_button((java.util.List<sub_button>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case NAME:
      return getName();

    case KEY:
      return getKey();

    case URL:
      return getUrl();

    case MEDIA_ID:
      return getMedia_id();

    case APPID:
      return getAppid();

    case PAGEPATH:
      return getPagepath();

    case SUB_BUTTON:
      return getSub_button();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case KEY:
      return isSetKey();
    case URL:
      return isSetUrl();
    case MEDIA_ID:
      return isSetMedia_id();
    case APPID:
      return isSetAppid();
    case PAGEPATH:
      return isSetPagepath();
    case SUB_BUTTON:
      return isSetSub_button();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof button)
      return this.equals((button)that);
    return false;
  }

  public boolean equals(button that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_media_id = true && this.isSetMedia_id();
    boolean that_present_media_id = true && that.isSetMedia_id();
    if (this_present_media_id || that_present_media_id) {
      if (!(this_present_media_id && that_present_media_id))
        return false;
      if (!this.media_id.equals(that.media_id))
        return false;
    }

    boolean this_present_appid = true && this.isSetAppid();
    boolean that_present_appid = true && that.isSetAppid();
    if (this_present_appid || that_present_appid) {
      if (!(this_present_appid && that_present_appid))
        return false;
      if (!this.appid.equals(that.appid))
        return false;
    }

    boolean this_present_pagepath = true && this.isSetPagepath();
    boolean that_present_pagepath = true && that.isSetPagepath();
    if (this_present_pagepath || that_present_pagepath) {
      if (!(this_present_pagepath && that_present_pagepath))
        return false;
      if (!this.pagepath.equals(that.pagepath))
        return false;
    }

    boolean this_present_sub_button = true && this.isSetSub_button();
    boolean that_present_sub_button = true && that.isSetSub_button();
    if (this_present_sub_button || that_present_sub_button) {
      if (!(this_present_sub_button && that_present_sub_button))
        return false;
      if (!this.sub_button.equals(that.sub_button))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + key.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetMedia_id()) ? 131071 : 524287);
    if (isSetMedia_id())
      hashCode = hashCode * 8191 + media_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppid()) ? 131071 : 524287);
    if (isSetAppid())
      hashCode = hashCode * 8191 + appid.hashCode();

    hashCode = hashCode * 8191 + ((isSetPagepath()) ? 131071 : 524287);
    if (isSetPagepath())
      hashCode = hashCode * 8191 + pagepath.hashCode();

    hashCode = hashCode * 8191 + ((isSetSub_button()) ? 131071 : 524287);
    if (isSetSub_button())
      hashCode = hashCode * 8191 + sub_button.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(button other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMedia_id()).compareTo(other.isSetMedia_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_id, other.media_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPagepath()).compareTo(other.isSetPagepath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagepath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagepath, other.pagepath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSub_button()).compareTo(other.isSetSub_button());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSub_button()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub_button, other.sub_button);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("button(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("media_id:");
    if (this.media_id == null) {
      sb.append("null");
    } else {
      sb.append(this.media_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appid:");
    if (this.appid == null) {
      sb.append("null");
    } else {
      sb.append(this.appid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pagepath:");
    if (this.pagepath == null) {
      sb.append("null");
    } else {
      sb.append(this.pagepath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sub_button:");
    if (this.sub_button == null) {
      sb.append("null");
    } else {
      sb.append(this.sub_button);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class buttonStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public buttonStandardScheme getScheme() {
      return new buttonStandardScheme();
    }
  }

  private static class buttonStandardScheme extends org.apache.thrift.scheme.StandardScheme<button> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, button struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_id = iprot.readString();
              struct.setMedia_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appid = iprot.readString();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGEPATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pagepath = iprot.readString();
              struct.setPagepathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUB_BUTTON
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.sub_button = new java.util.ArrayList<sub_button>(_list8.size);
                sub_button _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new sub_button();
                  _elem9.read(iprot);
                  struct.sub_button.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setSub_buttonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, button struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.media_id != null) {
        oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
        oprot.writeString(struct.media_id);
        oprot.writeFieldEnd();
      }
      if (struct.appid != null) {
        oprot.writeFieldBegin(APPID_FIELD_DESC);
        oprot.writeString(struct.appid);
        oprot.writeFieldEnd();
      }
      if (struct.pagepath != null) {
        oprot.writeFieldBegin(PAGEPATH_FIELD_DESC);
        oprot.writeString(struct.pagepath);
        oprot.writeFieldEnd();
      }
      if (struct.sub_button != null) {
        oprot.writeFieldBegin(SUB_BUTTON_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sub_button.size()));
          for (sub_button _iter11 : struct.sub_button)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class buttonTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public buttonTupleScheme getScheme() {
      return new buttonTupleScheme();
    }
  }

  private static class buttonTupleScheme extends org.apache.thrift.scheme.TupleScheme<button> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, button struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetKey()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetMedia_id()) {
        optionals.set(4);
      }
      if (struct.isSetAppid()) {
        optionals.set(5);
      }
      if (struct.isSetPagepath()) {
        optionals.set(6);
      }
      if (struct.isSetSub_button()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetKey()) {
        oprot.writeString(struct.key);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetMedia_id()) {
        oprot.writeString(struct.media_id);
      }
      if (struct.isSetAppid()) {
        oprot.writeString(struct.appid);
      }
      if (struct.isSetPagepath()) {
        oprot.writeString(struct.pagepath);
      }
      if (struct.isSetSub_button()) {
        {
          oprot.writeI32(struct.sub_button.size());
          for (sub_button _iter12 : struct.sub_button)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, button struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.key = iprot.readString();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.media_id = iprot.readString();
        struct.setMedia_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appid = iprot.readString();
        struct.setAppidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pagepath = iprot.readString();
        struct.setPagepathIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sub_button = new java.util.ArrayList<sub_button>(_list13.size);
          sub_button _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new sub_button();
            _elem14.read(iprot);
            struct.sub_button.add(_elem14);
          }
        }
        struct.setSub_buttonIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

