/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-12")
public class menu implements org.apache.thrift.TBase<menu, menu._Fields>, java.io.Serializable, Cloneable, Comparable<menu> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("menu");

  private static final org.apache.thrift.protocol.TField BUTTON_FIELD_DESC = new org.apache.thrift.protocol.TField("button", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MATCHRULE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchrule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new menuStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new menuTupleSchemeFactory();

  public java.util.List<button> button; // required
  public matchrule matchrule; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUTTON((short)1, "button"),
    MATCHRULE((short)2, "matchrule");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUTTON
          return BUTTON;
        case 2: // MATCHRULE
          return MATCHRULE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUTTON, new org.apache.thrift.meta_data.FieldMetaData("button", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "button"))));
    tmpMap.put(_Fields.MATCHRULE, new org.apache.thrift.meta_data.FieldMetaData("matchrule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "matchrule")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(menu.class, metaDataMap);
  }

  public menu() {
  }

  public menu(
    java.util.List<button> button,
    matchrule matchrule)
  {
    this();
    this.button = button;
    this.matchrule = matchrule;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public menu(menu other) {
    if (other.isSetButton()) {
      java.util.List<button> __this__button = new java.util.ArrayList<button>(other.button.size());
      for (button other_element : other.button) {
        __this__button.add(other_element);
      }
      this.button = __this__button;
    }
    if (other.isSetMatchrule()) {
      this.matchrule = new matchrule(other.matchrule);
    }
  }

  public menu deepCopy() {
    return new menu(this);
  }

  @Override
  public void clear() {
    this.button = null;
    this.matchrule = null;
  }

  public int getButtonSize() {
    return (this.button == null) ? 0 : this.button.size();
  }

  public java.util.Iterator<button> getButtonIterator() {
    return (this.button == null) ? null : this.button.iterator();
  }

  public void addToButton(button elem) {
    if (this.button == null) {
      this.button = new java.util.ArrayList<button>();
    }
    this.button.add(elem);
  }

  public java.util.List<button> getButton() {
    return this.button;
  }

  public menu setButton(java.util.List<button> button) {
    this.button = button;
    return this;
  }

  public void unsetButton() {
    this.button = null;
  }

  /** Returns true if field button is set (has been assigned a value) and false otherwise */
  public boolean isSetButton() {
    return this.button != null;
  }

  public void setButtonIsSet(boolean value) {
    if (!value) {
      this.button = null;
    }
  }

  public matchrule getMatchrule() {
    return this.matchrule;
  }

  public menu setMatchrule(matchrule matchrule) {
    this.matchrule = matchrule;
    return this;
  }

  public void unsetMatchrule() {
    this.matchrule = null;
  }

  /** Returns true if field matchrule is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchrule() {
    return this.matchrule != null;
  }

  public void setMatchruleIsSet(boolean value) {
    if (!value) {
      this.matchrule = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BUTTON:
      if (value == null) {
        unsetButton();
      } else {
        setButton((java.util.List<button>)value);
      }
      break;

    case MATCHRULE:
      if (value == null) {
        unsetMatchrule();
      } else {
        setMatchrule((matchrule)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BUTTON:
      return getButton();

    case MATCHRULE:
      return getMatchrule();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BUTTON:
      return isSetButton();
    case MATCHRULE:
      return isSetMatchrule();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof menu)
      return this.equals((menu)that);
    return false;
  }

  public boolean equals(menu that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_button = true && this.isSetButton();
    boolean that_present_button = true && that.isSetButton();
    if (this_present_button || that_present_button) {
      if (!(this_present_button && that_present_button))
        return false;
      if (!this.button.equals(that.button))
        return false;
    }

    boolean this_present_matchrule = true && this.isSetMatchrule();
    boolean that_present_matchrule = true && that.isSetMatchrule();
    if (this_present_matchrule || that_present_matchrule) {
      if (!(this_present_matchrule && that_present_matchrule))
        return false;
      if (!this.matchrule.equals(that.matchrule))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetButton()) ? 131071 : 524287);
    if (isSetButton())
      hashCode = hashCode * 8191 + button.hashCode();

    hashCode = hashCode * 8191 + ((isSetMatchrule()) ? 131071 : 524287);
    if (isSetMatchrule())
      hashCode = hashCode * 8191 + matchrule.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(menu other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetButton()).compareTo(other.isSetButton());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButton()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.button, other.button);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMatchrule()).compareTo(other.isSetMatchrule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchrule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchrule, other.matchrule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("menu(");
    boolean first = true;

    sb.append("button:");
    if (this.button == null) {
      sb.append("null");
    } else {
      sb.append(this.button);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchrule:");
    if (this.matchrule == null) {
      sb.append("null");
    } else {
      sb.append(this.matchrule);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class menuStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public menuStandardScheme getScheme() {
      return new menuStandardScheme();
    }
  }

  private static class menuStandardScheme extends org.apache.thrift.scheme.StandardScheme<menu> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, menu struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUTTON
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.button = new java.util.ArrayList<button>(_list0.size);
                button _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new button();
                  _elem1.read(iprot);
                  struct.button.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setButtonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MATCHRULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.matchrule = new matchrule();
              struct.matchrule.read(iprot);
              struct.setMatchruleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, menu struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.button != null) {
        oprot.writeFieldBegin(BUTTON_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.button.size()));
          for (button _iter3 : struct.button)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.matchrule != null) {
        oprot.writeFieldBegin(MATCHRULE_FIELD_DESC);
        struct.matchrule.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class menuTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public menuTupleScheme getScheme() {
      return new menuTupleScheme();
    }
  }

  private static class menuTupleScheme extends org.apache.thrift.scheme.TupleScheme<menu> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, menu struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetButton()) {
        optionals.set(0);
      }
      if (struct.isSetMatchrule()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetButton()) {
        {
          oprot.writeI32(struct.button.size());
          for (button _iter4 : struct.button)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetMatchrule()) {
        struct.matchrule.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, menu struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.button = new java.util.ArrayList<button>(_list5.size);
          button _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new button();
            _elem6.read(iprot);
            struct.button.add(_elem6);
          }
        }
        struct.setButtonIsSet(true);
      }
      if (incoming.get(1)) {
        struct.matchrule = new matchrule();
        struct.matchrule.read(iprot);
        struct.setMatchruleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

