// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - IsServer
//  - Echostr
type IsWeixinServerData struct {
  IsServer bool `thrift:"is_server,1" db:"is_server" json:"is_server"`
  Echostr string `thrift:"echostr,2" db:"echostr" json:"echostr"`
}

func NewIsWeixinServerData() *IsWeixinServerData {
  return &IsWeixinServerData{}
}


func (p *IsWeixinServerData) GetIsServer() bool {
  return p.IsServer
}

func (p *IsWeixinServerData) GetEchostr() string {
  return p.Echostr
}
func (p *IsWeixinServerData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IsWeixinServerData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsServer = v
}
  return nil
}

func (p *IsWeixinServerData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Echostr = v
}
  return nil
}

func (p *IsWeixinServerData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsWeixinServerData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IsWeixinServerData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_server", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_server: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsServer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_server (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_server: ", p), err) }
  return err
}

func (p *IsWeixinServerData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("echostr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:echostr: ", p), err) }
  if err := oprot.WriteString(string(p.Echostr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.echostr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:echostr: ", p), err) }
  return err
}

func (p *IsWeixinServerData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsWeixinServerData(%+v)", *p)
}

// Attributes:
//  - ToUserName
//  - FromUserName
//  - CreateTime
//  - MsgType
//  - MsgId
//  - AgentId
//  - Content
//  - PicURL
//  - MediaId
//  - Format
//  - ThumbMediaId
//  - Location_X
//  - Location_Y
//  - Scale
//  - Label
//  - Title
//  - Description
//  - URL
//  - Event
//  - EventKey
type MixedMessage struct {
  ToUserName string `thrift:"ToUserName,1" db:"ToUserName" json:"ToUserName"`
  FromUserName string `thrift:"FromUserName,2" db:"FromUserName" json:"FromUserName"`
  CreateTime int64 `thrift:"CreateTime,3" db:"CreateTime" json:"CreateTime"`
  MsgType string `thrift:"MsgType,4" db:"MsgType" json:"MsgType"`
  MsgId int64 `thrift:"MsgId,5" db:"MsgId" json:"MsgId"`
  AgentId int64 `thrift:"AgentId,6" db:"AgentId" json:"AgentId"`
  Content *string `thrift:"Content,7" db:"Content" json:"Content,omitempty"`
  PicURL *string `thrift:"PicURL,8" db:"PicURL" json:"PicURL,omitempty"`
  MediaId *string `thrift:"MediaId,9" db:"MediaId" json:"MediaId,omitempty"`
  Format *string `thrift:"Format,10" db:"Format" json:"Format,omitempty"`
  ThumbMediaId *string `thrift:"ThumbMediaId,11" db:"ThumbMediaId" json:"ThumbMediaId,omitempty"`
  Location_X float64 `thrift:"Location_X,12" db:"Location_X" json:"Location_X"`
  Location_Y float64 `thrift:"Location_Y,13" db:"Location_Y" json:"Location_Y"`
  Scale int32 `thrift:"Scale,14" db:"Scale" json:"Scale"`
  Label string `thrift:"Label,15" db:"Label" json:"Label"`
  Title string `thrift:"Title,16" db:"Title" json:"Title"`
  Description string `thrift:"Description,17" db:"Description" json:"Description"`
  URL string `thrift:"Url,18" db:"Url" json:"Url"`
  Event string `thrift:"Event,19" db:"Event" json:"Event"`
  EventKey string `thrift:"EventKey,20" db:"EventKey" json:"EventKey"`
}

func NewMixedMessage() *MixedMessage {
  return &MixedMessage{}
}


func (p *MixedMessage) GetToUserName() string {
  return p.ToUserName
}

func (p *MixedMessage) GetFromUserName() string {
  return p.FromUserName
}

func (p *MixedMessage) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *MixedMessage) GetMsgType() string {
  return p.MsgType
}

func (p *MixedMessage) GetMsgId() int64 {
  return p.MsgId
}

func (p *MixedMessage) GetAgentId() int64 {
  return p.AgentId
}
var MixedMessage_Content_DEFAULT string
func (p *MixedMessage) GetContent() string {
  if !p.IsSetContent() {
    return MixedMessage_Content_DEFAULT
  }
return *p.Content
}
var MixedMessage_PicURL_DEFAULT string
func (p *MixedMessage) GetPicURL() string {
  if !p.IsSetPicURL() {
    return MixedMessage_PicURL_DEFAULT
  }
return *p.PicURL
}
var MixedMessage_MediaId_DEFAULT string
func (p *MixedMessage) GetMediaId() string {
  if !p.IsSetMediaId() {
    return MixedMessage_MediaId_DEFAULT
  }
return *p.MediaId
}
var MixedMessage_Format_DEFAULT string
func (p *MixedMessage) GetFormat() string {
  if !p.IsSetFormat() {
    return MixedMessage_Format_DEFAULT
  }
return *p.Format
}
var MixedMessage_ThumbMediaId_DEFAULT string
func (p *MixedMessage) GetThumbMediaId() string {
  if !p.IsSetThumbMediaId() {
    return MixedMessage_ThumbMediaId_DEFAULT
  }
return *p.ThumbMediaId
}

func (p *MixedMessage) GetLocation_X() float64 {
  return p.Location_X
}

func (p *MixedMessage) GetLocation_Y() float64 {
  return p.Location_Y
}

func (p *MixedMessage) GetScale() int32 {
  return p.Scale
}

func (p *MixedMessage) GetLabel() string {
  return p.Label
}

func (p *MixedMessage) GetTitle() string {
  return p.Title
}

func (p *MixedMessage) GetDescription() string {
  return p.Description
}

func (p *MixedMessage) GetURL() string {
  return p.URL
}

func (p *MixedMessage) GetEvent() string {
  return p.Event
}

func (p *MixedMessage) GetEventKey() string {
  return p.EventKey
}
func (p *MixedMessage) IsSetContent() bool {
  return p.Content != nil
}

func (p *MixedMessage) IsSetPicURL() bool {
  return p.PicURL != nil
}

func (p *MixedMessage) IsSetMediaId() bool {
  return p.MediaId != nil
}

func (p *MixedMessage) IsSetFormat() bool {
  return p.Format != nil
}

func (p *MixedMessage) IsSetThumbMediaId() bool {
  return p.ThumbMediaId != nil
}

func (p *MixedMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MixedMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ToUserName = v
}
  return nil
}

func (p *MixedMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromUserName = v
}
  return nil
}

func (p *MixedMessage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *MixedMessage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MsgType = v
}
  return nil
}

func (p *MixedMessage)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MsgId = v
}
  return nil
}

func (p *MixedMessage)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *MixedMessage)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Content = &v
}
  return nil
}

func (p *MixedMessage)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PicURL = &v
}
  return nil
}

func (p *MixedMessage)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.MediaId = &v
}
  return nil
}

func (p *MixedMessage)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Format = &v
}
  return nil
}

func (p *MixedMessage)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ThumbMediaId = &v
}
  return nil
}

func (p *MixedMessage)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Location_X = v
}
  return nil
}

func (p *MixedMessage)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Location_Y = v
}
  return nil
}

func (p *MixedMessage)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Scale = v
}
  return nil
}

func (p *MixedMessage)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Label = v
}
  return nil
}

func (p *MixedMessage)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MixedMessage)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *MixedMessage)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *MixedMessage)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Event = v
}
  return nil
}

func (p *MixedMessage)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.EventKey = v
}
  return nil
}

func (p *MixedMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MixedMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MixedMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ToUserName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ToUserName: ", p), err) }
  if err := oprot.WriteString(string(p.ToUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ToUserName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ToUserName: ", p), err) }
  return err
}

func (p *MixedMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FromUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:FromUserName: ", p), err) }
  if err := oprot.WriteString(string(p.FromUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FromUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:FromUserName: ", p), err) }
  return err
}

func (p *MixedMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CreateTime: ", p), err) }
  return err
}

func (p *MixedMessage) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MsgType", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:MsgType: ", p), err) }
  if err := oprot.WriteString(string(p.MsgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MsgType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:MsgType: ", p), err) }
  return err
}

func (p *MixedMessage) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MsgId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:MsgId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MsgId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MsgId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:MsgId: ", p), err) }
  return err
}

func (p *MixedMessage) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AgentId", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:AgentId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AgentId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:AgentId: ", p), err) }
  return err
}

func (p *MixedMessage) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetContent() {
    if err := oprot.WriteFieldBegin("Content", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Content: ", p), err) }
    if err := oprot.WriteString(string(*p.Content)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Content (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Content: ", p), err) }
  }
  return err
}

func (p *MixedMessage) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetPicURL() {
    if err := oprot.WriteFieldBegin("PicURL", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PicURL: ", p), err) }
    if err := oprot.WriteString(string(*p.PicURL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PicURL (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PicURL: ", p), err) }
  }
  return err
}

func (p *MixedMessage) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetMediaId() {
    if err := oprot.WriteFieldBegin("MediaId", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:MediaId: ", p), err) }
    if err := oprot.WriteString(string(*p.MediaId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.MediaId (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:MediaId: ", p), err) }
  }
  return err
}

func (p *MixedMessage) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetFormat() {
    if err := oprot.WriteFieldBegin("Format", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Format: ", p), err) }
    if err := oprot.WriteString(string(*p.Format)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Format (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Format: ", p), err) }
  }
  return err
}

func (p *MixedMessage) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetThumbMediaId() {
    if err := oprot.WriteFieldBegin("ThumbMediaId", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ThumbMediaId: ", p), err) }
    if err := oprot.WriteString(string(*p.ThumbMediaId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ThumbMediaId (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ThumbMediaId: ", p), err) }
  }
  return err
}

func (p *MixedMessage) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Location_X", thrift.DOUBLE, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Location_X: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Location_X)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Location_X (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Location_X: ", p), err) }
  return err
}

func (p *MixedMessage) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Location_Y", thrift.DOUBLE, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Location_Y: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Location_Y)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Location_Y (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Location_Y: ", p), err) }
  return err
}

func (p *MixedMessage) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Scale", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Scale: ", p), err) }
  if err := oprot.WriteI32(int32(p.Scale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Scale (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Scale: ", p), err) }
  return err
}

func (p *MixedMessage) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Label", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Label: ", p), err) }
  if err := oprot.WriteString(string(p.Label)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Label (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Label: ", p), err) }
  return err
}

func (p *MixedMessage) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Title", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Title (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Title: ", p), err) }
  return err
}

func (p *MixedMessage) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Description", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Description (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Description: ", p), err) }
  return err
}

func (p *MixedMessage) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Url", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Url (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Url: ", p), err) }
  return err
}

func (p *MixedMessage) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Event", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Event: ", p), err) }
  if err := oprot.WriteString(string(p.Event)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Event (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Event: ", p), err) }
  return err
}

func (p *MixedMessage) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EventKey", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:EventKey: ", p), err) }
  if err := oprot.WriteString(string(p.EventKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EventKey (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:EventKey: ", p), err) }
  return err
}

func (p *MixedMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MixedMessage(%+v)", *p)
}

// Attributes:
//  - ResponeMessageType
//  - ResponeMessage
type ParseTemplateToMixedMessagesData struct {
  ResponeMessageType string `thrift:"responeMessageType,1,required" db:"responeMessageType" json:"responeMessageType"`
  ResponeMessage *MixedMessage `thrift:"responeMessage,2,required" db:"responeMessage" json:"responeMessage"`
}

func NewParseTemplateToMixedMessagesData() *ParseTemplateToMixedMessagesData {
  return &ParseTemplateToMixedMessagesData{}
}


func (p *ParseTemplateToMixedMessagesData) GetResponeMessageType() string {
  return p.ResponeMessageType
}
var ParseTemplateToMixedMessagesData_ResponeMessage_DEFAULT *MixedMessage
func (p *ParseTemplateToMixedMessagesData) GetResponeMessage() *MixedMessage {
  if !p.IsSetResponeMessage() {
    return ParseTemplateToMixedMessagesData_ResponeMessage_DEFAULT
  }
return p.ResponeMessage
}
func (p *ParseTemplateToMixedMessagesData) IsSetResponeMessage() bool {
  return p.ResponeMessage != nil
}

func (p *ParseTemplateToMixedMessagesData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponeMessageType bool = false;
  var issetResponeMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResponeMessageType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetResponeMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponeMessageType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponeMessageType is not set"));
  }
  if !issetResponeMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponeMessage is not set"));
  }
  return nil
}

func (p *ParseTemplateToMixedMessagesData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResponeMessageType = v
}
  return nil
}

func (p *ParseTemplateToMixedMessagesData)  ReadField2(iprot thrift.TProtocol) error {
  p.ResponeMessage = &MixedMessage{}
  if err := p.ResponeMessage.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResponeMessage), err)
  }
  return nil
}

func (p *ParseTemplateToMixedMessagesData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ParseTemplateToMixedMessagesData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ParseTemplateToMixedMessagesData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("responeMessageType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responeMessageType: ", p), err) }
  if err := oprot.WriteString(string(p.ResponeMessageType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responeMessageType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responeMessageType: ", p), err) }
  return err
}

func (p *ParseTemplateToMixedMessagesData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("responeMessage", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:responeMessage: ", p), err) }
  if err := p.ResponeMessage.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResponeMessage), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:responeMessage: ", p), err) }
  return err
}

func (p *ParseTemplateToMixedMessagesData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ParseTemplateToMixedMessagesData(%+v)", *p)
}

// Attributes:
//  - Value
//  - Color
type KeyWordData struct {
  Value string `thrift:"value,1" db:"value" json:"value"`
  Color string `thrift:"color,2" db:"color" json:"color"`
}

func NewKeyWordData() *KeyWordData {
  return &KeyWordData{}
}


func (p *KeyWordData) GetValue() string {
  return p.Value
}

func (p *KeyWordData) GetColor() string {
  return p.Color
}
func (p *KeyWordData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KeyWordData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *KeyWordData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Color = v
}
  return nil
}

func (p *KeyWordData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("KeyWordData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KeyWordData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *KeyWordData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("color", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:color: ", p), err) }
  if err := oprot.WriteString(string(p.Color)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.color (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:color: ", p), err) }
  return err
}

func (p *KeyWordData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KeyWordData(%+v)", *p)
}

// Attributes:
//  - First
//  - Keyword1
//  - Keyword2
//  - Keyword3
//  - Keyword4
//  - Keyword5
//  - Remark
type TemplateData struct {
  First *KeyWordData `thrift:"first,1" db:"first" json:"first"`
  Keyword1 *KeyWordData `thrift:"keyword1,2" db:"keyword1" json:"keyword1"`
  Keyword2 *KeyWordData `thrift:"keyword2,3" db:"keyword2" json:"keyword2"`
  Keyword3 *KeyWordData `thrift:"keyword3,4" db:"keyword3" json:"keyword3"`
  Keyword4 *KeyWordData `thrift:"keyword4,5" db:"keyword4" json:"keyword4"`
  Keyword5 *KeyWordData `thrift:"keyword5,6" db:"keyword5" json:"keyword5"`
  Remark *KeyWordData `thrift:"remark,7" db:"remark" json:"remark"`
}

func NewTemplateData() *TemplateData {
  return &TemplateData{}
}

var TemplateData_First_DEFAULT *KeyWordData
func (p *TemplateData) GetFirst() *KeyWordData {
  if !p.IsSetFirst() {
    return TemplateData_First_DEFAULT
  }
return p.First
}
var TemplateData_Keyword1_DEFAULT *KeyWordData
func (p *TemplateData) GetKeyword1() *KeyWordData {
  if !p.IsSetKeyword1() {
    return TemplateData_Keyword1_DEFAULT
  }
return p.Keyword1
}
var TemplateData_Keyword2_DEFAULT *KeyWordData
func (p *TemplateData) GetKeyword2() *KeyWordData {
  if !p.IsSetKeyword2() {
    return TemplateData_Keyword2_DEFAULT
  }
return p.Keyword2
}
var TemplateData_Keyword3_DEFAULT *KeyWordData
func (p *TemplateData) GetKeyword3() *KeyWordData {
  if !p.IsSetKeyword3() {
    return TemplateData_Keyword3_DEFAULT
  }
return p.Keyword3
}
var TemplateData_Keyword4_DEFAULT *KeyWordData
func (p *TemplateData) GetKeyword4() *KeyWordData {
  if !p.IsSetKeyword4() {
    return TemplateData_Keyword4_DEFAULT
  }
return p.Keyword4
}
var TemplateData_Keyword5_DEFAULT *KeyWordData
func (p *TemplateData) GetKeyword5() *KeyWordData {
  if !p.IsSetKeyword5() {
    return TemplateData_Keyword5_DEFAULT
  }
return p.Keyword5
}
var TemplateData_Remark_DEFAULT *KeyWordData
func (p *TemplateData) GetRemark() *KeyWordData {
  if !p.IsSetRemark() {
    return TemplateData_Remark_DEFAULT
  }
return p.Remark
}
func (p *TemplateData) IsSetFirst() bool {
  return p.First != nil
}

func (p *TemplateData) IsSetKeyword1() bool {
  return p.Keyword1 != nil
}

func (p *TemplateData) IsSetKeyword2() bool {
  return p.Keyword2 != nil
}

func (p *TemplateData) IsSetKeyword3() bool {
  return p.Keyword3 != nil
}

func (p *TemplateData) IsSetKeyword4() bool {
  return p.Keyword4 != nil
}

func (p *TemplateData) IsSetKeyword5() bool {
  return p.Keyword5 != nil
}

func (p *TemplateData) IsSetRemark() bool {
  return p.Remark != nil
}

func (p *TemplateData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TemplateData)  ReadField1(iprot thrift.TProtocol) error {
  p.First = &KeyWordData{}
  if err := p.First.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.First), err)
  }
  return nil
}

func (p *TemplateData)  ReadField2(iprot thrift.TProtocol) error {
  p.Keyword1 = &KeyWordData{}
  if err := p.Keyword1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keyword1), err)
  }
  return nil
}

func (p *TemplateData)  ReadField3(iprot thrift.TProtocol) error {
  p.Keyword2 = &KeyWordData{}
  if err := p.Keyword2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keyword2), err)
  }
  return nil
}

func (p *TemplateData)  ReadField4(iprot thrift.TProtocol) error {
  p.Keyword3 = &KeyWordData{}
  if err := p.Keyword3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keyword3), err)
  }
  return nil
}

func (p *TemplateData)  ReadField5(iprot thrift.TProtocol) error {
  p.Keyword4 = &KeyWordData{}
  if err := p.Keyword4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keyword4), err)
  }
  return nil
}

func (p *TemplateData)  ReadField6(iprot thrift.TProtocol) error {
  p.Keyword5 = &KeyWordData{}
  if err := p.Keyword5.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keyword5), err)
  }
  return nil
}

func (p *TemplateData)  ReadField7(iprot thrift.TProtocol) error {
  p.Remark = &KeyWordData{}
  if err := p.Remark.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Remark), err)
  }
  return nil
}

func (p *TemplateData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TemplateData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TemplateData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:first: ", p), err) }
  if err := p.First.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.First), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:first: ", p), err) }
  return err
}

func (p *TemplateData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword1", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyword1: ", p), err) }
  if err := p.Keyword1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keyword1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyword1: ", p), err) }
  return err
}

func (p *TemplateData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword2", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keyword2: ", p), err) }
  if err := p.Keyword2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keyword2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keyword2: ", p), err) }
  return err
}

func (p *TemplateData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword3", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyword3: ", p), err) }
  if err := p.Keyword3.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keyword3), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyword3: ", p), err) }
  return err
}

func (p *TemplateData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword4", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keyword4: ", p), err) }
  if err := p.Keyword4.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keyword4), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keyword4: ", p), err) }
  return err
}

func (p *TemplateData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword5", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:keyword5: ", p), err) }
  if err := p.Keyword5.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keyword5), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:keyword5: ", p), err) }
  return err
}

func (p *TemplateData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remark: ", p), err) }
  if err := p.Remark.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Remark), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remark: ", p), err) }
  return err
}

func (p *TemplateData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TemplateData(%+v)", *p)
}

// Attributes:
//  - Touser
//  - TemplateID
//  - FormID
//  - URL
//  - Miniprogram
//  - Data
type TemplateMsgData struct {
  Touser string `thrift:"touser,1" db:"touser" json:"touser"`
  TemplateID string `thrift:"template_id,2" db:"template_id" json:"template_id"`
  FormID string `thrift:"FormID,3" db:"FormID" json:"FormID"`
  URL string `thrift:"url,4" db:"url" json:"url"`
  Miniprogram *MiniprogramData `thrift:"miniprogram,5" db:"miniprogram" json:"miniprogram"`
  Data *TemplateData `thrift:"data,6" db:"data" json:"data"`
}

func NewTemplateMsgData() *TemplateMsgData {
  return &TemplateMsgData{}
}


func (p *TemplateMsgData) GetTouser() string {
  return p.Touser
}

func (p *TemplateMsgData) GetTemplateID() string {
  return p.TemplateID
}

func (p *TemplateMsgData) GetFormID() string {
  return p.FormID
}

func (p *TemplateMsgData) GetURL() string {
  return p.URL
}
var TemplateMsgData_Miniprogram_DEFAULT *MiniprogramData
func (p *TemplateMsgData) GetMiniprogram() *MiniprogramData {
  if !p.IsSetMiniprogram() {
    return TemplateMsgData_Miniprogram_DEFAULT
  }
return p.Miniprogram
}
var TemplateMsgData_Data_DEFAULT *TemplateData
func (p *TemplateMsgData) GetData() *TemplateData {
  if !p.IsSetData() {
    return TemplateMsgData_Data_DEFAULT
  }
return p.Data
}
func (p *TemplateMsgData) IsSetMiniprogram() bool {
  return p.Miniprogram != nil
}

func (p *TemplateMsgData) IsSetData() bool {
  return p.Data != nil
}

func (p *TemplateMsgData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TemplateMsgData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Touser = v
}
  return nil
}

func (p *TemplateMsgData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TemplateID = v
}
  return nil
}

func (p *TemplateMsgData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FormID = v
}
  return nil
}

func (p *TemplateMsgData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *TemplateMsgData)  ReadField5(iprot thrift.TProtocol) error {
  p.Miniprogram = &MiniprogramData{}
  if err := p.Miniprogram.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Miniprogram), err)
  }
  return nil
}

func (p *TemplateMsgData)  ReadField6(iprot thrift.TProtocol) error {
  p.Data = &TemplateData{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TemplateMsgData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TemplateMsgData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TemplateMsgData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("touser", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:touser: ", p), err) }
  if err := oprot.WriteString(string(p.Touser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.touser (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:touser: ", p), err) }
  return err
}

func (p *TemplateMsgData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("template_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:template_id: ", p), err) }
  if err := oprot.WriteString(string(p.TemplateID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.template_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:template_id: ", p), err) }
  return err
}

func (p *TemplateMsgData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FormID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:FormID: ", p), err) }
  if err := oprot.WriteString(string(p.FormID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FormID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:FormID: ", p), err) }
  return err
}

func (p *TemplateMsgData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err) }
  return err
}

func (p *TemplateMsgData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("miniprogram", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:miniprogram: ", p), err) }
  if err := p.Miniprogram.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Miniprogram), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:miniprogram: ", p), err) }
  return err
}

func (p *TemplateMsgData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:data: ", p), err) }
  return err
}

func (p *TemplateMsgData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TemplateMsgData(%+v)", *p)
}

// Attributes:
//  - Appid
//  - Pagepath
type MiniprogramData struct {
  Appid string `thrift:"appid,1" db:"appid" json:"appid"`
  Pagepath string `thrift:"pagepath,2" db:"pagepath" json:"pagepath"`
}

func NewMiniprogramData() *MiniprogramData {
  return &MiniprogramData{}
}


func (p *MiniprogramData) GetAppid() string {
  return p.Appid
}

func (p *MiniprogramData) GetPagepath() string {
  return p.Pagepath
}
func (p *MiniprogramData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MiniprogramData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *MiniprogramData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pagepath = v
}
  return nil
}

func (p *MiniprogramData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MiniprogramData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MiniprogramData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appid: ", p), err) }
  return err
}

func (p *MiniprogramData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagepath", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pagepath: ", p), err) }
  if err := oprot.WriteString(string(p.Pagepath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagepath (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pagepath: ", p), err) }
  return err
}

func (p *MiniprogramData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MiniprogramData(%+v)", *p)
}

// Attributes:
//  - Errcode
//  - Errmsg
//  - MsgID
type SendTemplateResponseData struct {
  Errcode int32 `thrift:"Errcode,1" db:"Errcode" json:"Errcode"`
  Errmsg string `thrift:"Errmsg,2" db:"Errmsg" json:"Errmsg"`
  MsgID int64 `thrift:"MsgID,3" db:"MsgID" json:"MsgID"`
}

func NewSendTemplateResponseData() *SendTemplateResponseData {
  return &SendTemplateResponseData{}
}


func (p *SendTemplateResponseData) GetErrcode() int32 {
  return p.Errcode
}

func (p *SendTemplateResponseData) GetErrmsg() string {
  return p.Errmsg
}

func (p *SendTemplateResponseData) GetMsgID() int64 {
  return p.MsgID
}
func (p *SendTemplateResponseData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendTemplateResponseData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Errcode = v
}
  return nil
}

func (p *SendTemplateResponseData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Errmsg = v
}
  return nil
}

func (p *SendTemplateResponseData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MsgID = v
}
  return nil
}

func (p *SendTemplateResponseData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendTemplateResponseData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendTemplateResponseData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Errcode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Errcode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Errcode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Errcode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Errcode: ", p), err) }
  return err
}

func (p *SendTemplateResponseData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Errmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Errmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Errmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Errmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Errmsg: ", p), err) }
  return err
}

func (p *SendTemplateResponseData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MsgID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:MsgID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MsgID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MsgID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:MsgID: ", p), err) }
  return err
}

func (p *SendTemplateResponseData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendTemplateResponseData(%+v)", *p)
}

// Attributes:
//  - ToUserName
//  - FromUserName
//  - CreateTime
//  - MsgType
//  - Content
//  - Image
//  - ArticleCount
//  - Articles
type AutoReplyData struct {
  ToUserName string `thrift:"ToUserName,1" db:"ToUserName" json:"ToUserName"`
  FromUserName string `thrift:"FromUserName,2" db:"FromUserName" json:"FromUserName"`
  CreateTime int64 `thrift:"CreateTime,3" db:"CreateTime" json:"CreateTime"`
  MsgType string `thrift:"MsgType,4" db:"MsgType" json:"MsgType"`
  Content string `thrift:"Content,5" db:"Content" json:"Content"`
  Image *ImageData `thrift:"Image,6" db:"Image" json:"Image"`
  ArticleCount int32 `thrift:"ArticleCount,7" db:"ArticleCount" json:"ArticleCount"`
  Articles []*ArticlesData `thrift:"Articles,8" db:"Articles" json:"Articles"`
}

func NewAutoReplyData() *AutoReplyData {
  return &AutoReplyData{}
}


func (p *AutoReplyData) GetToUserName() string {
  return p.ToUserName
}

func (p *AutoReplyData) GetFromUserName() string {
  return p.FromUserName
}

func (p *AutoReplyData) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *AutoReplyData) GetMsgType() string {
  return p.MsgType
}

func (p *AutoReplyData) GetContent() string {
  return p.Content
}
var AutoReplyData_Image_DEFAULT *ImageData
func (p *AutoReplyData) GetImage() *ImageData {
  if !p.IsSetImage() {
    return AutoReplyData_Image_DEFAULT
  }
return p.Image
}

func (p *AutoReplyData) GetArticleCount() int32 {
  return p.ArticleCount
}

func (p *AutoReplyData) GetArticles() []*ArticlesData {
  return p.Articles
}
func (p *AutoReplyData) IsSetImage() bool {
  return p.Image != nil
}

func (p *AutoReplyData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AutoReplyData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ToUserName = v
}
  return nil
}

func (p *AutoReplyData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromUserName = v
}
  return nil
}

func (p *AutoReplyData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *AutoReplyData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MsgType = v
}
  return nil
}

func (p *AutoReplyData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *AutoReplyData)  ReadField6(iprot thrift.TProtocol) error {
  p.Image = &ImageData{}
  if err := p.Image.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Image), err)
  }
  return nil
}

func (p *AutoReplyData)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ArticleCount = v
}
  return nil
}

func (p *AutoReplyData)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ArticlesData, 0, size)
  p.Articles =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ArticlesData{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Articles = append(p.Articles, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AutoReplyData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AutoReplyData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AutoReplyData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ToUserName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ToUserName: ", p), err) }
  if err := oprot.WriteString(string(p.ToUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ToUserName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ToUserName: ", p), err) }
  return err
}

func (p *AutoReplyData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FromUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:FromUserName: ", p), err) }
  if err := oprot.WriteString(string(p.FromUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FromUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:FromUserName: ", p), err) }
  return err
}

func (p *AutoReplyData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CreateTime: ", p), err) }
  return err
}

func (p *AutoReplyData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MsgType", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:MsgType: ", p), err) }
  if err := oprot.WriteString(string(p.MsgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MsgType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:MsgType: ", p), err) }
  return err
}

func (p *AutoReplyData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Content", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Content (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Content: ", p), err) }
  return err
}

func (p *AutoReplyData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Image", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Image: ", p), err) }
  if err := p.Image.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Image), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Image: ", p), err) }
  return err
}

func (p *AutoReplyData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ArticleCount", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ArticleCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.ArticleCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ArticleCount (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ArticleCount: ", p), err) }
  return err
}

func (p *AutoReplyData) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Articles", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Articles: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Articles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Articles {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Articles: ", p), err) }
  return err
}

func (p *AutoReplyData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AutoReplyData(%+v)", *p)
}

// Attributes:
//  - MediaId
type ImageData struct {
  MediaId string `thrift:"MediaId,1" db:"MediaId" json:"MediaId"`
}

func NewImageData() *ImageData {
  return &ImageData{}
}


func (p *ImageData) GetMediaId() string {
  return p.MediaId
}
func (p *ImageData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MediaId = v
}
  return nil
}

func (p *ImageData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MediaId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MediaId: ", p), err) }
  if err := oprot.WriteString(string(p.MediaId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MediaId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MediaId: ", p), err) }
  return err
}

func (p *ImageData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageData(%+v)", *p)
}

// Attributes:
//  - Title
//  - Description
//  - PicUrl
//  - URL
type ArticlesData struct {
  Title string `thrift:"Title,1" db:"Title" json:"Title"`
  Description string `thrift:"Description,2" db:"Description" json:"Description"`
  PicUrl string `thrift:"PicUrl,3" db:"PicUrl" json:"PicUrl"`
  URL string `thrift:"Url,4" db:"Url" json:"Url"`
}

func NewArticlesData() *ArticlesData {
  return &ArticlesData{}
}


func (p *ArticlesData) GetTitle() string {
  return p.Title
}

func (p *ArticlesData) GetDescription() string {
  return p.Description
}

func (p *ArticlesData) GetPicUrl() string {
  return p.PicUrl
}

func (p *ArticlesData) GetURL() string {
  return p.URL
}
func (p *ArticlesData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArticlesData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *ArticlesData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *ArticlesData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PicUrl = v
}
  return nil
}

func (p *ArticlesData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *ArticlesData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ArticlesData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArticlesData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Title: ", p), err) }
  return err
}

func (p *ArticlesData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Description: ", p), err) }
  return err
}

func (p *ArticlesData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PicUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PicUrl: ", p), err) }
  if err := oprot.WriteString(string(p.PicUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PicUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PicUrl: ", p), err) }
  return err
}

func (p *ArticlesData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Url", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Url (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Url: ", p), err) }
  return err
}

func (p *ArticlesData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArticlesData(%+v)", *p)
}

