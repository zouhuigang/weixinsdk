// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - JsapiTicket
//  - Noncestr
//  - Timestamp
//  - URL
//  - Sign
//  - Appid
type JsapiSignData struct {
  JsapiTicket string `thrift:"jsapi_ticket,1" db:"jsapi_ticket" json:"jsapi_ticket"`
  Noncestr string `thrift:"noncestr,2" db:"noncestr" json:"noncestr"`
  Timestamp int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
  URL string `thrift:"url,4" db:"url" json:"url"`
  Sign string `thrift:"sign,5" db:"sign" json:"sign"`
  Appid string `thrift:"appid,6" db:"appid" json:"appid"`
}

func NewJsapiSignData() *JsapiSignData {
  return &JsapiSignData{}
}


func (p *JsapiSignData) GetJsapiTicket() string {
  return p.JsapiTicket
}

func (p *JsapiSignData) GetNoncestr() string {
  return p.Noncestr
}

func (p *JsapiSignData) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *JsapiSignData) GetURL() string {
  return p.URL
}

func (p *JsapiSignData) GetSign() string {
  return p.Sign
}

func (p *JsapiSignData) GetAppid() string {
  return p.Appid
}
func (p *JsapiSignData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JsapiSignData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JsapiTicket = v
}
  return nil
}

func (p *JsapiSignData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Noncestr = v
}
  return nil
}

func (p *JsapiSignData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *JsapiSignData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *JsapiSignData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *JsapiSignData)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *JsapiSignData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JsapiSignData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JsapiSignData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jsapi_ticket", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jsapi_ticket: ", p), err) }
  if err := oprot.WriteString(string(p.JsapiTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jsapi_ticket (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jsapi_ticket: ", p), err) }
  return err
}

func (p *JsapiSignData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("noncestr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noncestr: ", p), err) }
  if err := oprot.WriteString(string(p.Noncestr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.noncestr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noncestr: ", p), err) }
  return err
}

func (p *JsapiSignData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  return err
}

func (p *JsapiSignData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err) }
  return err
}

func (p *JsapiSignData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sign: ", p), err) }
  return err
}

func (p *JsapiSignData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:appid: ", p), err) }
  return err
}

func (p *JsapiSignData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JsapiSignData(%+v)", *p)
}

