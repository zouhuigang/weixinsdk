// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Button
//  - Matchrule
type Menu struct {
  Button []*Button `thrift:"button,1" db:"button" json:"button"`
  Matchrule *Matchrule `thrift:"matchrule,2" db:"matchrule" json:"matchrule"`
}

func NewMenu() *Menu {
  return &Menu{}
}


func (p *Menu) GetButton() []*Button {
  return p.Button
}
var Menu_Matchrule_DEFAULT *Matchrule
func (p *Menu) GetMatchrule() *Matchrule {
  if !p.IsSetMatchrule() {
    return Menu_Matchrule_DEFAULT
  }
return p.Matchrule
}
func (p *Menu) IsSetMatchrule() bool {
  return p.Matchrule != nil
}

func (p *Menu) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Menu)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Button, 0, size)
  p.Button =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Button{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Button = append(p.Button, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Menu)  ReadField2(iprot thrift.TProtocol) error {
  p.Matchrule = &Matchrule{}
  if err := p.Matchrule.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Matchrule), err)
  }
  return nil
}

func (p *Menu) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("menu"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Menu) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("button", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:button: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Button)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Button {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:button: ", p), err) }
  return err
}

func (p *Menu) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("matchrule", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:matchrule: ", p), err) }
  if err := p.Matchrule.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Matchrule), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:matchrule: ", p), err) }
  return err
}

func (p *Menu) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Menu(%+v)", *p)
}

// Attributes:
//  - Type
//  - Name
//  - Key
//  - URL
//  - MediaID
//  - Appid
//  - Pagepath
//  - SubButton
type Button struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Key string `thrift:"key,3" db:"key" json:"key"`
  URL string `thrift:"url,4" db:"url" json:"url"`
  MediaID string `thrift:"media_id,5" db:"media_id" json:"media_id"`
  Appid string `thrift:"appid,6" db:"appid" json:"appid"`
  Pagepath string `thrift:"pagepath,7" db:"pagepath" json:"pagepath"`
  SubButton []*SubButton `thrift:"sub_button,8" db:"sub_button" json:"sub_button"`
}

func NewButton() *Button {
  return &Button{}
}


func (p *Button) GetType() string {
  return p.Type
}

func (p *Button) GetName() string {
  return p.Name
}

func (p *Button) GetKey() string {
  return p.Key
}

func (p *Button) GetURL() string {
  return p.URL
}

func (p *Button) GetMediaID() string {
  return p.MediaID
}

func (p *Button) GetAppid() string {
  return p.Appid
}

func (p *Button) GetPagepath() string {
  return p.Pagepath
}

func (p *Button) GetSubButton() []*SubButton {
  return p.SubButton
}
func (p *Button) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Button)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *Button)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Button)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *Button)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *Button)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MediaID = v
}
  return nil
}

func (p *Button)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *Button)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Pagepath = v
}
  return nil
}

func (p *Button)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SubButton, 0, size)
  p.SubButton =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &SubButton{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.SubButton = append(p.SubButton, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Button) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("button"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Button) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *Button) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Button) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err) }
  return err
}

func (p *Button) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err) }
  return err
}

func (p *Button) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:media_id: ", p), err) }
  if err := oprot.WriteString(string(p.MediaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:media_id: ", p), err) }
  return err
}

func (p *Button) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:appid: ", p), err) }
  return err
}

func (p *Button) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagepath", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pagepath: ", p), err) }
  if err := oprot.WriteString(string(p.Pagepath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagepath (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pagepath: ", p), err) }
  return err
}

func (p *Button) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sub_button", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sub_button: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubButton)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SubButton {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sub_button: ", p), err) }
  return err
}

func (p *Button) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Button(%+v)", *p)
}

// Attributes:
//  - Type
//  - Name
//  - Key
//  - URL
//  - MediaID
//  - Appid
//  - Pagepath
type SubButton struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Key string `thrift:"key,3" db:"key" json:"key"`
  URL string `thrift:"url,4" db:"url" json:"url"`
  MediaID string `thrift:"media_id,5" db:"media_id" json:"media_id"`
  Appid string `thrift:"appid,6" db:"appid" json:"appid"`
  Pagepath string `thrift:"pagepath,7" db:"pagepath" json:"pagepath"`
}

func NewSubButton() *SubButton {
  return &SubButton{}
}


func (p *SubButton) GetType() string {
  return p.Type
}

func (p *SubButton) GetName() string {
  return p.Name
}

func (p *SubButton) GetKey() string {
  return p.Key
}

func (p *SubButton) GetURL() string {
  return p.URL
}

func (p *SubButton) GetMediaID() string {
  return p.MediaID
}

func (p *SubButton) GetAppid() string {
  return p.Appid
}

func (p *SubButton) GetPagepath() string {
  return p.Pagepath
}
func (p *SubButton) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SubButton)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *SubButton)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SubButton)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *SubButton)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *SubButton)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MediaID = v
}
  return nil
}

func (p *SubButton)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *SubButton)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Pagepath = v
}
  return nil
}

func (p *SubButton) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sub_button"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SubButton) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SubButton) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *SubButton) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err) }
  return err
}

func (p *SubButton) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err) }
  return err
}

func (p *SubButton) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:media_id: ", p), err) }
  if err := oprot.WriteString(string(p.MediaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:media_id: ", p), err) }
  return err
}

func (p *SubButton) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:appid: ", p), err) }
  return err
}

func (p *SubButton) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pagepath", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pagepath: ", p), err) }
  if err := oprot.WriteString(string(p.Pagepath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pagepath (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pagepath: ", p), err) }
  return err
}

func (p *SubButton) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SubButton(%+v)", *p)
}

// Attributes:
//  - TagID
//  - Sex
//  - Country
//  - Province
//  - City
//  - ClientPlatformType
//  - Language
type Matchrule struct {
  TagID string `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  Sex int32 `thrift:"sex,2" db:"sex" json:"sex"`
  Country string `thrift:"country,3" db:"country" json:"country"`
  Province string `thrift:"province,4" db:"province" json:"province"`
  City string `thrift:"city,5" db:"city" json:"city"`
  ClientPlatformType string `thrift:"client_platform_type,6" db:"client_platform_type" json:"client_platform_type"`
  Language string `thrift:"language,7" db:"language" json:"language"`
}

func NewMatchrule() *Matchrule {
  return &Matchrule{}
}


func (p *Matchrule) GetTagID() string {
  return p.TagID
}

func (p *Matchrule) GetSex() int32 {
  return p.Sex
}

func (p *Matchrule) GetCountry() string {
  return p.Country
}

func (p *Matchrule) GetProvince() string {
  return p.Province
}

func (p *Matchrule) GetCity() string {
  return p.City
}

func (p *Matchrule) GetClientPlatformType() string {
  return p.ClientPlatformType
}

func (p *Matchrule) GetLanguage() string {
  return p.Language
}
func (p *Matchrule) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Matchrule)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TagID = v
}
  return nil
}

func (p *Matchrule)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sex = v
}
  return nil
}

func (p *Matchrule)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *Matchrule)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Province = v
}
  return nil
}

func (p *Matchrule)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.City = v
}
  return nil
}

func (p *Matchrule)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ClientPlatformType = v
}
  return nil
}

func (p *Matchrule)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *Matchrule) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("matchrule"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Matchrule) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteString(string(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *Matchrule) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sex", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sex: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sex (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sex: ", p), err) }
  return err
}

func (p *Matchrule) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("country", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:country: ", p), err) }
  if err := oprot.WriteString(string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:country: ", p), err) }
  return err
}

func (p *Matchrule) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("province", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:province: ", p), err) }
  if err := oprot.WriteString(string(p.Province)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.province (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:province: ", p), err) }
  return err
}

func (p *Matchrule) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("city", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:city: ", p), err) }
  if err := oprot.WriteString(string(p.City)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.city (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:city: ", p), err) }
  return err
}

func (p *Matchrule) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client_platform_type", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:client_platform_type: ", p), err) }
  if err := oprot.WriteString(string(p.ClientPlatformType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_platform_type (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:client_platform_type: ", p), err) }
  return err
}

func (p *Matchrule) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:language: ", p), err) }
  if err := oprot.WriteString(string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:language: ", p), err) }
  return err
}

func (p *Matchrule) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Matchrule(%+v)", *p)
}

