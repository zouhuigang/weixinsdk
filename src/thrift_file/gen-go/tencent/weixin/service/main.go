// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type WxServiceThrift interface {
  // Parameters:
  //  - CallTime
  //  - Name
  //  - ParamMap
  CallBack(callTime int64, name string, paramMap map[string]string) (r []string, err error)
  // Parameters:
  //  - NewArticle_
  Put(newArticle *Article) (err error)
  GetAccessToken() (r string, err error)
  GetJsapiTicket() (r string, err error)
  // Parameters:
  //  - URL
  JsapiSign(url string) (r *JsapiSignData, err error)
  // Parameters:
  //  - Token
  //  - Echostr
  //  - Signature
  //  - Timestamp
  //  - Nonce
  IsWeixinServer(token string, echostr string, signature string, timestamp string, nonce string) (r *IsWeixinServerData, err error)
  // Parameters:
  //  - Body
  ParseTemplateToMixedMessages(body string) (r *ParseTemplateToMixedMessagesData, err error)
  // Parameters:
  //  - Tpl
  SendTmplateMessage(tpl *TemplateMsgData) (r *SendTemplateResponseData, err error)
  // Parameters:
  //  - FromUserName
  //  - ToUserName
  //  - Content
  GetTextXml(fromUserName string, toUserName string, content string) (r string, err error)
  // Parameters:
  //  - FromUserName
  //  - ToUserName
  //  - KfAccount
  TransferCustomerService(fromUserName string, toUserName string, kfAccount string) (r string, err error)
  // Parameters:
  //  - RedirectURL
  //  - Scope
  AuthCodeURL(redirectURL string, scope string) (r *AuthCodeURLData, err error)
  // Parameters:
  //  - Code
  GetUserInfoBySnsapiBase(code string) (r *UserInfo, err error)
  // Parameters:
  //  - Code
  GetUserInfoBySnsapiUserinfo(code string) (r *UserInfo, err error)
  // Parameters:
  //  - Openid
  GetUserInfoByOpenid(openid string) (r *UserInfo, err error)
  // Parameters:
  //  - Menu
  CreateMenu(menu *Menu) (r *WxResponse, err error)
  // Parameters:
  //  - MenuJsonBytes
  CreateMenuByJson(menuJsonBytes []byte) (r *WxResponse, err error)
  // Parameters:
  //  - OrderParam
  UnifiedOrder(orderParam *UnifiedOrderParam) (r *UnifiedOrderResponse, err error)
  // Parameters:
  //  - UnifiedOrderResult_
  GetJsApiParameters(unifiedOrderResult *UnifiedOrderResponse) (r *JsApiParameters, err error)
  // Parameters:
  //  - XmlBytes
  WxpayParseAndVerifySign(xmlBytes []byte) (r *WXPayNotify, err error)
  // Parameters:
  //  - QrJsonBytes
  QrcodeShow(qrJsonBytes []byte) (r *QrRespone, err error)
  MaterialCount() (r *MaCount, err error)
  MaterialList() (r *Res, err error)
}

type WxServiceThriftClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewWxServiceThriftClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WxServiceThriftClient {
  return &WxServiceThriftClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewWxServiceThriftClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WxServiceThriftClient {
  return &WxServiceThriftClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - CallTime
//  - Name
//  - ParamMap
func (p *WxServiceThriftClient) CallBack(callTime int64, name string, paramMap map[string]string) (r []string, err error) {
  if err = p.sendCallBack(callTime, name, paramMap); err != nil { return }
  return p.recvCallBack()
}

func (p *WxServiceThriftClient) sendCallBack(callTime int64, name string, paramMap map[string]string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("CallBack", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftCallBackArgs{
  CallTime : callTime,
  Name : name,
  ParamMap : paramMap,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvCallBack() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "CallBack" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CallBack failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CallBack failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CallBack failed: invalid message type")
    return
  }
  result := WxServiceThriftCallBackResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - NewArticle_
func (p *WxServiceThriftClient) Put(newArticle *Article) (err error) {
  if err = p.sendPut(newArticle); err != nil { return }
  return p.recvPut()
}

func (p *WxServiceThriftClient) sendPut(newArticle *Article)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("put", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftPutArgs{
  NewArticle_ : newArticle,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvPut() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "put" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "put failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "put failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "put failed: invalid message type")
    return
  }
  result := WxServiceThriftPutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

func (p *WxServiceThriftClient) GetAccessToken() (r string, err error) {
  if err = p.sendGetAccessToken(); err != nil { return }
  return p.recvGetAccessToken()
}

func (p *WxServiceThriftClient) sendGetAccessToken()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetAccessToken", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftGetAccessTokenArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvGetAccessToken() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetAccessToken" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAccessToken failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAccessToken failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAccessToken failed: invalid message type")
    return
  }
  result := WxServiceThriftGetAccessTokenResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *WxServiceThriftClient) GetJsapiTicket() (r string, err error) {
  if err = p.sendGetJsapiTicket(); err != nil { return }
  return p.recvGetJsapiTicket()
}

func (p *WxServiceThriftClient) sendGetJsapiTicket()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetJsapiTicket", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftGetJsapiTicketArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvGetJsapiTicket() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetJsapiTicket" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetJsapiTicket failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetJsapiTicket failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetJsapiTicket failed: invalid message type")
    return
  }
  result := WxServiceThriftGetJsapiTicketResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - URL
func (p *WxServiceThriftClient) JsapiSign(url string) (r *JsapiSignData, err error) {
  if err = p.sendJsapiSign(url); err != nil { return }
  return p.recvJsapiSign()
}

func (p *WxServiceThriftClient) sendJsapiSign(url string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("JsapiSign", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftJsapiSignArgs{
  URL : url,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvJsapiSign() (value *JsapiSignData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "JsapiSign" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "JsapiSign failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "JsapiSign failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "JsapiSign failed: invalid message type")
    return
  }
  result := WxServiceThriftJsapiSignResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Token
//  - Echostr
//  - Signature
//  - Timestamp
//  - Nonce
func (p *WxServiceThriftClient) IsWeixinServer(token string, echostr string, signature string, timestamp string, nonce string) (r *IsWeixinServerData, err error) {
  if err = p.sendIsWeixinServer(token, echostr, signature, timestamp, nonce); err != nil { return }
  return p.recvIsWeixinServer()
}

func (p *WxServiceThriftClient) sendIsWeixinServer(token string, echostr string, signature string, timestamp string, nonce string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("IsWeixinServer", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftIsWeixinServerArgs{
  Token : token,
  Echostr : echostr,
  Signature : signature,
  Timestamp : timestamp,
  Nonce : nonce,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvIsWeixinServer() (value *IsWeixinServerData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "IsWeixinServer" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "IsWeixinServer failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "IsWeixinServer failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "IsWeixinServer failed: invalid message type")
    return
  }
  result := WxServiceThriftIsWeixinServerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Body
func (p *WxServiceThriftClient) ParseTemplateToMixedMessages(body string) (r *ParseTemplateToMixedMessagesData, err error) {
  if err = p.sendParseTemplateToMixedMessages(body); err != nil { return }
  return p.recvParseTemplateToMixedMessages()
}

func (p *WxServiceThriftClient) sendParseTemplateToMixedMessages(body string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ParseTemplateToMixedMessages", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftParseTemplateToMixedMessagesArgs{
  Body : body,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvParseTemplateToMixedMessages() (value *ParseTemplateToMixedMessagesData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ParseTemplateToMixedMessages" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ParseTemplateToMixedMessages failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ParseTemplateToMixedMessages failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ParseTemplateToMixedMessages failed: invalid message type")
    return
  }
  result := WxServiceThriftParseTemplateToMixedMessagesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Tpl
func (p *WxServiceThriftClient) SendTmplateMessage(tpl *TemplateMsgData) (r *SendTemplateResponseData, err error) {
  if err = p.sendSendTmplateMessage(tpl); err != nil { return }
  return p.recvSendTmplateMessage()
}

func (p *WxServiceThriftClient) sendSendTmplateMessage(tpl *TemplateMsgData)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("SendTmplateMessage", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftSendTmplateMessageArgs{
  Tpl : tpl,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvSendTmplateMessage() (value *SendTemplateResponseData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "SendTmplateMessage" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SendTmplateMessage failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SendTmplateMessage failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SendTmplateMessage failed: invalid message type")
    return
  }
  result := WxServiceThriftSendTmplateMessageResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - FromUserName
//  - ToUserName
//  - Content
func (p *WxServiceThriftClient) GetTextXml(fromUserName string, toUserName string, content string) (r string, err error) {
  if err = p.sendGetTextXml(fromUserName, toUserName, content); err != nil { return }
  return p.recvGetTextXml()
}

func (p *WxServiceThriftClient) sendGetTextXml(fromUserName string, toUserName string, content string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetTextXml", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftGetTextXmlArgs{
  FromUserName : fromUserName,
  ToUserName : toUserName,
  Content : content,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvGetTextXml() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetTextXml" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetTextXml failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetTextXml failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetTextXml failed: invalid message type")
    return
  }
  result := WxServiceThriftGetTextXmlResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - FromUserName
//  - ToUserName
//  - KfAccount
func (p *WxServiceThriftClient) TransferCustomerService(fromUserName string, toUserName string, kfAccount string) (r string, err error) {
  if err = p.sendTransferCustomerService(fromUserName, toUserName, kfAccount); err != nil { return }
  return p.recvTransferCustomerService()
}

func (p *WxServiceThriftClient) sendTransferCustomerService(fromUserName string, toUserName string, kfAccount string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("TransferCustomerService", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftTransferCustomerServiceArgs{
  FromUserName : fromUserName,
  ToUserName : toUserName,
  KfAccount : kfAccount,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvTransferCustomerService() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "TransferCustomerService" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TransferCustomerService failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TransferCustomerService failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TransferCustomerService failed: invalid message type")
    return
  }
  result := WxServiceThriftTransferCustomerServiceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - RedirectURL
//  - Scope
func (p *WxServiceThriftClient) AuthCodeURL(redirectURL string, scope string) (r *AuthCodeURLData, err error) {
  if err = p.sendAuthCodeURL(redirectURL, scope); err != nil { return }
  return p.recvAuthCodeURL()
}

func (p *WxServiceThriftClient) sendAuthCodeURL(redirectURL string, scope string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("AuthCodeURL", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftAuthCodeURLArgs{
  RedirectURL : redirectURL,
  Scope : scope,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvAuthCodeURL() (value *AuthCodeURLData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "AuthCodeURL" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AuthCodeURL failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AuthCodeURL failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AuthCodeURL failed: invalid message type")
    return
  }
  result := WxServiceThriftAuthCodeURLResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Code
func (p *WxServiceThriftClient) GetUserInfoBySnsapiBase(code string) (r *UserInfo, err error) {
  if err = p.sendGetUserInfoBySnsapiBase(code); err != nil { return }
  return p.recvGetUserInfoBySnsapiBase()
}

func (p *WxServiceThriftClient) sendGetUserInfoBySnsapiBase(code string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetUserInfoBySnsapiBase", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftGetUserInfoBySnsapiBaseArgs{
  Code : code,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvGetUserInfoBySnsapiBase() (value *UserInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetUserInfoBySnsapiBase" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetUserInfoBySnsapiBase failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetUserInfoBySnsapiBase failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetUserInfoBySnsapiBase failed: invalid message type")
    return
  }
  result := WxServiceThriftGetUserInfoBySnsapiBaseResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Code
func (p *WxServiceThriftClient) GetUserInfoBySnsapiUserinfo(code string) (r *UserInfo, err error) {
  if err = p.sendGetUserInfoBySnsapiUserinfo(code); err != nil { return }
  return p.recvGetUserInfoBySnsapiUserinfo()
}

func (p *WxServiceThriftClient) sendGetUserInfoBySnsapiUserinfo(code string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetUserInfoBySnsapiUserinfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftGetUserInfoBySnsapiUserinfoArgs{
  Code : code,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvGetUserInfoBySnsapiUserinfo() (value *UserInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetUserInfoBySnsapiUserinfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetUserInfoBySnsapiUserinfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetUserInfoBySnsapiUserinfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetUserInfoBySnsapiUserinfo failed: invalid message type")
    return
  }
  result := WxServiceThriftGetUserInfoBySnsapiUserinfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Openid
func (p *WxServiceThriftClient) GetUserInfoByOpenid(openid string) (r *UserInfo, err error) {
  if err = p.sendGetUserInfoByOpenid(openid); err != nil { return }
  return p.recvGetUserInfoByOpenid()
}

func (p *WxServiceThriftClient) sendGetUserInfoByOpenid(openid string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetUserInfoByOpenid", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftGetUserInfoByOpenidArgs{
  Openid : openid,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvGetUserInfoByOpenid() (value *UserInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetUserInfoByOpenid" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetUserInfoByOpenid failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetUserInfoByOpenid failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetUserInfoByOpenid failed: invalid message type")
    return
  }
  result := WxServiceThriftGetUserInfoByOpenidResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Menu
func (p *WxServiceThriftClient) CreateMenu(menu *Menu) (r *WxResponse, err error) {
  if err = p.sendCreateMenu(menu); err != nil { return }
  return p.recvCreateMenu()
}

func (p *WxServiceThriftClient) sendCreateMenu(menu *Menu)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("CreateMenu", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftCreateMenuArgs{
  Menu : menu,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvCreateMenu() (value *WxResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "CreateMenu" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CreateMenu failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateMenu failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CreateMenu failed: invalid message type")
    return
  }
  result := WxServiceThriftCreateMenuResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - MenuJsonBytes
func (p *WxServiceThriftClient) CreateMenuByJson(menuJsonBytes []byte) (r *WxResponse, err error) {
  if err = p.sendCreateMenuByJson(menuJsonBytes); err != nil { return }
  return p.recvCreateMenuByJson()
}

func (p *WxServiceThriftClient) sendCreateMenuByJson(menuJsonBytes []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("CreateMenuByJson", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftCreateMenuByJsonArgs{
  MenuJsonBytes : menuJsonBytes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvCreateMenuByJson() (value *WxResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "CreateMenuByJson" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CreateMenuByJson failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateMenuByJson failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CreateMenuByJson failed: invalid message type")
    return
  }
  result := WxServiceThriftCreateMenuByJsonResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - OrderParam
func (p *WxServiceThriftClient) UnifiedOrder(orderParam *UnifiedOrderParam) (r *UnifiedOrderResponse, err error) {
  if err = p.sendUnifiedOrder(orderParam); err != nil { return }
  return p.recvUnifiedOrder()
}

func (p *WxServiceThriftClient) sendUnifiedOrder(orderParam *UnifiedOrderParam)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("UnifiedOrder", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftUnifiedOrderArgs{
  OrderParam : orderParam,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvUnifiedOrder() (value *UnifiedOrderResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "UnifiedOrder" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "UnifiedOrder failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UnifiedOrder failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "UnifiedOrder failed: invalid message type")
    return
  }
  result := WxServiceThriftUnifiedOrderResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UnifiedOrderResult_
func (p *WxServiceThriftClient) GetJsApiParameters(unifiedOrderResult *UnifiedOrderResponse) (r *JsApiParameters, err error) {
  if err = p.sendGetJsApiParameters(unifiedOrderResult); err != nil { return }
  return p.recvGetJsApiParameters()
}

func (p *WxServiceThriftClient) sendGetJsApiParameters(unifiedOrderResult *UnifiedOrderResponse)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetJsApiParameters", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftGetJsApiParametersArgs{
  UnifiedOrderResult_ : unifiedOrderResult,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvGetJsApiParameters() (value *JsApiParameters, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetJsApiParameters" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetJsApiParameters failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetJsApiParameters failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetJsApiParameters failed: invalid message type")
    return
  }
  result := WxServiceThriftGetJsApiParametersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - XmlBytes
func (p *WxServiceThriftClient) WxpayParseAndVerifySign(xmlBytes []byte) (r *WXPayNotify, err error) {
  if err = p.sendWxpayParseAndVerifySign(xmlBytes); err != nil { return }
  return p.recvWxpayParseAndVerifySign()
}

func (p *WxServiceThriftClient) sendWxpayParseAndVerifySign(xmlBytes []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("WxpayParseAndVerifySign", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftWxpayParseAndVerifySignArgs{
  XmlBytes : xmlBytes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvWxpayParseAndVerifySign() (value *WXPayNotify, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "WxpayParseAndVerifySign" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "WxpayParseAndVerifySign failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "WxpayParseAndVerifySign failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "WxpayParseAndVerifySign failed: invalid message type")
    return
  }
  result := WxServiceThriftWxpayParseAndVerifySignResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - QrJsonBytes
func (p *WxServiceThriftClient) QrcodeShow(qrJsonBytes []byte) (r *QrRespone, err error) {
  if err = p.sendQrcodeShow(qrJsonBytes); err != nil { return }
  return p.recvQrcodeShow()
}

func (p *WxServiceThriftClient) sendQrcodeShow(qrJsonBytes []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("QrcodeShow", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftQrcodeShowArgs{
  QrJsonBytes : qrJsonBytes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvQrcodeShow() (value *QrRespone, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "QrcodeShow" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "QrcodeShow failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "QrcodeShow failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "QrcodeShow failed: invalid message type")
    return
  }
  result := WxServiceThriftQrcodeShowResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *WxServiceThriftClient) MaterialCount() (r *MaCount, err error) {
  if err = p.sendMaterialCount(); err != nil { return }
  return p.recvMaterialCount()
}

func (p *WxServiceThriftClient) sendMaterialCount()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("MaterialCount", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftMaterialCountArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvMaterialCount() (value *MaCount, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "MaterialCount" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "MaterialCount failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "MaterialCount failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "MaterialCount failed: invalid message type")
    return
  }
  result := WxServiceThriftMaterialCountResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *WxServiceThriftClient) MaterialList() (r *Res, err error) {
  if err = p.sendMaterialList(); err != nil { return }
  return p.recvMaterialList()
}

func (p *WxServiceThriftClient) sendMaterialList()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("MaterialList", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := WxServiceThriftMaterialListArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *WxServiceThriftClient) recvMaterialList() (value *Res, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "MaterialList" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "MaterialList failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "MaterialList failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "MaterialList failed: invalid message type")
    return
  }
  result := WxServiceThriftMaterialListResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type WxServiceThriftProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler WxServiceThrift
}

func (p *WxServiceThriftProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *WxServiceThriftProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *WxServiceThriftProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewWxServiceThriftProcessor(handler WxServiceThrift) *WxServiceThriftProcessor {

  self44 := &WxServiceThriftProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self44.processorMap["CallBack"] = &wxServiceThriftProcessorCallBack{handler:handler}
  self44.processorMap["put"] = &wxServiceThriftProcessorPut{handler:handler}
  self44.processorMap["GetAccessToken"] = &wxServiceThriftProcessorGetAccessToken{handler:handler}
  self44.processorMap["GetJsapiTicket"] = &wxServiceThriftProcessorGetJsapiTicket{handler:handler}
  self44.processorMap["JsapiSign"] = &wxServiceThriftProcessorJsapiSign{handler:handler}
  self44.processorMap["IsWeixinServer"] = &wxServiceThriftProcessorIsWeixinServer{handler:handler}
  self44.processorMap["ParseTemplateToMixedMessages"] = &wxServiceThriftProcessorParseTemplateToMixedMessages{handler:handler}
  self44.processorMap["SendTmplateMessage"] = &wxServiceThriftProcessorSendTmplateMessage{handler:handler}
  self44.processorMap["GetTextXml"] = &wxServiceThriftProcessorGetTextXml{handler:handler}
  self44.processorMap["TransferCustomerService"] = &wxServiceThriftProcessorTransferCustomerService{handler:handler}
  self44.processorMap["AuthCodeURL"] = &wxServiceThriftProcessorAuthCodeURL{handler:handler}
  self44.processorMap["GetUserInfoBySnsapiBase"] = &wxServiceThriftProcessorGetUserInfoBySnsapiBase{handler:handler}
  self44.processorMap["GetUserInfoBySnsapiUserinfo"] = &wxServiceThriftProcessorGetUserInfoBySnsapiUserinfo{handler:handler}
  self44.processorMap["GetUserInfoByOpenid"] = &wxServiceThriftProcessorGetUserInfoByOpenid{handler:handler}
  self44.processorMap["CreateMenu"] = &wxServiceThriftProcessorCreateMenu{handler:handler}
  self44.processorMap["CreateMenuByJson"] = &wxServiceThriftProcessorCreateMenuByJson{handler:handler}
  self44.processorMap["UnifiedOrder"] = &wxServiceThriftProcessorUnifiedOrder{handler:handler}
  self44.processorMap["GetJsApiParameters"] = &wxServiceThriftProcessorGetJsApiParameters{handler:handler}
  self44.processorMap["WxpayParseAndVerifySign"] = &wxServiceThriftProcessorWxpayParseAndVerifySign{handler:handler}
  self44.processorMap["QrcodeShow"] = &wxServiceThriftProcessorQrcodeShow{handler:handler}
  self44.processorMap["MaterialCount"] = &wxServiceThriftProcessorMaterialCount{handler:handler}
  self44.processorMap["MaterialList"] = &wxServiceThriftProcessorMaterialList{handler:handler}
return self44
}

func (p *WxServiceThriftProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x45 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x45.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x45

}

type wxServiceThriftProcessorCallBack struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorCallBack) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftCallBackArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CallBack", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftCallBackResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.CallBack(args.CallTime, args.Name, args.ParamMap); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CallBack: " + err2.Error())
    oprot.WriteMessageBegin("CallBack", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CallBack", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorPut struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftPutResult{}
  var err2 error
  if err2 = p.handler.Put(args.NewArticle_); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("put", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorGetAccessToken struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorGetAccessToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftGetAccessTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAccessToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftGetAccessTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetAccessToken(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAccessToken: " + err2.Error())
    oprot.WriteMessageBegin("GetAccessToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetAccessToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorGetJsapiTicket struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorGetJsapiTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftGetJsapiTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetJsapiTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftGetJsapiTicketResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetJsapiTicket(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetJsapiTicket: " + err2.Error())
    oprot.WriteMessageBegin("GetJsapiTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetJsapiTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorJsapiSign struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorJsapiSign) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftJsapiSignArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("JsapiSign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftJsapiSignResult{}
var retval *JsapiSignData
  var err2 error
  if retval, err2 = p.handler.JsapiSign(args.URL); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing JsapiSign: " + err2.Error())
    oprot.WriteMessageBegin("JsapiSign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("JsapiSign", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorIsWeixinServer struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorIsWeixinServer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftIsWeixinServerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("IsWeixinServer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftIsWeixinServerResult{}
var retval *IsWeixinServerData
  var err2 error
  if retval, err2 = p.handler.IsWeixinServer(args.Token, args.Echostr, args.Signature, args.Timestamp, args.Nonce); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsWeixinServer: " + err2.Error())
    oprot.WriteMessageBegin("IsWeixinServer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("IsWeixinServer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorParseTemplateToMixedMessages struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorParseTemplateToMixedMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftParseTemplateToMixedMessagesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ParseTemplateToMixedMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftParseTemplateToMixedMessagesResult{}
var retval *ParseTemplateToMixedMessagesData
  var err2 error
  if retval, err2 = p.handler.ParseTemplateToMixedMessages(args.Body); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ParseTemplateToMixedMessages: " + err2.Error())
    oprot.WriteMessageBegin("ParseTemplateToMixedMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ParseTemplateToMixedMessages", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorSendTmplateMessage struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorSendTmplateMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftSendTmplateMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendTmplateMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftSendTmplateMessageResult{}
var retval *SendTemplateResponseData
  var err2 error
  if retval, err2 = p.handler.SendTmplateMessage(args.Tpl); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendTmplateMessage: " + err2.Error())
    oprot.WriteMessageBegin("SendTmplateMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SendTmplateMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorGetTextXml struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorGetTextXml) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftGetTextXmlArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTextXml", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftGetTextXmlResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetTextXml(args.FromUserName, args.ToUserName, args.Content); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTextXml: " + err2.Error())
    oprot.WriteMessageBegin("GetTextXml", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetTextXml", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorTransferCustomerService struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorTransferCustomerService) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftTransferCustomerServiceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("TransferCustomerService", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftTransferCustomerServiceResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.TransferCustomerService(args.FromUserName, args.ToUserName, args.KfAccount); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransferCustomerService: " + err2.Error())
    oprot.WriteMessageBegin("TransferCustomerService", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("TransferCustomerService", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorAuthCodeURL struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorAuthCodeURL) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftAuthCodeURLArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AuthCodeURL", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftAuthCodeURLResult{}
var retval *AuthCodeURLData
  var err2 error
  if retval, err2 = p.handler.AuthCodeURL(args.RedirectURL, args.Scope); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AuthCodeURL: " + err2.Error())
    oprot.WriteMessageBegin("AuthCodeURL", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AuthCodeURL", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorGetUserInfoBySnsapiBase struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorGetUserInfoBySnsapiBase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftGetUserInfoBySnsapiBaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserInfoBySnsapiBase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftGetUserInfoBySnsapiBaseResult{}
var retval *UserInfo
  var err2 error
  if retval, err2 = p.handler.GetUserInfoBySnsapiBase(args.Code); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserInfoBySnsapiBase: " + err2.Error())
    oprot.WriteMessageBegin("GetUserInfoBySnsapiBase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserInfoBySnsapiBase", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorGetUserInfoBySnsapiUserinfo struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorGetUserInfoBySnsapiUserinfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftGetUserInfoBySnsapiUserinfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserInfoBySnsapiUserinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftGetUserInfoBySnsapiUserinfoResult{}
var retval *UserInfo
  var err2 error
  if retval, err2 = p.handler.GetUserInfoBySnsapiUserinfo(args.Code); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserInfoBySnsapiUserinfo: " + err2.Error())
    oprot.WriteMessageBegin("GetUserInfoBySnsapiUserinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserInfoBySnsapiUserinfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorGetUserInfoByOpenid struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorGetUserInfoByOpenid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftGetUserInfoByOpenidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserInfoByOpenid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftGetUserInfoByOpenidResult{}
var retval *UserInfo
  var err2 error
  if retval, err2 = p.handler.GetUserInfoByOpenid(args.Openid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserInfoByOpenid: " + err2.Error())
    oprot.WriteMessageBegin("GetUserInfoByOpenid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserInfoByOpenid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorCreateMenu struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorCreateMenu) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftCreateMenuArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateMenu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftCreateMenuResult{}
var retval *WxResponse
  var err2 error
  if retval, err2 = p.handler.CreateMenu(args.Menu); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateMenu: " + err2.Error())
    oprot.WriteMessageBegin("CreateMenu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CreateMenu", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorCreateMenuByJson struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorCreateMenuByJson) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftCreateMenuByJsonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateMenuByJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftCreateMenuByJsonResult{}
var retval *WxResponse
  var err2 error
  if retval, err2 = p.handler.CreateMenuByJson(args.MenuJsonBytes); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateMenuByJson: " + err2.Error())
    oprot.WriteMessageBegin("CreateMenuByJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CreateMenuByJson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorUnifiedOrder struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorUnifiedOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftUnifiedOrderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UnifiedOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftUnifiedOrderResult{}
var retval *UnifiedOrderResponse
  var err2 error
  if retval, err2 = p.handler.UnifiedOrder(args.OrderParam); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UnifiedOrder: " + err2.Error())
    oprot.WriteMessageBegin("UnifiedOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("UnifiedOrder", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorGetJsApiParameters struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorGetJsApiParameters) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftGetJsApiParametersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetJsApiParameters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftGetJsApiParametersResult{}
var retval *JsApiParameters
  var err2 error
  if retval, err2 = p.handler.GetJsApiParameters(args.UnifiedOrderResult_); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetJsApiParameters: " + err2.Error())
    oprot.WriteMessageBegin("GetJsApiParameters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetJsApiParameters", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorWxpayParseAndVerifySign struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorWxpayParseAndVerifySign) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftWxpayParseAndVerifySignArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("WxpayParseAndVerifySign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftWxpayParseAndVerifySignResult{}
var retval *WXPayNotify
  var err2 error
  if retval, err2 = p.handler.WxpayParseAndVerifySign(args.XmlBytes); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WxpayParseAndVerifySign: " + err2.Error())
    oprot.WriteMessageBegin("WxpayParseAndVerifySign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("WxpayParseAndVerifySign", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorQrcodeShow struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorQrcodeShow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftQrcodeShowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("QrcodeShow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftQrcodeShowResult{}
var retval *QrRespone
  var err2 error
  if retval, err2 = p.handler.QrcodeShow(args.QrJsonBytes); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QrcodeShow: " + err2.Error())
    oprot.WriteMessageBegin("QrcodeShow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("QrcodeShow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorMaterialCount struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorMaterialCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftMaterialCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("MaterialCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftMaterialCountResult{}
var retval *MaCount
  var err2 error
  if retval, err2 = p.handler.MaterialCount(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MaterialCount: " + err2.Error())
    oprot.WriteMessageBegin("MaterialCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("MaterialCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wxServiceThriftProcessorMaterialList struct {
  handler WxServiceThrift
}

func (p *wxServiceThriftProcessorMaterialList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WxServiceThriftMaterialListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("MaterialList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WxServiceThriftMaterialListResult{}
var retval *Res
  var err2 error
  if retval, err2 = p.handler.MaterialList(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MaterialList: " + err2.Error())
    oprot.WriteMessageBegin("MaterialList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("MaterialList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - CallTime
//  - Name
//  - ParamMap
type WxServiceThriftCallBackArgs struct {
  CallTime int64 `thrift:"callTime,1" db:"callTime" json:"callTime"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  ParamMap map[string]string `thrift:"paramMap,3" db:"paramMap" json:"paramMap"`
}

func NewWxServiceThriftCallBackArgs() *WxServiceThriftCallBackArgs {
  return &WxServiceThriftCallBackArgs{}
}


func (p *WxServiceThriftCallBackArgs) GetCallTime() int64 {
  return p.CallTime
}

func (p *WxServiceThriftCallBackArgs) GetName() string {
  return p.Name
}

func (p *WxServiceThriftCallBackArgs) GetParamMap() map[string]string {
  return p.ParamMap
}
func (p *WxServiceThriftCallBackArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftCallBackArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CallTime = v
}
  return nil
}

func (p *WxServiceThriftCallBackArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *WxServiceThriftCallBackArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParamMap =  tMap
  for i := 0; i < size; i ++ {
var _key46 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key46 = v
}
var _val47 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val47 = v
}
    p.ParamMap[_key46] = _val47
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *WxServiceThriftCallBackArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CallBack_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftCallBackArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:callTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CallTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:callTime: ", p), err) }
  return err
}

func (p *WxServiceThriftCallBackArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *WxServiceThriftCallBackArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("paramMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paramMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParamMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paramMap: ", p), err) }
  return err
}

func (p *WxServiceThriftCallBackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftCallBackArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftCallBackResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftCallBackResult() *WxServiceThriftCallBackResult {
  return &WxServiceThriftCallBackResult{}
}

var WxServiceThriftCallBackResult_Success_DEFAULT []string

func (p *WxServiceThriftCallBackResult) GetSuccess() []string {
  return p.Success
}
func (p *WxServiceThriftCallBackResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftCallBackResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftCallBackResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem48 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem48 = v
}
    p.Success = append(p.Success, _elem48)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WxServiceThriftCallBackResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CallBack_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftCallBackResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftCallBackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftCallBackResult(%+v)", *p)
}

// Attributes:
//  - NewArticle_
type WxServiceThriftPutArgs struct {
  NewArticle_ *Article `thrift:"newArticle,1" db:"newArticle" json:"newArticle"`
}

func NewWxServiceThriftPutArgs() *WxServiceThriftPutArgs {
  return &WxServiceThriftPutArgs{}
}

var WxServiceThriftPutArgs_NewArticle__DEFAULT *Article
func (p *WxServiceThriftPutArgs) GetNewArticle_() *Article {
  if !p.IsSetNewArticle_() {
    return WxServiceThriftPutArgs_NewArticle__DEFAULT
  }
return p.NewArticle_
}
func (p *WxServiceThriftPutArgs) IsSetNewArticle_() bool {
  return p.NewArticle_ != nil
}

func (p *WxServiceThriftPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.NewArticle_ = &Article{}
  if err := p.NewArticle_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewArticle_), err)
  }
  return nil
}

func (p *WxServiceThriftPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newArticle", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:newArticle: ", p), err) }
  if err := p.NewArticle_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewArticle_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:newArticle: ", p), err) }
  return err
}

func (p *WxServiceThriftPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftPutArgs(%+v)", *p)
}

type WxServiceThriftPutResult struct {
}

func NewWxServiceThriftPutResult() *WxServiceThriftPutResult {
  return &WxServiceThriftPutResult{}
}

func (p *WxServiceThriftPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftPutResult(%+v)", *p)
}

type WxServiceThriftGetAccessTokenArgs struct {
}

func NewWxServiceThriftGetAccessTokenArgs() *WxServiceThriftGetAccessTokenArgs {
  return &WxServiceThriftGetAccessTokenArgs{}
}

func (p *WxServiceThriftGetAccessTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetAccessTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAccessToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetAccessTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetAccessTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftGetAccessTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftGetAccessTokenResult() *WxServiceThriftGetAccessTokenResult {
  return &WxServiceThriftGetAccessTokenResult{}
}

var WxServiceThriftGetAccessTokenResult_Success_DEFAULT string
func (p *WxServiceThriftGetAccessTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return WxServiceThriftGetAccessTokenResult_Success_DEFAULT
  }
return *p.Success
}
func (p *WxServiceThriftGetAccessTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftGetAccessTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetAccessTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WxServiceThriftGetAccessTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAccessToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftGetAccessTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetAccessTokenResult(%+v)", *p)
}

type WxServiceThriftGetJsapiTicketArgs struct {
}

func NewWxServiceThriftGetJsapiTicketArgs() *WxServiceThriftGetJsapiTicketArgs {
  return &WxServiceThriftGetJsapiTicketArgs{}
}

func (p *WxServiceThriftGetJsapiTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetJsapiTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetJsapiTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetJsapiTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetJsapiTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftGetJsapiTicketResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftGetJsapiTicketResult() *WxServiceThriftGetJsapiTicketResult {
  return &WxServiceThriftGetJsapiTicketResult{}
}

var WxServiceThriftGetJsapiTicketResult_Success_DEFAULT string
func (p *WxServiceThriftGetJsapiTicketResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return WxServiceThriftGetJsapiTicketResult_Success_DEFAULT
  }
return *p.Success
}
func (p *WxServiceThriftGetJsapiTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftGetJsapiTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetJsapiTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WxServiceThriftGetJsapiTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetJsapiTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetJsapiTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftGetJsapiTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetJsapiTicketResult(%+v)", *p)
}

// Attributes:
//  - URL
type WxServiceThriftJsapiSignArgs struct {
  URL string `thrift:"url,1" db:"url" json:"url"`
}

func NewWxServiceThriftJsapiSignArgs() *WxServiceThriftJsapiSignArgs {
  return &WxServiceThriftJsapiSignArgs{}
}


func (p *WxServiceThriftJsapiSignArgs) GetURL() string {
  return p.URL
}
func (p *WxServiceThriftJsapiSignArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftJsapiSignArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *WxServiceThriftJsapiSignArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JsapiSign_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftJsapiSignArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  return err
}

func (p *WxServiceThriftJsapiSignArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftJsapiSignArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftJsapiSignResult struct {
  Success *JsapiSignData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftJsapiSignResult() *WxServiceThriftJsapiSignResult {
  return &WxServiceThriftJsapiSignResult{}
}

var WxServiceThriftJsapiSignResult_Success_DEFAULT *JsapiSignData
func (p *WxServiceThriftJsapiSignResult) GetSuccess() *JsapiSignData {
  if !p.IsSetSuccess() {
    return WxServiceThriftJsapiSignResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftJsapiSignResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftJsapiSignResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftJsapiSignResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &JsapiSignData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftJsapiSignResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JsapiSign_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftJsapiSignResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftJsapiSignResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftJsapiSignResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Echostr
//  - Signature
//  - Timestamp
//  - Nonce
type WxServiceThriftIsWeixinServerArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Echostr string `thrift:"echostr,2" db:"echostr" json:"echostr"`
  Signature string `thrift:"signature,3" db:"signature" json:"signature"`
  Timestamp string `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  Nonce string `thrift:"nonce,5" db:"nonce" json:"nonce"`
}

func NewWxServiceThriftIsWeixinServerArgs() *WxServiceThriftIsWeixinServerArgs {
  return &WxServiceThriftIsWeixinServerArgs{}
}


func (p *WxServiceThriftIsWeixinServerArgs) GetToken() string {
  return p.Token
}

func (p *WxServiceThriftIsWeixinServerArgs) GetEchostr() string {
  return p.Echostr
}

func (p *WxServiceThriftIsWeixinServerArgs) GetSignature() string {
  return p.Signature
}

func (p *WxServiceThriftIsWeixinServerArgs) GetTimestamp() string {
  return p.Timestamp
}

func (p *WxServiceThriftIsWeixinServerArgs) GetNonce() string {
  return p.Nonce
}
func (p *WxServiceThriftIsWeixinServerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftIsWeixinServerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *WxServiceThriftIsWeixinServerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Echostr = v
}
  return nil
}

func (p *WxServiceThriftIsWeixinServerArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *WxServiceThriftIsWeixinServerArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *WxServiceThriftIsWeixinServerArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *WxServiceThriftIsWeixinServerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsWeixinServer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftIsWeixinServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *WxServiceThriftIsWeixinServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("echostr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:echostr: ", p), err) }
  if err := oprot.WriteString(string(p.Echostr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.echostr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:echostr: ", p), err) }
  return err
}

func (p *WxServiceThriftIsWeixinServerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signature", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:signature: ", p), err) }
  if err := oprot.WriteString(string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signature (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:signature: ", p), err) }
  return err
}

func (p *WxServiceThriftIsWeixinServerArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *WxServiceThriftIsWeixinServerArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce: ", p), err) }
  return err
}

func (p *WxServiceThriftIsWeixinServerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftIsWeixinServerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftIsWeixinServerResult struct {
  Success *IsWeixinServerData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftIsWeixinServerResult() *WxServiceThriftIsWeixinServerResult {
  return &WxServiceThriftIsWeixinServerResult{}
}

var WxServiceThriftIsWeixinServerResult_Success_DEFAULT *IsWeixinServerData
func (p *WxServiceThriftIsWeixinServerResult) GetSuccess() *IsWeixinServerData {
  if !p.IsSetSuccess() {
    return WxServiceThriftIsWeixinServerResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftIsWeixinServerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftIsWeixinServerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftIsWeixinServerResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &IsWeixinServerData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftIsWeixinServerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsWeixinServer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftIsWeixinServerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftIsWeixinServerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftIsWeixinServerResult(%+v)", *p)
}

// Attributes:
//  - Body
type WxServiceThriftParseTemplateToMixedMessagesArgs struct {
  Body string `thrift:"body,1" db:"body" json:"body"`
}

func NewWxServiceThriftParseTemplateToMixedMessagesArgs() *WxServiceThriftParseTemplateToMixedMessagesArgs {
  return &WxServiceThriftParseTemplateToMixedMessagesArgs{}
}


func (p *WxServiceThriftParseTemplateToMixedMessagesArgs) GetBody() string {
  return p.Body
}
func (p *WxServiceThriftParseTemplateToMixedMessagesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftParseTemplateToMixedMessagesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *WxServiceThriftParseTemplateToMixedMessagesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ParseTemplateToMixedMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftParseTemplateToMixedMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:body: ", p), err) }
  if err := oprot.WriteString(string(p.Body)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.body (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:body: ", p), err) }
  return err
}

func (p *WxServiceThriftParseTemplateToMixedMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftParseTemplateToMixedMessagesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftParseTemplateToMixedMessagesResult struct {
  Success *ParseTemplateToMixedMessagesData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftParseTemplateToMixedMessagesResult() *WxServiceThriftParseTemplateToMixedMessagesResult {
  return &WxServiceThriftParseTemplateToMixedMessagesResult{}
}

var WxServiceThriftParseTemplateToMixedMessagesResult_Success_DEFAULT *ParseTemplateToMixedMessagesData
func (p *WxServiceThriftParseTemplateToMixedMessagesResult) GetSuccess() *ParseTemplateToMixedMessagesData {
  if !p.IsSetSuccess() {
    return WxServiceThriftParseTemplateToMixedMessagesResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftParseTemplateToMixedMessagesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftParseTemplateToMixedMessagesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftParseTemplateToMixedMessagesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ParseTemplateToMixedMessagesData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftParseTemplateToMixedMessagesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ParseTemplateToMixedMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftParseTemplateToMixedMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftParseTemplateToMixedMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftParseTemplateToMixedMessagesResult(%+v)", *p)
}

// Attributes:
//  - Tpl
type WxServiceThriftSendTmplateMessageArgs struct {
  Tpl *TemplateMsgData `thrift:"tpl,1" db:"tpl" json:"tpl"`
}

func NewWxServiceThriftSendTmplateMessageArgs() *WxServiceThriftSendTmplateMessageArgs {
  return &WxServiceThriftSendTmplateMessageArgs{}
}

var WxServiceThriftSendTmplateMessageArgs_Tpl_DEFAULT *TemplateMsgData
func (p *WxServiceThriftSendTmplateMessageArgs) GetTpl() *TemplateMsgData {
  if !p.IsSetTpl() {
    return WxServiceThriftSendTmplateMessageArgs_Tpl_DEFAULT
  }
return p.Tpl
}
func (p *WxServiceThriftSendTmplateMessageArgs) IsSetTpl() bool {
  return p.Tpl != nil
}

func (p *WxServiceThriftSendTmplateMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftSendTmplateMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Tpl = &TemplateMsgData{}
  if err := p.Tpl.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tpl), err)
  }
  return nil
}

func (p *WxServiceThriftSendTmplateMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendTmplateMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftSendTmplateMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tpl", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tpl: ", p), err) }
  if err := p.Tpl.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tpl), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tpl: ", p), err) }
  return err
}

func (p *WxServiceThriftSendTmplateMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftSendTmplateMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftSendTmplateMessageResult struct {
  Success *SendTemplateResponseData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftSendTmplateMessageResult() *WxServiceThriftSendTmplateMessageResult {
  return &WxServiceThriftSendTmplateMessageResult{}
}

var WxServiceThriftSendTmplateMessageResult_Success_DEFAULT *SendTemplateResponseData
func (p *WxServiceThriftSendTmplateMessageResult) GetSuccess() *SendTemplateResponseData {
  if !p.IsSetSuccess() {
    return WxServiceThriftSendTmplateMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftSendTmplateMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftSendTmplateMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftSendTmplateMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SendTemplateResponseData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftSendTmplateMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendTmplateMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftSendTmplateMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftSendTmplateMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftSendTmplateMessageResult(%+v)", *p)
}

// Attributes:
//  - FromUserName
//  - ToUserName
//  - Content
type WxServiceThriftGetTextXmlArgs struct {
  FromUserName string `thrift:"fromUserName,1" db:"fromUserName" json:"fromUserName"`
  ToUserName string `thrift:"toUserName,2" db:"toUserName" json:"toUserName"`
  Content string `thrift:"content,3" db:"content" json:"content"`
}

func NewWxServiceThriftGetTextXmlArgs() *WxServiceThriftGetTextXmlArgs {
  return &WxServiceThriftGetTextXmlArgs{}
}


func (p *WxServiceThriftGetTextXmlArgs) GetFromUserName() string {
  return p.FromUserName
}

func (p *WxServiceThriftGetTextXmlArgs) GetToUserName() string {
  return p.ToUserName
}

func (p *WxServiceThriftGetTextXmlArgs) GetContent() string {
  return p.Content
}
func (p *WxServiceThriftGetTextXmlArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetTextXmlArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromUserName = v
}
  return nil
}

func (p *WxServiceThriftGetTextXmlArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ToUserName = v
}
  return nil
}

func (p *WxServiceThriftGetTextXmlArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *WxServiceThriftGetTextXmlArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTextXml_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetTextXmlArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromUserName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromUserName: ", p), err) }
  if err := oprot.WriteString(string(p.FromUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromUserName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromUserName: ", p), err) }
  return err
}

func (p *WxServiceThriftGetTextXmlArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toUserName: ", p), err) }
  if err := oprot.WriteString(string(p.ToUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toUserName: ", p), err) }
  return err
}

func (p *WxServiceThriftGetTextXmlArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err) }
  return err
}

func (p *WxServiceThriftGetTextXmlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetTextXmlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftGetTextXmlResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftGetTextXmlResult() *WxServiceThriftGetTextXmlResult {
  return &WxServiceThriftGetTextXmlResult{}
}

var WxServiceThriftGetTextXmlResult_Success_DEFAULT string
func (p *WxServiceThriftGetTextXmlResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return WxServiceThriftGetTextXmlResult_Success_DEFAULT
  }
return *p.Success
}
func (p *WxServiceThriftGetTextXmlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftGetTextXmlResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetTextXmlResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WxServiceThriftGetTextXmlResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTextXml_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetTextXmlResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftGetTextXmlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetTextXmlResult(%+v)", *p)
}

// Attributes:
//  - FromUserName
//  - ToUserName
//  - KfAccount
type WxServiceThriftTransferCustomerServiceArgs struct {
  FromUserName string `thrift:"fromUserName,1" db:"fromUserName" json:"fromUserName"`
  ToUserName string `thrift:"toUserName,2" db:"toUserName" json:"toUserName"`
  KfAccount string `thrift:"kfAccount,3" db:"kfAccount" json:"kfAccount"`
}

func NewWxServiceThriftTransferCustomerServiceArgs() *WxServiceThriftTransferCustomerServiceArgs {
  return &WxServiceThriftTransferCustomerServiceArgs{}
}


func (p *WxServiceThriftTransferCustomerServiceArgs) GetFromUserName() string {
  return p.FromUserName
}

func (p *WxServiceThriftTransferCustomerServiceArgs) GetToUserName() string {
  return p.ToUserName
}

func (p *WxServiceThriftTransferCustomerServiceArgs) GetKfAccount() string {
  return p.KfAccount
}
func (p *WxServiceThriftTransferCustomerServiceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromUserName = v
}
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ToUserName = v
}
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KfAccount = v
}
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransferCustomerService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromUserName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromUserName: ", p), err) }
  if err := oprot.WriteString(string(p.FromUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromUserName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromUserName: ", p), err) }
  return err
}

func (p *WxServiceThriftTransferCustomerServiceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toUserName: ", p), err) }
  if err := oprot.WriteString(string(p.ToUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toUserName: ", p), err) }
  return err
}

func (p *WxServiceThriftTransferCustomerServiceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kfAccount", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kfAccount: ", p), err) }
  if err := oprot.WriteString(string(p.KfAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kfAccount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kfAccount: ", p), err) }
  return err
}

func (p *WxServiceThriftTransferCustomerServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftTransferCustomerServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftTransferCustomerServiceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftTransferCustomerServiceResult() *WxServiceThriftTransferCustomerServiceResult {
  return &WxServiceThriftTransferCustomerServiceResult{}
}

var WxServiceThriftTransferCustomerServiceResult_Success_DEFAULT string
func (p *WxServiceThriftTransferCustomerServiceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return WxServiceThriftTransferCustomerServiceResult_Success_DEFAULT
  }
return *p.Success
}
func (p *WxServiceThriftTransferCustomerServiceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftTransferCustomerServiceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransferCustomerService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftTransferCustomerServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftTransferCustomerServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftTransferCustomerServiceResult(%+v)", *p)
}

// Attributes:
//  - RedirectURL
//  - Scope
type WxServiceThriftAuthCodeURLArgs struct {
  RedirectURL string `thrift:"redirectURL,1" db:"redirectURL" json:"redirectURL"`
  Scope string `thrift:"scope,2" db:"scope" json:"scope"`
}

func NewWxServiceThriftAuthCodeURLArgs() *WxServiceThriftAuthCodeURLArgs {
  return &WxServiceThriftAuthCodeURLArgs{}
}


func (p *WxServiceThriftAuthCodeURLArgs) GetRedirectURL() string {
  return p.RedirectURL
}

func (p *WxServiceThriftAuthCodeURLArgs) GetScope() string {
  return p.Scope
}
func (p *WxServiceThriftAuthCodeURLArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftAuthCodeURLArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RedirectURL = v
}
  return nil
}

func (p *WxServiceThriftAuthCodeURLArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *WxServiceThriftAuthCodeURLArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AuthCodeURL_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftAuthCodeURLArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("redirectURL", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:redirectURL: ", p), err) }
  if err := oprot.WriteString(string(p.RedirectURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.redirectURL (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:redirectURL: ", p), err) }
  return err
}

func (p *WxServiceThriftAuthCodeURLArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scope: ", p), err) }
  if err := oprot.WriteString(string(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scope: ", p), err) }
  return err
}

func (p *WxServiceThriftAuthCodeURLArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftAuthCodeURLArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftAuthCodeURLResult struct {
  Success *AuthCodeURLData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftAuthCodeURLResult() *WxServiceThriftAuthCodeURLResult {
  return &WxServiceThriftAuthCodeURLResult{}
}

var WxServiceThriftAuthCodeURLResult_Success_DEFAULT *AuthCodeURLData
func (p *WxServiceThriftAuthCodeURLResult) GetSuccess() *AuthCodeURLData {
  if !p.IsSetSuccess() {
    return WxServiceThriftAuthCodeURLResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftAuthCodeURLResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftAuthCodeURLResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftAuthCodeURLResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AuthCodeURLData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftAuthCodeURLResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AuthCodeURL_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftAuthCodeURLResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftAuthCodeURLResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftAuthCodeURLResult(%+v)", *p)
}

// Attributes:
//  - Code
type WxServiceThriftGetUserInfoBySnsapiBaseArgs struct {
  Code string `thrift:"code,1" db:"code" json:"code"`
}

func NewWxServiceThriftGetUserInfoBySnsapiBaseArgs() *WxServiceThriftGetUserInfoBySnsapiBaseArgs {
  return &WxServiceThriftGetUserInfoBySnsapiBaseArgs{}
}


func (p *WxServiceThriftGetUserInfoBySnsapiBaseArgs) GetCode() string {
  return p.Code
}
func (p *WxServiceThriftGetUserInfoBySnsapiBaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfoBySnsapiBase_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetUserInfoBySnsapiBaseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftGetUserInfoBySnsapiBaseResult struct {
  Success *UserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftGetUserInfoBySnsapiBaseResult() *WxServiceThriftGetUserInfoBySnsapiBaseResult {
  return &WxServiceThriftGetUserInfoBySnsapiBaseResult{}
}

var WxServiceThriftGetUserInfoBySnsapiBaseResult_Success_DEFAULT *UserInfo
func (p *WxServiceThriftGetUserInfoBySnsapiBaseResult) GetSuccess() *UserInfo {
  if !p.IsSetSuccess() {
    return WxServiceThriftGetUserInfoBySnsapiBaseResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftGetUserInfoBySnsapiBaseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfoBySnsapiBase_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftGetUserInfoBySnsapiBaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetUserInfoBySnsapiBaseResult(%+v)", *p)
}

// Attributes:
//  - Code
type WxServiceThriftGetUserInfoBySnsapiUserinfoArgs struct {
  Code string `thrift:"code,1" db:"code" json:"code"`
}

func NewWxServiceThriftGetUserInfoBySnsapiUserinfoArgs() *WxServiceThriftGetUserInfoBySnsapiUserinfoArgs {
  return &WxServiceThriftGetUserInfoBySnsapiUserinfoArgs{}
}


func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoArgs) GetCode() string {
  return p.Code
}
func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfoBySnsapiUserinfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetUserInfoBySnsapiUserinfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftGetUserInfoBySnsapiUserinfoResult struct {
  Success *UserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftGetUserInfoBySnsapiUserinfoResult() *WxServiceThriftGetUserInfoBySnsapiUserinfoResult {
  return &WxServiceThriftGetUserInfoBySnsapiUserinfoResult{}
}

var WxServiceThriftGetUserInfoBySnsapiUserinfoResult_Success_DEFAULT *UserInfo
func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoResult) GetSuccess() *UserInfo {
  if !p.IsSetSuccess() {
    return WxServiceThriftGetUserInfoBySnsapiUserinfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfoBySnsapiUserinfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftGetUserInfoBySnsapiUserinfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetUserInfoBySnsapiUserinfoResult(%+v)", *p)
}

// Attributes:
//  - Openid
type WxServiceThriftGetUserInfoByOpenidArgs struct {
  Openid string `thrift:"openid,1" db:"openid" json:"openid"`
}

func NewWxServiceThriftGetUserInfoByOpenidArgs() *WxServiceThriftGetUserInfoByOpenidArgs {
  return &WxServiceThriftGetUserInfoByOpenidArgs{}
}


func (p *WxServiceThriftGetUserInfoByOpenidArgs) GetOpenid() string {
  return p.Openid
}
func (p *WxServiceThriftGetUserInfoByOpenidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoByOpenidArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Openid = v
}
  return nil
}

func (p *WxServiceThriftGetUserInfoByOpenidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfoByOpenid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetUserInfoByOpenidArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("openid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:openid: ", p), err) }
  if err := oprot.WriteString(string(p.Openid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.openid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:openid: ", p), err) }
  return err
}

func (p *WxServiceThriftGetUserInfoByOpenidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetUserInfoByOpenidArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftGetUserInfoByOpenidResult struct {
  Success *UserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftGetUserInfoByOpenidResult() *WxServiceThriftGetUserInfoByOpenidResult {
  return &WxServiceThriftGetUserInfoByOpenidResult{}
}

var WxServiceThriftGetUserInfoByOpenidResult_Success_DEFAULT *UserInfo
func (p *WxServiceThriftGetUserInfoByOpenidResult) GetSuccess() *UserInfo {
  if !p.IsSetSuccess() {
    return WxServiceThriftGetUserInfoByOpenidResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftGetUserInfoByOpenidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftGetUserInfoByOpenidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoByOpenidResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftGetUserInfoByOpenidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfoByOpenid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetUserInfoByOpenidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftGetUserInfoByOpenidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetUserInfoByOpenidResult(%+v)", *p)
}

// Attributes:
//  - Menu
type WxServiceThriftCreateMenuArgs struct {
  Menu *Menu `thrift:"menu,1" db:"menu" json:"menu"`
}

func NewWxServiceThriftCreateMenuArgs() *WxServiceThriftCreateMenuArgs {
  return &WxServiceThriftCreateMenuArgs{}
}

var WxServiceThriftCreateMenuArgs_Menu_DEFAULT *Menu
func (p *WxServiceThriftCreateMenuArgs) GetMenu() *Menu {
  if !p.IsSetMenu() {
    return WxServiceThriftCreateMenuArgs_Menu_DEFAULT
  }
return p.Menu
}
func (p *WxServiceThriftCreateMenuArgs) IsSetMenu() bool {
  return p.Menu != nil
}

func (p *WxServiceThriftCreateMenuArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftCreateMenuArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Menu = &Menu{}
  if err := p.Menu.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Menu), err)
  }
  return nil
}

func (p *WxServiceThriftCreateMenuArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateMenu_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftCreateMenuArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("menu", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:menu: ", p), err) }
  if err := p.Menu.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Menu), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:menu: ", p), err) }
  return err
}

func (p *WxServiceThriftCreateMenuArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftCreateMenuArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftCreateMenuResult struct {
  Success *WxResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftCreateMenuResult() *WxServiceThriftCreateMenuResult {
  return &WxServiceThriftCreateMenuResult{}
}

var WxServiceThriftCreateMenuResult_Success_DEFAULT *WxResponse
func (p *WxServiceThriftCreateMenuResult) GetSuccess() *WxResponse {
  if !p.IsSetSuccess() {
    return WxServiceThriftCreateMenuResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftCreateMenuResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftCreateMenuResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftCreateMenuResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &WxResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftCreateMenuResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateMenu_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftCreateMenuResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftCreateMenuResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftCreateMenuResult(%+v)", *p)
}

// Attributes:
//  - MenuJsonBytes
type WxServiceThriftCreateMenuByJsonArgs struct {
  MenuJsonBytes []byte `thrift:"menuJsonBytes,1" db:"menuJsonBytes" json:"menuJsonBytes"`
}

func NewWxServiceThriftCreateMenuByJsonArgs() *WxServiceThriftCreateMenuByJsonArgs {
  return &WxServiceThriftCreateMenuByJsonArgs{}
}


func (p *WxServiceThriftCreateMenuByJsonArgs) GetMenuJsonBytes() []byte {
  return p.MenuJsonBytes
}
func (p *WxServiceThriftCreateMenuByJsonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftCreateMenuByJsonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MenuJsonBytes = v
}
  return nil
}

func (p *WxServiceThriftCreateMenuByJsonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateMenuByJson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftCreateMenuByJsonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("menuJsonBytes", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:menuJsonBytes: ", p), err) }
  if err := oprot.WriteBinary(p.MenuJsonBytes); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.menuJsonBytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:menuJsonBytes: ", p), err) }
  return err
}

func (p *WxServiceThriftCreateMenuByJsonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftCreateMenuByJsonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftCreateMenuByJsonResult struct {
  Success *WxResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftCreateMenuByJsonResult() *WxServiceThriftCreateMenuByJsonResult {
  return &WxServiceThriftCreateMenuByJsonResult{}
}

var WxServiceThriftCreateMenuByJsonResult_Success_DEFAULT *WxResponse
func (p *WxServiceThriftCreateMenuByJsonResult) GetSuccess() *WxResponse {
  if !p.IsSetSuccess() {
    return WxServiceThriftCreateMenuByJsonResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftCreateMenuByJsonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftCreateMenuByJsonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftCreateMenuByJsonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &WxResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftCreateMenuByJsonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateMenuByJson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftCreateMenuByJsonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftCreateMenuByJsonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftCreateMenuByJsonResult(%+v)", *p)
}

// Attributes:
//  - OrderParam
type WxServiceThriftUnifiedOrderArgs struct {
  OrderParam *UnifiedOrderParam `thrift:"orderParam,1" db:"orderParam" json:"orderParam"`
}

func NewWxServiceThriftUnifiedOrderArgs() *WxServiceThriftUnifiedOrderArgs {
  return &WxServiceThriftUnifiedOrderArgs{}
}

var WxServiceThriftUnifiedOrderArgs_OrderParam_DEFAULT *UnifiedOrderParam
func (p *WxServiceThriftUnifiedOrderArgs) GetOrderParam() *UnifiedOrderParam {
  if !p.IsSetOrderParam() {
    return WxServiceThriftUnifiedOrderArgs_OrderParam_DEFAULT
  }
return p.OrderParam
}
func (p *WxServiceThriftUnifiedOrderArgs) IsSetOrderParam() bool {
  return p.OrderParam != nil
}

func (p *WxServiceThriftUnifiedOrderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftUnifiedOrderArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.OrderParam = &UnifiedOrderParam{}
  if err := p.OrderParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OrderParam), err)
  }
  return nil
}

func (p *WxServiceThriftUnifiedOrderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnifiedOrder_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftUnifiedOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderParam", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderParam: ", p), err) }
  if err := p.OrderParam.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OrderParam), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderParam: ", p), err) }
  return err
}

func (p *WxServiceThriftUnifiedOrderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftUnifiedOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftUnifiedOrderResult struct {
  Success *UnifiedOrderResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftUnifiedOrderResult() *WxServiceThriftUnifiedOrderResult {
  return &WxServiceThriftUnifiedOrderResult{}
}

var WxServiceThriftUnifiedOrderResult_Success_DEFAULT *UnifiedOrderResponse
func (p *WxServiceThriftUnifiedOrderResult) GetSuccess() *UnifiedOrderResponse {
  if !p.IsSetSuccess() {
    return WxServiceThriftUnifiedOrderResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftUnifiedOrderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftUnifiedOrderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftUnifiedOrderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UnifiedOrderResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftUnifiedOrderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnifiedOrder_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftUnifiedOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftUnifiedOrderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftUnifiedOrderResult(%+v)", *p)
}

// Attributes:
//  - UnifiedOrderResult_
type WxServiceThriftGetJsApiParametersArgs struct {
  UnifiedOrderResult_ *UnifiedOrderResponse `thrift:"unifiedOrderResult,1" db:"unifiedOrderResult" json:"unifiedOrderResult"`
}

func NewWxServiceThriftGetJsApiParametersArgs() *WxServiceThriftGetJsApiParametersArgs {
  return &WxServiceThriftGetJsApiParametersArgs{}
}

var WxServiceThriftGetJsApiParametersArgs_UnifiedOrderResult__DEFAULT *UnifiedOrderResponse
func (p *WxServiceThriftGetJsApiParametersArgs) GetUnifiedOrderResult_() *UnifiedOrderResponse {
  if !p.IsSetUnifiedOrderResult_() {
    return WxServiceThriftGetJsApiParametersArgs_UnifiedOrderResult__DEFAULT
  }
return p.UnifiedOrderResult_
}
func (p *WxServiceThriftGetJsApiParametersArgs) IsSetUnifiedOrderResult_() bool {
  return p.UnifiedOrderResult_ != nil
}

func (p *WxServiceThriftGetJsApiParametersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetJsApiParametersArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UnifiedOrderResult_ = &UnifiedOrderResponse{}
  if err := p.UnifiedOrderResult_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnifiedOrderResult_), err)
  }
  return nil
}

func (p *WxServiceThriftGetJsApiParametersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetJsApiParameters_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetJsApiParametersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unifiedOrderResult", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unifiedOrderResult: ", p), err) }
  if err := p.UnifiedOrderResult_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnifiedOrderResult_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unifiedOrderResult: ", p), err) }
  return err
}

func (p *WxServiceThriftGetJsApiParametersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetJsApiParametersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftGetJsApiParametersResult struct {
  Success *JsApiParameters `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftGetJsApiParametersResult() *WxServiceThriftGetJsApiParametersResult {
  return &WxServiceThriftGetJsApiParametersResult{}
}

var WxServiceThriftGetJsApiParametersResult_Success_DEFAULT *JsApiParameters
func (p *WxServiceThriftGetJsApiParametersResult) GetSuccess() *JsApiParameters {
  if !p.IsSetSuccess() {
    return WxServiceThriftGetJsApiParametersResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftGetJsApiParametersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftGetJsApiParametersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftGetJsApiParametersResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &JsApiParameters{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftGetJsApiParametersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetJsApiParameters_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftGetJsApiParametersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftGetJsApiParametersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftGetJsApiParametersResult(%+v)", *p)
}

// Attributes:
//  - XmlBytes
type WxServiceThriftWxpayParseAndVerifySignArgs struct {
  XmlBytes []byte `thrift:"xmlBytes,1" db:"xmlBytes" json:"xmlBytes"`
}

func NewWxServiceThriftWxpayParseAndVerifySignArgs() *WxServiceThriftWxpayParseAndVerifySignArgs {
  return &WxServiceThriftWxpayParseAndVerifySignArgs{}
}


func (p *WxServiceThriftWxpayParseAndVerifySignArgs) GetXmlBytes() []byte {
  return p.XmlBytes
}
func (p *WxServiceThriftWxpayParseAndVerifySignArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftWxpayParseAndVerifySignArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.XmlBytes = v
}
  return nil
}

func (p *WxServiceThriftWxpayParseAndVerifySignArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WxpayParseAndVerifySign_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftWxpayParseAndVerifySignArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("xmlBytes", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:xmlBytes: ", p), err) }
  if err := oprot.WriteBinary(p.XmlBytes); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.xmlBytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:xmlBytes: ", p), err) }
  return err
}

func (p *WxServiceThriftWxpayParseAndVerifySignArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftWxpayParseAndVerifySignArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftWxpayParseAndVerifySignResult struct {
  Success *WXPayNotify `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftWxpayParseAndVerifySignResult() *WxServiceThriftWxpayParseAndVerifySignResult {
  return &WxServiceThriftWxpayParseAndVerifySignResult{}
}

var WxServiceThriftWxpayParseAndVerifySignResult_Success_DEFAULT *WXPayNotify
func (p *WxServiceThriftWxpayParseAndVerifySignResult) GetSuccess() *WXPayNotify {
  if !p.IsSetSuccess() {
    return WxServiceThriftWxpayParseAndVerifySignResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftWxpayParseAndVerifySignResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftWxpayParseAndVerifySignResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftWxpayParseAndVerifySignResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &WXPayNotify{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftWxpayParseAndVerifySignResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WxpayParseAndVerifySign_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftWxpayParseAndVerifySignResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftWxpayParseAndVerifySignResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftWxpayParseAndVerifySignResult(%+v)", *p)
}

// Attributes:
//  - QrJsonBytes
type WxServiceThriftQrcodeShowArgs struct {
  QrJsonBytes []byte `thrift:"qrJsonBytes,1" db:"qrJsonBytes" json:"qrJsonBytes"`
}

func NewWxServiceThriftQrcodeShowArgs() *WxServiceThriftQrcodeShowArgs {
  return &WxServiceThriftQrcodeShowArgs{}
}


func (p *WxServiceThriftQrcodeShowArgs) GetQrJsonBytes() []byte {
  return p.QrJsonBytes
}
func (p *WxServiceThriftQrcodeShowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftQrcodeShowArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.QrJsonBytes = v
}
  return nil
}

func (p *WxServiceThriftQrcodeShowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QrcodeShow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftQrcodeShowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qrJsonBytes", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:qrJsonBytes: ", p), err) }
  if err := oprot.WriteBinary(p.QrJsonBytes); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qrJsonBytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:qrJsonBytes: ", p), err) }
  return err
}

func (p *WxServiceThriftQrcodeShowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftQrcodeShowArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftQrcodeShowResult struct {
  Success *QrRespone `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftQrcodeShowResult() *WxServiceThriftQrcodeShowResult {
  return &WxServiceThriftQrcodeShowResult{}
}

var WxServiceThriftQrcodeShowResult_Success_DEFAULT *QrRespone
func (p *WxServiceThriftQrcodeShowResult) GetSuccess() *QrRespone {
  if !p.IsSetSuccess() {
    return WxServiceThriftQrcodeShowResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftQrcodeShowResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftQrcodeShowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftQrcodeShowResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &QrRespone{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftQrcodeShowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QrcodeShow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftQrcodeShowResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftQrcodeShowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftQrcodeShowResult(%+v)", *p)
}

type WxServiceThriftMaterialCountArgs struct {
}

func NewWxServiceThriftMaterialCountArgs() *WxServiceThriftMaterialCountArgs {
  return &WxServiceThriftMaterialCountArgs{}
}

func (p *WxServiceThriftMaterialCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftMaterialCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MaterialCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftMaterialCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftMaterialCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftMaterialCountResult struct {
  Success *MaCount `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftMaterialCountResult() *WxServiceThriftMaterialCountResult {
  return &WxServiceThriftMaterialCountResult{}
}

var WxServiceThriftMaterialCountResult_Success_DEFAULT *MaCount
func (p *WxServiceThriftMaterialCountResult) GetSuccess() *MaCount {
  if !p.IsSetSuccess() {
    return WxServiceThriftMaterialCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftMaterialCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftMaterialCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftMaterialCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MaCount{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftMaterialCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MaterialCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftMaterialCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftMaterialCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftMaterialCountResult(%+v)", *p)
}

type WxServiceThriftMaterialListArgs struct {
}

func NewWxServiceThriftMaterialListArgs() *WxServiceThriftMaterialListArgs {
  return &WxServiceThriftMaterialListArgs{}
}

func (p *WxServiceThriftMaterialListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftMaterialListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MaterialList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftMaterialListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftMaterialListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WxServiceThriftMaterialListResult struct {
  Success *Res `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWxServiceThriftMaterialListResult() *WxServiceThriftMaterialListResult {
  return &WxServiceThriftMaterialListResult{}
}

var WxServiceThriftMaterialListResult_Success_DEFAULT *Res
func (p *WxServiceThriftMaterialListResult) GetSuccess() *Res {
  if !p.IsSetSuccess() {
    return WxServiceThriftMaterialListResult_Success_DEFAULT
  }
return p.Success
}
func (p *WxServiceThriftMaterialListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WxServiceThriftMaterialListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WxServiceThriftMaterialListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Res{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WxServiceThriftMaterialListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MaterialList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WxServiceThriftMaterialListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WxServiceThriftMaterialListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WxServiceThriftMaterialListResult(%+v)", *p)
}


