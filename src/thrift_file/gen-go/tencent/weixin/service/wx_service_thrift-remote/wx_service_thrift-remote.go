// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "tencent/weixin/service"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "   CallBack(i64 callTime, string name,  paramMap)")
  fmt.Fprintln(os.Stderr, "  void put(Article newArticle)")
  fmt.Fprintln(os.Stderr, "  string GetAccessToken()")
  fmt.Fprintln(os.Stderr, "  string GetJsapiTicket()")
  fmt.Fprintln(os.Stderr, "  JsapiSignData JsapiSign(string url)")
  fmt.Fprintln(os.Stderr, "  IsWeixinServerData IsWeixinServer(string token, string echostr, string signature, string timestamp, string nonce)")
  fmt.Fprintln(os.Stderr, "  ParseTemplateToMixedMessagesData ParseTemplateToMixedMessages(string body)")
  fmt.Fprintln(os.Stderr, "  SendTemplateResponseData SendTmplateMessage(TemplateMsgData tpl)")
  fmt.Fprintln(os.Stderr, "  string GetTextXml(string fromUserName, string toUserName, string content)")
  fmt.Fprintln(os.Stderr, "  string TransferCustomerService(string fromUserName, string toUserName, string kfAccount)")
  fmt.Fprintln(os.Stderr, "  AuthCodeURLData AuthCodeURL(string redirectURL, string scope)")
  fmt.Fprintln(os.Stderr, "  UserInfo GetUserInfoBySnsapiBase(string code)")
  fmt.Fprintln(os.Stderr, "  UserInfo GetUserInfoBySnsapiUserinfo(string code)")
  fmt.Fprintln(os.Stderr, "  UserInfo GetUserInfoByOpenid(string openid)")
  fmt.Fprintln(os.Stderr, "  WxResponse CreateMenu(menu menu)")
  fmt.Fprintln(os.Stderr, "  WxResponse CreateMenuByJson(string menuJsonBytes)")
  fmt.Fprintln(os.Stderr, "  UnifiedOrderResponse UnifiedOrder(UnifiedOrderParam orderParam)")
  fmt.Fprintln(os.Stderr, "  JsApiParameters GetJsApiParameters(UnifiedOrderResponse unifiedOrderResult)")
  fmt.Fprintln(os.Stderr, "  WXPayNotify WxpayParseAndVerifySign(string xmlBytes)")
  fmt.Fprintln(os.Stderr, "  QrRespone QrcodeShow(string qrJsonBytes)")
  fmt.Fprintln(os.Stderr, "  MaCount MaterialCount()")
  fmt.Fprintln(os.Stderr, "  Res MaterialList()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := service.NewWxServiceThriftClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "CallBack":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CallBack requires 3 args")
      flag.Usage()
    }
    argvalue0, err49 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err49 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg51 := flag.Arg(3)
    mbTrans52 := thrift.NewTMemoryBufferLen(len(arg51))
    defer mbTrans52.Close()
    _, err53 := mbTrans52.WriteString(arg51)
    if err53 != nil { 
      Usage()
      return
    }
    factory54 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt55 := factory54.GetProtocol(mbTrans52)
    containerStruct2 := service.NewWxServiceThriftCallBackArgs()
    err56 := containerStruct2.ReadField3(jsProt55)
    if err56 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ParamMap
    value2 := argvalue2
    fmt.Print(client.CallBack(value0, value1, value2))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Put requires 1 args")
      flag.Usage()
    }
    arg57 := flag.Arg(1)
    mbTrans58 := thrift.NewTMemoryBufferLen(len(arg57))
    defer mbTrans58.Close()
    _, err59 := mbTrans58.WriteString(arg57)
    if err59 != nil {
      Usage()
      return
    }
    factory60 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt61 := factory60.GetProtocol(mbTrans58)
    argvalue0 := service.NewArticle()
    err62 := argvalue0.Read(jsProt61)
    if err62 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Put(value0))
    fmt.Print("\n")
    break
  case "GetAccessToken":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAccessToken requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAccessToken())
    fmt.Print("\n")
    break
  case "GetJsapiTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetJsapiTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetJsapiTicket())
    fmt.Print("\n")
    break
  case "JsapiSign":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "JsapiSign requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.JsapiSign(value0))
    fmt.Print("\n")
    break
  case "IsWeixinServer":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "IsWeixinServer requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.IsWeixinServer(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "ParseTemplateToMixedMessages":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ParseTemplateToMixedMessages requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ParseTemplateToMixedMessages(value0))
    fmt.Print("\n")
    break
  case "SendTmplateMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendTmplateMessage requires 1 args")
      flag.Usage()
    }
    arg70 := flag.Arg(1)
    mbTrans71 := thrift.NewTMemoryBufferLen(len(arg70))
    defer mbTrans71.Close()
    _, err72 := mbTrans71.WriteString(arg70)
    if err72 != nil {
      Usage()
      return
    }
    factory73 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt74 := factory73.GetProtocol(mbTrans71)
    argvalue0 := service.NewTemplateMsgData()
    err75 := argvalue0.Read(jsProt74)
    if err75 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendTmplateMessage(value0))
    fmt.Print("\n")
    break
  case "GetTextXml":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTextXml requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTextXml(value0, value1, value2))
    fmt.Print("\n")
    break
  case "TransferCustomerService":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TransferCustomerService requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TransferCustomerService(value0, value1, value2))
    fmt.Print("\n")
    break
  case "AuthCodeURL":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AuthCodeURL requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AuthCodeURL(value0, value1))
    fmt.Print("\n")
    break
  case "GetUserInfoBySnsapiBase":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserInfoBySnsapiBase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUserInfoBySnsapiBase(value0))
    fmt.Print("\n")
    break
  case "GetUserInfoBySnsapiUserinfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserInfoBySnsapiUserinfo requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUserInfoBySnsapiUserinfo(value0))
    fmt.Print("\n")
    break
  case "GetUserInfoByOpenid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserInfoByOpenid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUserInfoByOpenid(value0))
    fmt.Print("\n")
    break
  case "CreateMenu":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateMenu requires 1 args")
      flag.Usage()
    }
    arg87 := flag.Arg(1)
    mbTrans88 := thrift.NewTMemoryBufferLen(len(arg87))
    defer mbTrans88.Close()
    _, err89 := mbTrans88.WriteString(arg87)
    if err89 != nil {
      Usage()
      return
    }
    factory90 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt91 := factory90.GetProtocol(mbTrans88)
    argvalue0 := service.NewMenu()
    err92 := argvalue0.Read(jsProt91)
    if err92 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateMenu(value0))
    fmt.Print("\n")
    break
  case "CreateMenuByJson":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateMenuByJson requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CreateMenuByJson(value0))
    fmt.Print("\n")
    break
  case "UnifiedOrder":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnifiedOrder requires 1 args")
      flag.Usage()
    }
    arg94 := flag.Arg(1)
    mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
    defer mbTrans95.Close()
    _, err96 := mbTrans95.WriteString(arg94)
    if err96 != nil {
      Usage()
      return
    }
    factory97 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt98 := factory97.GetProtocol(mbTrans95)
    argvalue0 := service.NewUnifiedOrderParam()
    err99 := argvalue0.Read(jsProt98)
    if err99 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UnifiedOrder(value0))
    fmt.Print("\n")
    break
  case "GetJsApiParameters":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJsApiParameters requires 1 args")
      flag.Usage()
    }
    arg100 := flag.Arg(1)
    mbTrans101 := thrift.NewTMemoryBufferLen(len(arg100))
    defer mbTrans101.Close()
    _, err102 := mbTrans101.WriteString(arg100)
    if err102 != nil {
      Usage()
      return
    }
    factory103 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt104 := factory103.GetProtocol(mbTrans101)
    argvalue0 := service.NewUnifiedOrderResponse()
    err105 := argvalue0.Read(jsProt104)
    if err105 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJsApiParameters(value0))
    fmt.Print("\n")
    break
  case "WxpayParseAndVerifySign":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WxpayParseAndVerifySign requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.WxpayParseAndVerifySign(value0))
    fmt.Print("\n")
    break
  case "QrcodeShow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QrcodeShow requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.QrcodeShow(value0))
    fmt.Print("\n")
    break
  case "MaterialCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "MaterialCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.MaterialCount())
    fmt.Print("\n")
    break
  case "MaterialList":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "MaterialList requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.MaterialList())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
